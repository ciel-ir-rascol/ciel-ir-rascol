{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STS CIEL Informatique et R\u00e9seaux","text":""},{"location":"#lycee-louis-rascol-albi","title":"Lyc\u00e9e Louis Rascol, Albi","text":"<p>Ce site web regroupe des ressources pour la formation en STS CIEL Cybers\u00e9curit\u00e9 Informatique et \u00c9lectronique option Informatique et R\u00e9seaux au lyc\u00e9e Louis Rascol \u00e0 Albi.</p>"},{"location":"arduino/","title":"Programmation en environnement Arduino","text":"<p>L'environnement Arduino est appr\u00e9ci\u00e9 pour sa rapidit\u00e9 de prise en main et son c\u00f4t\u00e9 open-source, en ayant pour base le langage C/C++ et les microcontr\u00f4leurs Atmega de chez Atmel la surcouche Arduino permet de coder les algorithmiques des plus simples aux plus complexes.</p>"},{"location":"arduino/#sommaire","title":"Sommaire","text":""},{"location":"arduino/#cours","title":"Cours","text":"<ol> <li>Structure d'un programme Arduino</li> <li>Les variables et constantes dans un code Arduino</li> <li>Les fonctions de base du langage C/C++</li> <li>Les fonctions Arduino</li> <li>Utilisation des modules Grove de Seeed Studio</li> <li>Cr\u00e9ation d'une macro ou sous-programme en environnement C/C++</li> <li>Les interruptions</li> <li>Le timer</li> </ol>"},{"location":"arduino/#activites","title":"Activit\u00e9s","text":"<ol> <li>D\u00e9couverte des entr\u00e9es sorties num\u00e9riques</li> <li>Exploitation du port s\u00e9rie</li> <li>D\u00e9couverte du Convertisseur Num\u00e9rique Analogique (CAN)</li> <li>La fonction Modulation de Largeur d'Impulsions ou PWM</li> <li>Les macros</li> <li>Les interruptions</li> <li>Le timer</li> </ol>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/","title":"Structure d'un programme Arduino","text":"<p>Un programme Arduino est toujours structur\u00e9 de la m\u00eame mani\u00e8re : Une partie initialisations et d\u00e9clarations de variables, une partie setup() et une partie loop()</p>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/#1-le-cartouche","title":"1. Le cartouche","text":"<p>Tout programme doit contenir un cartouche, il permet d'informer le lecteur sur :</p> <ul> <li>Le nom du programme</li> <li>Le r\u00f4le du programme, d\u00e9crit en quelques mots.</li> <li>Son auteur et \u00e9ventuellement comment communiquer avec lui (mail)</li> <li>La version du code en commen\u00e7ant par V0.0 et sa date</li> <li>\u00c9ventuellement une licence si le code est publi\u00e9 sur internet</li> <li>Le logiciel permettant sa compilation (dans notre cas l'IDE Arduino)</li> </ul> <p>Voici un exemple de cartouche pour un programme Arduino avec licence GNU V3.0, que vous pouvez utiliser pour vos propres codes :</p> <pre><code>/**************************************************************************************************\nNom ......... : Projet_Alarme_Emission_433.ino\nRole ........ : Transmet en 433MHz gr\u00e2ce \u00e0 la biblioth\u00e8que VirtualWire une cha\u00eene de\n                caract\u00e8re sur la pin 12 de l'Arduino Mega 2560\n                * Dans le cas normal envoi :\"Repos_capteur_ILS\"\n                * Dans le cas d'un front montant sur CapteurPin envoi : \"Alerte_capteur_ILS\"\nAuteur ...... : J.Serrand\nMail ........ : joris.serrand@rascol.net\nVersion ..... : V0.0 du 17/02/16\nLicence ..... : Copyright (C) 2016  Joris SERRAND\n                This program is free software: you can redistribute it and/or modify\n                it under the terms of the GNU General Public License as published by\n                the Free Software Foundation, either version 3 of the License, or\n                (at your option) any later version.\n                This program is distributed in the hope that it will be useful,\n                but WITHOUT ANY WARRANTY; without even the implied warranty of\n                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                GNU General Public License for more details.\n                You should have received a copy of the GNU General Public License\n                along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\nCompilation . : Avec l'IDE Arduino\n****************************************************************************************************/\n</code></pre>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/#2-initialisations-et-declarations-de-variables-ou-constantes","title":"2. Initialisations et d\u00e9clarations de variables ou constantes","text":"<p>C'est dans cette partie que nous faisons les ajouts de biblioth\u00e8ques n\u00e9cessaires \u00e0 l'ex\u00e9cution de notre code, ainsi que les d\u00e9clarations et initialisations de variables et constantes. M\u00eame si le c++ autorise les d\u00e9clarations n'importe o\u00f9 dans le programme, il est vivement conseill\u00e9 de toutes les regrouper dans cette partie.</p> <p>Voici un exemple de d'ajout de biblioth\u00e8ques et de d\u00e9clarations :</p> <pre><code>//Ajout de biblioth\u00e8ques\n#include &lt;Wire.h&gt; //Insertion de la biblioth\u00e8que pour les fonctions I2C\n//D\u00e9clarations de constantes\n#define bp 10 //D\u00e9claration d'une constante appel\u00e9e bp de valeur 10\nconst float pi(3.14); //D\u00e9claration d'une constante de type float et de nom \"pi\" initialis\u00e9e \u00e0 3.14\n//D\u00e9claration de variables\nint cpt(0); //D\u00e9claration d'un entier de nom \"cpt\" initialis\u00e9 \u00e0 0\nfloat vitesse(10.5); //D\u00e9claration d'un flottant de nom \"vitesse\" initialis\u00e9 \u00e0 10.5\n</code></pre>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/#3-le-parametrage-du-programme-setup","title":"3. Le param\u00e9trage du programme setup()","text":"<p>La partie <code>void setup()</code> renferme le param\u00e9trage n\u00e9cessaire au fonctionnement du programme, on peut par exemple y trouver :</p> <ul> <li>Le <code>pinMode()</code>, permettant de dire si une pin num\u00e9rique est utilis\u00e9e en entr\u00e9e ou en sortie.</li> <li>Le <code>Serial.begin()</code>, permettant de param\u00e9trer la vitesse de transfert de l'UART.</li> <li>...</li> </ul> <p>Warning</p> <p>Ne pas commencer \u00e0 \u00e9crire votre code dans cette partie, <code>setup()</code> ne doit contenir que le param\u00e9trage et ne s'ex\u00e9cute qu'une seule fois lors du lancement du programme.</p> <p>Voici un exemple de <code>setup()</code> :</p> <pre><code>void setup()\n{\nWire.begin();//Initialisation de la liaison I2C\nlcd.init(); //Initialisation du LCD\npinMode(4, INPUT); //Param\u00e9trage de la pin num\u00e9rique 4 en entr\u00e9e\nSerial.begin(9600); //Param\u00e9trage de la vitesse du port s\u00e9rie\n}\n</code></pre>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/#4-le-programme-principal-loop","title":"4. Le programme principal loop()","text":"<p>La partie <code>void loop()</code> est le programme principal de votre code Arduino. Comme son nom l'indique \u00e9crire dans cette partie revient \u00e0 \u00e9crire dans une boucle <code>while(1)</code>, le programme est reboucl\u00e9 sans fin.</p> <p>Exemple de programme principal faisant clignoter la led 13 (led pr\u00e9sente sur le circuit imprim\u00e9 d'une carte Arduino UNO) :</p> <pre><code>void loop()\n{\ndigitalWrite(13, HIGH);   // Met la pin 13 au niveau haut, ce qui a pour effet d'allumer la led\ndelay(1000);              // Attend une seconde\ndigitalWrite(13, LOW);    // Met la pin 13 au niveau bas, ce qui a pour effet d'\u00e9teindre la led\ndelay(1000);              // Attend une seconde\n}\n</code></pre>"},{"location":"arduino/02-Variables_constantes/","title":"Les variables et constantes dans un code Arduino","text":"<p>La variable est en programmation un syst\u00e8me de stockage de donn\u00e9es. Par analogie une variable peut \u00eatre compar\u00e9e \u00e0 une bo\u00eete, le type de variable correspondant \u00e0 la taille de la bo\u00eete, plus le type est cod\u00e9 sur un nombre de bits important, plus la bo\u00eete sera grande. L'int\u00e9rieur d'une variable contient un nombre (ou un caract\u00e8re si le type le permet) modifiable \u00e0 souhait tout au long du programme.</p> <p></p>"},{"location":"arduino/02-Variables_constantes/#1-les-types-de-variables","title":"1. Les types de variables","text":""},{"location":"arduino/02-Variables_constantes/#11-signe-ou-non-signe","title":"1.1 Sign\u00e9 ou non Sign\u00e9 ??","text":"<p>Vous avez peut-\u00eatre pu remarquer au cours de vos lectures la r\u00e9f\u00e9rence \u00e0 un type de variable sign\u00e9 ou non sign\u00e9, qu'est ce que \u00e7a peut bien vouloir dire ? La \"signature\" est un moyen en programmation pour coder les nombres relatifs, un type de variable non sign\u00e9 comme par exemple un <code>unsigned int</code> ne pourra pas contenir un nombre relatif inf\u00e9rieur \u00e0 0 comme -9. \u00c0 contrario, un type sign\u00e9 comme <code>int</code> pourra contenir un nombre relatif sup\u00e9rieur ou inf\u00e9rieur \u00e0 0.</p>"},{"location":"arduino/02-Variables_constantes/#12-le-booleen-boolean","title":"1.2 Le bool\u00e9en : <code>boolean</code>","text":"<p>Le bool\u00e9en not\u00e9 <code>boolean</code> sur Arduino, est le plus petit type de variable que vous serez emmen\u00e9 \u00e0 rencontrer, il est cod\u00e9 sur seulement 2 bits. Son contenu ne peut \u00eatre que 0 ou 1, soit <code>True</code>ou <code>False</code>sur Arduino. Ce type est souvent utilis\u00e9 pour stocker l'\u00e9tat d'un capteur num\u00e9rique, par exemple un bouton poussoir : <code>True</code>si le bouton est appuy\u00e9, <code>False</code>si il est rel\u00e2ch\u00e9. C'est un type non sign\u00e9.</p>"},{"location":"arduino/02-Variables_constantes/#13-loctet-byte","title":"1.3 L'octet : <code>byte</code>","text":"<p>L'octet not\u00e9 <code>byte</code> sous Arduino, est un type de variable cod\u00e9 sur 8 bits. Son contenu est un nombre pouvant aller de 0 \u00e0 255. C'est un type non sign\u00e9.</p>"},{"location":"arduino/02-Variables_constantes/#14-lentier-int","title":"1.4 L'entier : <code>int</code>","text":"<p>L'entier not\u00e9 <code>int</code> sous Arduino, est un type de variable sign\u00e9 cod\u00e9 sur 16 bits. Son contenu est un nombre pouvant aller de \\({-2}^{15}\\) \u00e0 \\({2}^{15}-1\\) soit de -32768 \u00e0 32767. Le calcul des extrema se fait sur 15 bits et non pas sur 16 car le bit de poids fort est r\u00e9serv\u00e9 pour le bit de signe, si celui-ci est \u00e0 1 le compl\u00e9ment \u00e0 deux du nombre qui suit est interpr\u00e9t\u00e9 comme un n\u00e9gatif, inversement pour un positif.</p> <p>Info</p> <p>Il existe le type <code>unsigned int</code> pour un entier non sign\u00e9. Les valeurs limites sont donc de 0 \u00e0 \\(2^{16}-1\\), soit de 0 \u00e0  65 535.</p>"},{"location":"arduino/02-Variables_constantes/#15-le-flottant-float","title":"1.5 Le flottant : <code>float</code>","text":"<p>Le flottant not\u00e9 <code>float</code> sous Arduino, est un type de variable sign\u00e9 cod\u00e9 sur 4 octets soit 32 bits. Son contenu est un nombre pouvant aller de 3.4028235E+38 \u00e0 -3.4028235E+38.</p> <p>Codage d'un nombre en virgule flottante : La virgule flottante est une technique pour stocker dans une variable un nombre r\u00e9el. Pour cela il suffit de d\u00e9composer le nombre de la mani\u00e8re suivante :</p> <p></p> <ul> <li>Le bit de poids fort est le bit de signe, il est \u00e0 1 si le nombre est n\u00e9gatif, \u00e0 0 si il est positif.</li> <li>La mantisse contient les chiffres significatifs du nombre elle est cod\u00e9e sur 23 bits.</li> <li>L'exposant repr\u00e9sente la place de la virgule dans le nombre, il est cod\u00e9 sur 8 bits.</li> </ul>"},{"location":"arduino/02-Variables_constantes/#16-le-caractere-char","title":"1.6 Le caract\u00e8re : <code>char</code>","text":"<p>Le caract\u00e8re not\u00e9 <code>char</code> sous Arduino, est un type de variable cod\u00e9 sur 8 bits. Son contenu est un caract\u00e8re, cod\u00e9 avec son code d\u00e9cimal ASCII correspondant. Pour enregistrer un caract\u00e8re il suffit de le mettre entre c\u00f4tes : <code>'a'</code> , si on souhaite enregistrer le code d\u00e9cimal ASCII correspondant au caract\u00e8re souhait\u00e9 il suffit de le noter tel quel. Pour <code>'a'</code> le code ASCII correspondant est 97.</p> <p>Le codage ASCII</p> <p>L'ASCII pour American Standard Code for Information Interchange (Code am\u00e9ricain normalis\u00e9 pour l'\u00e9change d'information) est un syst\u00e8me de codage des caract\u00e8res invent\u00e9 dans les 60 par l'ISO (International Organization for Standardization). C'est un syst\u00e8me de codage devenu un standard pour transmettre l'information de mani\u00e8re num\u00e9rique. Pour de plus amples renseignements sur la cr\u00e9ation du code ASCII n'h\u00e9sitez pas \u00e0 consulter la page Wikip\u00e9dia d\u00e9di\u00e9e.</p> <p></p>"},{"location":"arduino/02-Variables_constantes/#2-la-declaration-et-linitialisation-de-variables","title":"2. La d\u00e9claration et l'initialisation de variables","text":"<p>Pour utiliser une variable dans son programme Arduino il faut au pr\u00e9alable la cr\u00e9er, en programmation on parlera de d\u00e9clarer une variable. Le langage C/C++ autorise la d\u00e9claration de variables n'importe o\u00f9 dans le code, cependant il est pr\u00e9f\u00e9rable pour les novices de faire toutes les d\u00e9clarations et initialisations au d\u00e9but, juste apr\u00e8s les ajouts de biblioth\u00e8ques (<code>#define ...</code>). Quand on d\u00e9clare une variable on a pour obligation de lui donner un nom, et de pr\u00e9ciser son type, il est pr\u00e9f\u00e9rable \u00e9galement de l'initialiser, c'est \u00e0 dire lui donner une valeur de d\u00e9part sans quoi un nombre ind\u00e9pendant de notre volont\u00e9 sera enregistr\u00e9.</p> <p>Pour d\u00e9clarer et initialiser une variable il suffit d'utiliser l'instruction suivante :</p> <p></p> <p>Dans cet exemple nous venons de d\u00e9clarer une variable de type entier appel\u00e9e ma_variable et initialis\u00e9e \u00e0 124.</p> <p>Warning</p> <p>Les noms de variables ne doivent pas contenir d'espaces, d'accents, de caract\u00e8res sp\u00e9ciaux autre que <code>_</code>. De plus le langage C/C++ est sensible \u00e0 la casse c'est \u00e0 dire qu'il diff\u00e9rencie les minuscules des majuscules.</p> <p>Autres exemples :</p> <ul> <li>Pour un bool\u00e9en : <code>boolean etat_bp=true;</code> Initialisation d'un bool\u00e9en appel\u00e9 etat_bp \u00e0 l'\u00e9tat haut.</li> <li>Pour un flottant : <code>float capteur=56.4;</code> Initialisation d'un flottant appel\u00e9 capteur \u00e0 la valeur 56.4.</li> <li>Pour un octet : <code>byte toto=23;</code> Initialisation d'un octet appel\u00e9 toto \u00e0 la valeur 23.</li> <li>Pour un caract\u00e8re : <code>char mon_caractere='b';</code> ou <code>char mon_caractere=98;</code> Initialisation d'un caract\u00e8re appel\u00e9 mon_caractere \u00e0 la valeur 98 code ASCII correspondant \u00e0 'b'.</li> </ul>"},{"location":"arduino/02-Variables_constantes/#3-la-declaration-de-constantes","title":"3. La d\u00e9claration de constantes","text":"<p>Une constante \u00e0 l'inverse d'une variable, ne varie pas lors de l'ex\u00e9cution du programme elle reste \u00e0 la valeur \u00e0 laquelle elle a \u00e9t\u00e9 initialis\u00e9e. Cela est tr\u00e8s utile pour d\u00e9finir un num\u00e9ro de pin ou une constante comme le nombre pi. Nous d\u00e9veloppons ci-dessous 2 m\u00e9thodes pour d\u00e9clarer une constante :</p>"},{"location":"arduino/02-Variables_constantes/#31-utilisation-de-const","title":"3.1 Utilisation de <code>const</code>","text":"<p>La d\u00e9finition d'une constante gr\u00e2ce au mot cl\u00e9 <code>const</code> est la m\u00e9thode \u00e0 privil\u00e9gier, il suffit pour cela de choisir le bon type de variable pouvant contenir notre constante et utiliser l'instruction suivante :</p> <p></p> <p>Ici nous d\u00e9clarons une constante appel\u00e9e <code>ma_constante</code> et initialis\u00e9e \u00e0 la valeur 234.</p>"},{"location":"arduino/02-Variables_constantes/#32-utilisation-de-define","title":"3.2 Utilisation de <code>#define</code>","text":"<p>La d\u00e9finition d'une constante \u00e0 l'aide du mot cl\u00e9 <code>#define</code> est \u00e0 \u00e9viter, toutefois nous tenons \u00e0 vous montrer son utilisation ci-dessous :</p> <p></p> <p>Warning</p> <p>Le <code>#define</code> attribue dans l'exemple ci-dessus le mot <code>ma_constante</code> \u00e0 <code>234</code> avant la compilation. C'est \u00e0 dire que dans tout le code \u00e0 chaque fois que le mot <code>ma_constante</code> sera utilis\u00e9 il sera remplac\u00e9 par <code>234</code>, je vous laisse voir les probl\u00e8mes que cela peut poser dans le code...</p>"},{"location":"arduino/03-Fonctions_C%2B%2B/","title":"Les fonctions de base du langage C/C++","text":"<p>Le langage C/C++ utilis\u00e9 pour la programmation des microcontr\u00f4leurs Atmel est le langage choisi par Arduino pour la programmation de ses cartes \u00e9lectroniques. Dans ce cours nous donnons les principaux mots-cl\u00e9s du langage permettant de reproduire les structures de bases vues en algorithmique : structures lin\u00e9aires, alternatives et r\u00e9p\u00e9titives.</p>"},{"location":"arduino/03-Fonctions_C%2B%2B/#1-les-operateurs-de-comparaison","title":"1. Les op\u00e9rateurs de comparaison","text":"<p>Le tableau suivant liste les op\u00e9rateurs utilis\u00e9s en C/C++ pour d\u00e9finir des conditions :</p> Op\u00e9rateurs <code>==</code> Egalit\u00e9 <code>!=</code> Diff\u00e9rence <code>&lt;</code> Inf\u00e9rieur <code>&gt;</code> Sup\u00e9rieur <code>&lt;=</code> Inf\u00e9rieur ou \u00e9gal <code>&gt;=</code> Sup\u00e9rieur ou \u00e9gal <p>Warning</p> <p>L'erreur classique est de confondre le <code>=</code> et le <code>==</code>, notez que le premier est pour l'affectation d'une valeur \u00e0 une variable et le second pour la comparaison. De plus le langage C/C++ n'autorise pas l'encadrement de variables entre deux valeurs dans une condition tel que : <code>5&lt;toto&lt;10</code>, pour \u00e9crire une telle condition il suffit d'utiliser l'op\u00e9rateur logique <code>&amp;&amp;</code>.</p>"},{"location":"arduino/03-Fonctions_C%2B%2B/#2-les-operateurs-logiques","title":"2. Les op\u00e9rateurs logiques","text":"<p>Le tableau suivant liste les op\u00e9rateurs logiques utilis\u00e9s en C/C++ pour d\u00e9finir des conditions :</p> Op\u00e9rateurs <code>&amp;&amp;</code> Et logique | | Ou logique <code>!</code> Non <p>Warning</p> <p>Faire attention \u00e0 ne pas confondre le <code>&amp;&amp;</code> et le <code>&amp;</code> ou le <code>||</code> et le <code>|</code>. Dans le cas du double symbole l'utilisation est pour une condition, dans le cas du symbole seul l'utilisation est un pour une op\u00e9ration logique bit \u00e0 bit.</p>"},{"location":"arduino/03-Fonctions_C%2B%2B/#3-les-conditions","title":"3. Les conditions","text":""},{"location":"arduino/03-Fonctions_C%2B%2B/#31-si-alors-if","title":"3.1 Si Alors : <code>if()</code>","text":"<p>La condition Si Alors permet de r\u00e9aliser une ou plusieurs actions si seulement la condition \u00e9nonc\u00e9e est vrai, si ce n'est pas le cas le programme saute la condition et poursuit son ex\u00e9cution. La structure de cette condition est donn\u00e9e ci-dessous :</p> <p></p> <p>Warning</p> <p>Le langage C/C++ utilise l'accolade ouverte <code>{</code> pour indiquer l'entr\u00e9e dans une fonction et l'accolade ferm\u00e9e <code>}</code> pour en sortir, afin de na pas oublier cette particularit\u00e9 propre \u00e0 ce langage il est vivement conseill\u00e9 de bien indenter son code pour en am\u00e9liorer la lisibilit\u00e9.</p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>int a = 0; //D\u00e9claration d'un entier \"a\", initialis\u00e9 \u00e0 0\nif(a&lt;10) //Condition pour entrer dans le si : \"a\" doit \u00eatre strictement inf\u00e9rieur \u00e0 10\n{\na=a+1; // Si \"a\" est inf\u00e9rieur \u00e0 10 alors on rajoute 1 \u00e0 \"a\".\n}\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#32-si-alors-sinon-if-else","title":"3.2 Si Alors Sinon : <code>if() else</code>","text":"<p>La condition Si Alors Sinon permet de r\u00e9aliser une ou plusieurs actions si seulement la condition \u00e9nonc\u00e9e est vrai, si ce n'est pas le cas le programme aiguille l'ex\u00e9cution vers le Sinon. La structure de cette condition est donn\u00e9e ci-dessous :</p> <p></p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>int a = 0; //D\u00e9claration d'un entier \"a\", initialis\u00e9 \u00e0 0\nif(a&lt;10) //Condition pour entrer dans le si : \"a\" doit \u00eatre strictement inf\u00e9rieur \u00e0 10\n{\na=a+1; // Si \"a\" est inf\u00e9rieur \u00e0 10 alors on rajoute 1 \u00e0 \"a\"\n}\nelse\n{\na=a-1; // Sinon on enl\u00e8ve 1 \u00e0 \"a\"\n}\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#33-le-choix-multiple-switch-case","title":"3.3 Le choix multiple : <code>switch() case</code>","text":"<p>Le choix multiple permet pour une variable de notre choix, d'aiguiller le programme suivant la valeur que cette variable va prendre. La structure de cette condition est donn\u00e9e ci-dessous :</p> <p></p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>int var_choix = 0; //D\u00e9claration d'un entier \"var_choix\", initialis\u00e9 \u00e0 0\nswitch(var_choix) //Mise en place d'un choix multiple pour la variable var_choix\n{\ncase 1: //Actions \u00e0 ex\u00e9cuter dans le cas o\u00f9 var_choix = 1\nbreak; //Indication de fin d'instructions pour ce case\ncase 2: //Actions \u00e0 ex\u00e9cuter dans le cas o\u00f9 var_choix = 2\nbreak; //Indication de fin d'instructions pour ce case\ndefault: //Actions \u00e0 ex\u00e9cuter dans le cas o\u00f9 var_choix est diff\u00e9rent de tous les cases pr\u00e9c\u00e9dents\nbreak; //Indication de fin d'instructions pour ce case\n}\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#4-les-boucles","title":"4. Les boucles","text":""},{"location":"arduino/03-Fonctions_C%2B%2B/#41-tant-que-while","title":"4.1 Tant que : <code>while()</code>","text":"<p>La boucle Tant que permet de r\u00e9p\u00e9ter une suite d'instructions tant que le condition \u00e9nonc\u00e9e au d\u00e9but est vraie. La structure de cette boucle est donn\u00e9e ci-dessous.</p> <p></p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>while(1) //Permet de r\u00e9aliser une boucle infinie \u00e9quivaut \u00e0 \u00e9crire while(1=1)\n{\n//Suite d'instructions \u00e0 r\u00e9aliser dans la boucle\n}\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#42-faire-tant-que-do-while","title":"4.2 Faire Tant que : <code>do while()</code>","text":"<p>La boucle Faire Tant que permet de r\u00e9p\u00e9ter une suite d'instructions tant que le condition \u00e9nonc\u00e9e \u00e0 la fin est vraie, la suite d'instructions sera r\u00e9alis\u00e9e au moins une fois car le test de la condition ne se fait qu'\u00e0 la fin. La structure de cette boucle est donn\u00e9e ci-dessous.</p> <p></p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>do\n{\n//Suite d'instructions \u00e0 r\u00e9aliser dans la boucle\n}while(1); //Permet de r\u00e9aliser une boucle infinie \u00e9quivaut \u00e0 \u00e9crire while(1=1)\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#43-pour-for","title":"4.3 Pour : <code>for()</code>","text":"<p>La boucle Pour permet de r\u00e9p\u00e9ter une suite d'instructions selon une \u00e9volution d\u00e9finie au d\u00e9but. La structure de cette boucle est donn\u00e9e ci-dessous.</p> <p></p> <p>Param\u00e9trage de la boucle <code>for</code>:</p> <ul> <li> <p>Initialisation de la variable de comptage : Exceptionnellement et que dans ce cas bien pr\u00e9cis nous autorisons la   d\u00e9claration de variable au cours du programme. La variable de comptage ici <code>cpt</code> est la variable qui   s'incr\u00e9mentera ou se d\u00e9cr\u00e9mentera \u00e0 chaque passage dans la boucle suivant le pas de comptage choisi, celle-ci est   ici initialis\u00e9e \u00e0 0.</p> </li> <li> <p>Condition de comptage : Nous d\u00e9finissons ici la condition d'ex\u00e9cution de la boucle, dans notre cas nous tournerons   dans le boucle tant que la variable de comptage <code>cpt</code> est inf\u00e9rieure \u00e0 10.</p> </li> <li> <p>Pas de comptage : Ici nous d\u00e9finissons l'\u00e9volution de la variable de comptage <code>cpt</code> lors de chaque passage dans la   boucle. Dans notre cas nous incr\u00e9mentons de 1 \u00e0 chaque passage dans la boucle, <code>cpt++</code> revient \u00e0   coder <code>cpt=cpt+1</code>. Nous aurions pu \u00e9galement d\u00e9cr\u00e9menter de 1 : <code>cpt--</code>, ou bien choisir un pas diff\u00e9rent de   1 : <code>cpt=cpt+3</code>.</p> </li> </ul> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>for(int cpt=0;cpt&lt;10;cpt++) //Boucle en initialisant cpt \u00e0 0 tant que cpt&lt;10 et incr\u00e9mente de 1 \u00e0 chaque passage\n{\n//Suite d'instructions \u00e0 r\u00e9aliser dans la boucle\n}\n</code></pre>"},{"location":"arduino/04-Fonctions_Arduino/","title":"Les fonctions Arduino","text":""},{"location":"arduino/04-Fonctions_Arduino/#lire-et-ecrire-sur-les-pins-numeriques","title":"Lire et \u00e9crire sur les pins num\u00e9riques","text":"<p>Les cartes Arduino disposent toutes de pins num\u00e9riques utilisables aussi bien en entr\u00e9es qu'en sorties, nous montrons dans ce cours comment les param\u00e9trer et s'en servir.</p> <p>Nous rappelons ci-dessous l'emplacement des pins num\u00e9riques sur une carte Arduino UNO et MEGA :</p> <p></p>"},{"location":"arduino/04-Fonctions_Arduino/#1-parametrage-du-sens-dutilisation-avec-pinmode","title":"1. Param\u00e9trage du sens d'utilisation avec <code>pinMode()</code>","text":"<p>Une carte Arduino peu importe le mod\u00e8le, dispose de pins num\u00e9riques et de pins analogiques, la premi\u00e8re cat\u00e9gorie de pins contrairement \u00e0 la seconde peut \u00eatre configur\u00e9e, aussi bien en entr\u00e9e qu'en sortie :</p> <ul> <li> <p>Une pin num\u00e9rique est utilis\u00e9e en entr\u00e9e <code>INPUT</code> pour recueillir une information ext\u00e9rieure (un \"1\" ou un \"0\") venant d'un capteur \u00e0 sortie num\u00e9rique, par exemple un bouton poussoir ou un capteur ILS (Reed).</p> </li> <li> <p>Une pin num\u00e9rique est utilis\u00e9e en sortie <code>OUTPUT</code> pour \u00e9crire un niveau logique (un \"1\" ou un \"0\") sur l'entr\u00e9e d'un actionneur, par exemple une led, un relais ou un moteur.</p> </li> </ul> <p>La figure ci-dessous illustre ces deux possibilit\u00e9s, la pin 13 est configur\u00e9e en sortie et la pin 2 en entr\u00e9e :</p> <p></p> <p>La fonction <code>pinMode()</code> \u00e0 coder dans la partie <code>void setup()</code> va nous permettre d'indiquer au micro-contr\u00f4leur le sens d'utilisation de chaque pin. Ci-dessous nous donnons la structure de cette fonction :</p> <p></p> <p>Puis un code exemple de l'utilisation de cette fonction :</p> <pre><code>const int led=13; //D\u00e9claration d'une constante de type entier appel\u00e9e \"led\" et initialis\u00e9e \u00e0 13\nconst int bp=2; //D\u00e9claration d'une constante de type entier appel\u00e9e \"bp\" et initialis\u00e9e \u00e0 2\nvoid setup() //Initialisations\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin 13\npinMode(bp,INPUT); //Mise en entr\u00e9e de la pin 2\n}\n</code></pre> <p>Warning</p> <p>Comme pr\u00e9cis\u00e9 ci-dessus <code>pinMode()</code> ne s'utilise qu'avec des pins num\u00e9riques (digital). De plus quand une pin a \u00e9t\u00e9 d\u00e9finie en sortie, il est interdit de l'utiliser en entr\u00e9e plus tard dans le programme et vice-versa.</p>"},{"location":"arduino/04-Fonctions_Arduino/#2-utilisation-de-digitalwrite","title":"2. Utilisation de <code>digitalWrite()</code>","text":"<p>La fonction Arduino <code>digitalWrite()</code> permet d'\u00e9crire une information num\u00e9rique (un 0 ou un 1), sur une pin num\u00e9rique. Les niveaux de tension correspondants sont les niveaux TTL :</p> <ul> <li>Un 1 logique vaut 5V</li> <li>Un 0 logique vaut GND (la masse)</li> </ul> <p>Ci-dessous nous donnons la structure de cette fonction :</p> <p></p> <p>Le code ci-dessous allume la led 13 reli\u00e9e \u00e0 la pin 13 (led pr\u00e9sente sur le circuit imprim\u00e9 d'une carte Arduino UNO ou Mega) en se servant de <code>digitalWrite()</code> :</p> <pre><code>const int led=13; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 13 la pin o\u00f9 la led est reli\u00e9e\nvoid setup() //Initialisations\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 13\n}\nvoid loop() //Programme principal\n{\ndigitalWrite(led,HIGH); //Mise \u00e0 1 de la pin num\u00e9rique 13 d\u00e9sign\u00e9e par la constante led\n}\n</code></pre> <p>M\u00eame exemple mais en se servant d'une variable <code>etat</code> de type <code>boolean</code> contenant le niveau logique servant \u00e0 l'allumage de la led :</p> <pre><code>const int led=13; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 13 la pin o\u00f9 la led est reli\u00e9e\nboolean etat=true; //D\u00e9claration d'une variable \"etat\" de type bool\u00e9en initialis\u00e9e \u00e0 true (soit niveau logique 1)\nvoid setup() //Initialisation\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 13\n}\nvoid loop() //Programme principal\n{\ndigitalWrite(led,etat); //Mise \u00e0 1 de la pin num\u00e9rique 13 d\u00e9sign\u00e9e par la constante led, l'\u00e9tat de la pin est contenu dans la variable \"etat\"\n}\n</code></pre> <p>Emplacement de la led 13 sur les cartes Arduino UNO et MEGA :</p> <p></p>"},{"location":"arduino/04-Fonctions_Arduino/#3-utilisation-de-digitalread","title":"3. Utilisation de <code>digitalRead()</code>","text":"<p>La fonction Arduino <code>digitalRead()</code> permet de lire une information num\u00e9rique (un 0 ou un 1), sur une pin num\u00e9rique. Les niveaux de tension correspondants sont \u00e9galement des niveaux TTL.</p> <p>Ci-dessous nous donnons la structure de cette fonction :</p> <p></p> <p>{% include important.html content=\"Ne pas oublier de d\u00e9clarer une variable (ici nomm\u00e9e Etat) de type bool\u00e9en <code>boolean</code> qui contiendra le niveau logique de la pin dont vous faites la lecture.\"%}</p> <p>Le code ci-dessous allume la led reli\u00e9e \u00e0 la pin 13 quand le bouton poussoir reli\u00e9e \u00e0 la pin 2 est appuy\u00e9 :</p> <pre><code>const int led=13; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 13 la pin o\u00f9 la led est reli\u00e9e\nconst int bp=2; //D\u00e9claration d'une constante de type int et de nom \"bp\", contenant 2 la pin o\u00f9 le bouton poussoir est reli\u00e9\nboolean etat=false; //D\u00e9claration d'une variable \"etat\" de type bool\u00e9en initialis\u00e9e \u00e0 false (soit niveau logique 0)\nvoid setup() //Initialisation\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 13 pour la led\npinMode(bp,INPUT); //Mise en entr\u00e9e de la pin num\u00e9rique 2 pour le bouton poussoir\n}\nvoid loop() //Programme principal\n{\netat=digitalRead(bp); //Lecture de la valeur de la pin 2 : bouton appuy\u00e9 -&gt; etat=1   bouton relach\u00e9 -&gt; etat=0\ndigitalWrite(led,etat); //La led s'allume ou s'\u00e9teint suivant la valeur de \"etat\"\n}\n</code></pre> <p>Montage Arduino pour le code pr\u00e9c\u00e9dent :</p> <p></p>"},{"location":"arduino/04-Fonctions_Arduino/#utiliser-le-can-et-le-pwm","title":"Utiliser le CAN et le PWM","text":"<p>L'environnement Arduino nous permet d'utiliser de mani\u00e8re simple deux fonctions essentielles d'un microcontr\u00f4leur le CAN et le PWM, nous donnons dans ce cours les explications quant \u00e0 leurs param\u00e9trages et leurs utilisations.</p>"},{"location":"arduino/04-Fonctions_Arduino/#1-fonctionnement-du-can-et-utilisation-de-analogread","title":"1. Fonctionnement du CAN et utilisation de <code>analogRead()</code>","text":"<p>Nous rappelons ci-dessous l'emplacement des pins analogiques sur une carte Arduino UNO et MEGA :</p> <p></p>"},{"location":"arduino/04-Fonctions_Arduino/#11-apport-theorique-sur-la-conversion-analogique-numerique","title":"1.1 Apport th\u00e9orique sur la conversion analogique num\u00e9rique","text":"<p>Les cartes Arduino UNO et MEGA disposent toutes deux d'un Convertisseur Analogique Num\u00e9rique de 10 bits int\u00e9gr\u00e9 au micro-contr\u00f4leur, la figure ci-dessous vise \u00e0 expliquer son fonctionnement :</p> <p></p> <p>Une carte Arduino dispose de 6 entr\u00e9es analogiques A0 \u00e0 A5 pour le UNO, 16 de A0 \u00e0 A15 pour le MEGA. L'entr\u00e9e du convertisseur \\(\\(V_{a0}\\)\\) accepte une tension analogiques comprise entre 0 et 5V maximum, qui sera convertie en un nombre binaire N compris entre 0 et 1023.</p> <p>Nous d\u00e9duisons alors la caract\u00e9ristique entr\u00e9e/sortie du CAN :</p> <p></p> <p>Le quantum q est la plage de tension analogique qui permet \u00e0 la sortie N de cro\u00eetre d'une marche quand celle-ci est d\u00e9pass\u00e9e :</p> \\[ q=\\frac{V_{pe}}{2^{n}-1}=\\frac{5}{2^{10}-1}=4.89mV \\] <p>\u00c0 partir de la droite rouge nous obtenons l'\u00e9quation du CAN :</p> \\[ (N)_{10}=\\frac{1023}{5}\\times V_{a0} \\] <p>On peut alors en d\u00e9duire les valeurs \\(N_{min}\\) et \\(N_{max}\\) :</p> \\[ N_{min}=(0000000000)_{2}=(0)_{10} \\] \\[ N_{max}=2^{10}-1=(1111111111)_{2}=(1023)_{10} \\]"},{"location":"arduino/04-Fonctions_Arduino/#12-utiliser-le-can-avec-arduino","title":"1.2 Utiliser le CAN avec Arduino","text":"<p>L'utilisation du CAN avec Arduino est tr\u00e8s simple, il suffit d'utiliser la fonction <code>analogRead()</code>, nous donnons ci-dessous sa structure :</p> <p></p> <p>Le code suivant lit la valeur analogique sur la pin A0 et la convertit en <code>N</code> en utilisant la fonction <code>analogRead</code>. La variable <code>N</code> est ensuite convertie en Volts gr\u00e2ce \u00e0 l'\u00e9quation de la droite du CAN, pour obtenir finalement la variable <code>Va0</code>.</p> <pre><code>const int PinAna=0; //D\u00e9claration d'une constante de type int et de nom \"PinAna\", contenant 0 la pin analogique \u00e0 lire\nfloat VaO=0; //D\u00e9claration d'une variable de type float et de nom \"Vao\", initialis\u00e9e \u00e0 0\nint N=0; //D\u00e9claration d'une variable de type int et de nom \"N\", initialis\u00e9e \u00e0 0\nvoid setup() //Initialisation\n{\n//Pas de pinMode pour analogRead()\n}\nvoid loop() //Programme principal\n{\nN=analogRead(PinAna); //Lecture de la valeur Va0 de la pin analogique 0 et conversion en N -&gt; 0&lt;N&lt;1023\nVao=(5.0/1023.0)* N; //Conversion de N en Va0 gr\u00e2ce \u00e0 l'\u00e9quation de la droite du CAN\n}\n</code></pre> <p>Warning</p> <p>Ne pas d\u00e9clarer la pin analogique utilis\u00e9e en entr\u00e9e \u00e0 l'aide de <code>pinMode()</code> Arduino le fait de mani\u00e8re automatique sachant que <code>analogRead()</code> ne s'utilise qu'avec des pins analogiques qui ne fonctionnent qu'en entr\u00e9e.</p>"},{"location":"arduino/04-Fonctions_Arduino/#2-fonctionnement-du-pwm-et-utilisation-de-analogwrite","title":"2. Fonctionnement du PWM et utilisation de <code>analogWrite()</code>","text":""},{"location":"arduino/04-Fonctions_Arduino/#21-apport-theorique-sur-la-modulation-de-largeur-dimpulsion-mli","title":"2.1 Apport th\u00e9orique sur la modulation de largeur d'impulsion (MLI)","text":"<p>La MLI aussi appel\u00e9e PWM (Pulse Width Modulation) en Anglais, est une technique permettant de faire varier la valeur moyenne de la tension d'un signal carr\u00e9 en changeant son rapport cyclique. Avant de rentrer dans les d\u00e9tails, revoyons un peu de vocabulaire technique.</p> <p></p> <p>La figure ci-dessus montre un signal carr\u00e9 configur\u00e9 de cette mani\u00e8re :</p> <ul> <li> <p>P\u00e9riode : T = 2ms</p> </li> <li> <p>Fr\u00e9quence : f = \\(\\frac{1}{T}\\) = 500Hz</p> </li> <li> <p>Dur\u00e9e de l'\u00e9tat bas : \\(T_b\\) = 1ms</p> </li> <li> <p>Dur\u00e9e de l'\u00e9tat haut : \\(T_h\\) = 1ms</p> </li> <li> <p>Tension max : \\(V_{max}\\) = \\(\\hat{V}\\) = 5V</p> </li> <li> <p>Tension min : \\(V_{min}\\) = 0V</p> </li> </ul> <p>Nous montrons ici comment calculer sa valeur moyenne :</p> <p></p> <p>Formule de la valeur moyenne \\(&lt;V&gt;\\) pour un signal carr\u00e9 et seulement pour un signal carr\u00e9 :</p> \\[ &lt;V&gt;=\\frac{\\Delta T}{T} \\] <p>O\u00f9 \\(\\Delta T\\) est l'aire du carr\u00e9 bleu :</p> \\[ \\Delta T =V_{max}\\times T_h \\] <p>Nous obtenons alors :</p> \\[ &lt;V&gt;=\\frac{V_{max}\\times T_h}{T} \\] <p>En faisant l'application num\u00e9rique \u00e0 la figure ci-dessus :</p> \\[ &lt;V&gt;=\\frac{5\\times 1\\times 10^{-3}}{2\\times 10^{-3}}=2,5V \\] <p>On trace \u00e0 pr\u00e9sent la valeur moyenne \\(&lt;V&gt;\\) en vert sur la figure :</p> <p></p> <p>Introduisons \u00e0 pr\u00e9sent la notion de rapport cyclique \\(\\alpha\\) qui est essentielle \u00e0 la compr\u00e9hension du fonctionnement d'un PWM :</p> \\[ \\alpha=\\frac{T_h}{T} \\] <p>Le rapport cyclique est un pourcentage : \\(0\\%&lt;\\alpha&lt;100\\%\\)</p> <p>La technique du PWM consiste \u00e0 faire varier le rapport cyclique qui revient \u00e0 faire varier la valeur moyenne du signal. Nous donnons ci-dessous des variations du rapport cyclique du signal carr\u00e9 pr\u00e9c\u00e9dent, tout en gardant la m\u00eame fr\u00e9quence f=500Hz :</p> <ul> <li>Pour \\(\\alpha=0\\%\\)</li> </ul> <p></p> <ul> <li>Pour \\(\\alpha=10\\%\\)</li> </ul> <p></p> <ul> <li>Pour \\(\\alpha=50\\%\\)</li> </ul> <p></p> <ul> <li>Pour \\(\\alpha=90\\%\\)</li> </ul> <p></p> <ul> <li>Pour \\(\\alpha=100\\%\\)</li> </ul> <p></p> <p>Avec une fr\u00e9quence \u00e9lev\u00e9e le composant branch\u00e9 en sortie du PWM ne verra que la valeur moyenne (la droite verte) du signal carr\u00e9 qui est continue.</p> <p>La technique du PWM peut \u00eatre utilis\u00e9e dans les cas suivants :</p> <ul> <li>Faire varier la vitesse d'un moteur \u00e0 courant continu.</li> <li>Faire varier la luminosit\u00e9 d'une led.</li> </ul>"},{"location":"arduino/04-Fonctions_Arduino/#22-utiliser-le-pwm-avec-arduino","title":"2.2 Utiliser le PWM avec Arduino","text":"<p>En environnement Arduino, le PWM s'utilise avec la fonction <code>analogWrite()</code>, nous donnons ci-dessous sa structure :</p> <p></p> <p>Le choix du rapport cyclique avec la fonction <code>analogWrite()</code> se fait sur 8 bits soit une valeur comprise entre 0 -&gt; 0% et 255 -&gt; 100%</p> <p>Le PWM ne s'utilise pas avec n'importe quelle pin ! Il faut que la pin soit num\u00e9rique et que ce soit une pin PWM, nous donnons le num\u00e9ro des pins utilisables avec les cartes Arduino UNO et MEGA ainsi que la fr\u00e9quence dans le tableau suivant :</p> Carte Pins PWM Fr\u00e9quence du PWM UNO 3,5,6,9,10,11 490Hz et 980Hz sur pins 3 et 11 MEGA 2 \u00e0 13, 44 \u00e0 46 490Hz et 980Hz sur pins 3 et 11 <p>Note</p> <p>Les pins num\u00e9riques utilisables en PWM sont not\u00e9es avec un ~ sur les cartes Arduino.</p> <p>Nous donnons ci-dessous un code exemple de l'utilisation de cette fonction :</p> <pre><code>const int PinPWM=3; //D\u00e9claration d'une constante de type int et de nom \"PinPWM\", contenant 3 la pin num\u00e9rique \u00e0 utiliser pour le pwm\nvoid setup() //Initialisation\n{\npinMode(PinPWM,OUTPUT);//Mise en sortie de la pin num\u00e9rique 3 pour utiliser le pwm\n}\nvoid loop() //Programme principal\n{\nanalogWrite(PinPWM,127); //Cr\u00e9ation d'un signal PWM sur la pin num\u00e9rique 3 avec un rapport cyclique de 50%\n}\n</code></pre>"},{"location":"arduino/04-Fonctions_Arduino/#le-port-serie","title":"Le port s\u00e9rie","text":"<p>Le port s\u00e9rie Serial ou encore UART est un protocole de communication filaire, o\u00f9 les donn\u00e9es \u00e0 transmettre sont envoy\u00e9es par paquets de 8 bits. Le port s\u00e9rie est un des moyens qu'a une carte Arduino pour communiquer avec des \u00e9l\u00e9ments externes comme une autre carte ou un ordinateur.</p>"},{"location":"arduino/04-Fonctions_Arduino/#1-fonctionnement-de-luart","title":"1. Fonctionnement de l'UART","text":"<p>L'UART (Universal Asynchronous Receiver Transmitter) est un des p\u00e9riph\u00e9riques du micro-contr\u00f4leur qui vient g\u00e9rer la liaison s\u00e9rie, ce protocole de communication n\u00e9cessite 3 fils. La figure ci-dessous montre le c\u00e2blage n\u00e9cessaire pour une transmission s\u00e9rie par l'UART entre 2 cartes Arduino UNO.</p> <p></p> <p>Les donn\u00e9es transitent par la liaison s\u00e9rie sous forme de paquets de 8bits plus 1 bit de start et 1 bit de stop, nous donnons ci-dessous une trame, exemple d'\u00e9mission par l'UART :</p> <p></p> <p>D\u00e9crivons les \u00e9tapes de cet envoi qui d\u00e9bute \u00e0 gauche du graphe et se termine \u00e0 droite :</p> <ol> <li> <p>La liaison est au repos au niveau \"1\" \u00e0 5V dans un \u00e9tat que l'on apelle \"Idle\" en Anglais.</p> </li> <li> <p>La liaison d\u00e9tecte le d\u00e9but d'\u00e9mission par le passage de l'\u00e9tat Idle \u00e0 \"0\" =&gt; C'est le bit de start.</p> </li> <li> <p>Les 8 bits du message sont envoy\u00e9s en commen\u00e7ant par le bit de poids faible le LSB (Least Significant Bit) et se termine par le bit de poids fort le MSB (Most Significant Bit). Si le message que l'on souhaite envoyer est cod\u00e9 sur plus de 8 bits il sera d\u00e9coup\u00e9 en paquet de 8 obligatoirement.</p> </li> <li> <p>La liaison termine son \u00e9mission par un bit de stop \u00e0 \"1\" avant de retourner \u00e0 l'\u00e9tat Idle.</p> </li> </ol>"},{"location":"arduino/04-Fonctions_Arduino/#2-parametrer-luart-avec-serialbegin","title":"2. Param\u00e9trer l'UART avec <code>Serial.begin()</code>","text":"<p>La fr\u00e9quence d'\u00e9mission soit le nombre de Bauds (bits par seconde) est d\u00e9finie avec la fonction Arduino <code>Serial.begin()</code>, notons que cette dur\u00e9e ne varie pas dans la suite du code une fois qu'on en a fait le param\u00e9trage dans le <code>void setup()</code>. Nous donnons ci-dessous la structure de cette fonction :</p> <p></p> <p>Warning</p> <p>Le protocole de transmission s\u00e9rie \u00e9tant asynchrone l'horloge qui permet de synchroniser les signaux entre l'\u00e9metteur et le r\u00e9cepteur n'est pas transmise. Il faut donc que la fr\u00e9quence d'\u00e9mission soit la m\u00eame sur l'\u00e9metteur et sur le r\u00e9cepteur.</p> <p>Nous donnons ci-dessous un code exemple Arduino pour le param\u00e9trage d'une liaison s\u00e9rie \u00e0 9600 Bauds :</p> <pre><code>void setup()//Initialisations\n{\nSerial.begin(9600);//Initialisation du port s\u00e9rie avec une fr\u00e9quence d'\u00e9mission de 9600 Bauds\n}\n</code></pre>"},{"location":"arduino/04-Fonctions_Arduino/#3-ecrire-sur-le-port-serie-avec-serialprint-et-serialprintln","title":"3. Ecrire sur le port s\u00e9rie avec <code>Serial.print()</code> et <code>Serial.println()</code>","text":"<p>Deux fonctions permettent d'\u00e9crire simplement des messages sur le port s\u00e9rie d'une carte Arduino :</p> <ul> <li><code>Serial.print()</code> : Permet d'\u00e9crire de multiples choses sur le serial sans se soucier si le contenu de notre message est d'une taille sup\u00e9rieure \u00e0 8 bits. La fonction fait elle m\u00eame le partage en paquets de 8 bits. Nous donnons ci-dessous la structure de cette fonction :</li> </ul> <p></p> <ul> <li><code>Serial.println()</code> : Fait la m\u00eame chose que la fonction pr\u00e9c\u00e9dente mais provoque un renvoi \u00e0 la ligne en fin d'\u00e9mission. Nous donnons ci-dessous la structure de cette fonction :</li> </ul> <p></p> <p>Nous donnons ci-dessous un code exemple complet comprenant l'initialisation du serial et l'utilisation des deux fonctions pr\u00e9c\u00e9dentes :</p> <pre><code>int Tutu=2345; //D\u00e9claration d'un entier initialis\u00e9 \u00e0 2345\nfloat Tomaas=3.14;//D\u00e9claration d'un flottant initialis\u00e9 \u00e0 3.14\nvoid setup()//Initialisations\n{\nSerial.begin(9600);//Initialisation du port s\u00e9rie avec une fr\u00e9quence d'\u00e9mission de 9600 Bauds\n}\nvoid loop()//Programme principal\n{\nSerial.print(\"Ma variable Tutu contient : \");//Ecriture d'une chaine de caract\u00e8res sur le serial\nSerial.println(Tutu);//Ecriture du contenu de Tutu et retour \u00e0 la ligne\nSerial.print(\"Ma variable Tomaas contient : \");//Ecriture d'une chaine de caract\u00e8res sur le serial\nSerial.println(Tomaas);//Ecriture du contenu de Tomaas et retour \u00e0 la ligne\n}\n</code></pre> <p>Une fonction sur l'Arduino IDE appel\u00e9e Moniteur s\u00e9rie permet d'afficher ce que notre carte Arduino \u00e9crit sur le serial gr\u00e2ce \u00e0 la liaison usb. (Les pins Rx et Tx du port s\u00e9rie sont retransmises sur le port USB). Observons ce que notre code produit sur le moniteur s\u00e9rie :</p> <p></p> <p>Le code pr\u00e9c\u00e9dent affiche de mani\u00e8re infinie (Nous rappelons que le <code>void loop()</code> est \u00e9quivalent \u00e0 un <code>while(1)</code>) la premi\u00e8re cha\u00eene de caract\u00e8re, le contenu de la variable Tutu, retourne \u00e0 la ligne puis affiche la seconde cha\u00eene de caract\u00e8res et affiche la variable Tomaas pour \u00e0 nouveau retourner \u00e0 la ligne et recommencer...</p>"},{"location":"arduino/04-Fonctions_Arduino/#autres-fonctions-utiles","title":"Autres fonctions utiles","text":"<p>Cette partie r\u00e9pertorie toutes les autres fonctions que vous pourriez \u00eatre amen\u00e9 \u00e0 utiliser dans vos codes Arduino.</p>"},{"location":"arduino/04-Fonctions_Arduino/#1-faire-une-pause-delay","title":"1. Faire une pause <code>delay()</code>","text":"<p>La fonction delay permet de mettre en pause l'ex\u00e9cution du programme durant le temps donn\u00e9 en milli-secondes. Nous donnons ci-dessous la structure de ce programme :</p> <p></p> <p>Nous donnons ci-dessous un code exemple de l'utilisation de cette fonction :</p> <pre><code>void loop (void)\n{\n//Bloc d'instructions\ndelay(5000);//Pause de 5 secondes\n//Bloc d'instructions  \n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/","title":"Utilisation des modules Grove de Seeed Studio","text":"<p>Les modules Grove de Seeed Studio permettant de prototyper rapidement une solution, seront utilis\u00e9s lors des activit\u00e9s sin.</p>"},{"location":"arduino/05-Modules_Grove/#1-introduction","title":"1. Introduction","text":"<p>Seeed Studio est une entreprise Chinoise bas\u00e9e \u00e0 Shenzhen qui commercialise des produits \u00e9lectroniques pour les Makers. Grove est un syst\u00e8me de modules se branchant sur une carte m\u00e8re appel\u00e9e Grove shield :</p> <ul> <li>Pour Arduino UNO : Grove Base Shield</li> <li>Pour Arduino Mega : Grove Mega Shield</li> </ul> <p>Beaucoup de documentation est disponible sur le Wiki de Seeed Studio allez y jeter un coup d'oeil !</p>"},{"location":"arduino/05-Modules_Grove/#2-comment-connecter-un-module-au-shield-grove","title":"2. Comment connecter un module au shield Grove ?","text":"<p>Ci-dessous le shield Grove Mega qui s'enfiche par dessus une carte Arduino Mega:</p> <p></p> <p>Ce shield dispose de 4 familles de connecteurs :</p> <ul> <li> <p>Les connecteurs sur pins num\u00e9riques commen\u00e7ant par un D qui re\u00e7oivent des modules num\u00e9riques comme le module LED, le bouton poussoir (Button), le capteur d'inclinaison (Tilt Switch) et le bargraphe (LED Bar)</p> </li> <li> <p>Les connecteurs sur pins analogiques commen\u00e7ant pas un A qui re\u00e7oivent des modules analogiques comme le module potentiom\u00e8tre (Rotary Sensor), le capteur de luminosit\u00e9 (Light Sensor) et le capteur de temp\u00e9rature (Temperature Sensor).</p> </li> <li> <p>Les connecteurs i2C IIC sur la carte, au nombre de 3 (tous les m\u00eames, sp\u00e9cificit\u00e9 du bus) permettant de connecter par la liaison s\u00e9rie i2C des composants fonctionnant sur ce bus comme l'\u00e9cran LCD (LCD RGB Backlight)</p> </li> <li> <p>Les connecteurs UART, au nombre de 4 un pour chaque Serial disponible sur l'Arduino MEGA, permettent de connecter des modules utilisant ce type de liaison.</p> </li> </ul> <p>La connexion des modules Grove sur le shield se fait gr\u00e2ce \u00e0 des cordons de 4 fils :</p> <ul> <li>Un fil noir pour la masse not\u00e9 G ou GND sur les modules</li> <li>Un fil rouge pour l'alimentation not\u00e9 Vcc ou V sur les modules</li> <li>Un fil blanc pour un des deux signaux bien souvent ce fil n'est pas utilis\u00e9 et est not\u00e9 NC (Non Connect\u00e9)</li> <li>Un fil jaune pour un des deux signaux not\u00e9 SIG, c'est ce fil qui est utilis\u00e9 principalement pour connecter le module \u00e0 la pin d\u00e9sir\u00e9e.</li> </ul> <p></p> <p>Sur ce sch\u00e9ma nous avons connect\u00e9 le module Light Sensor \u00e0 la pin analogique A0.</p>"},{"location":"arduino/05-Modules_Grove/#3-les-actionneurs","title":"3. Les actionneurs","text":"<p>Les modules actionneurs re\u00e7oivent de l'\u00e9nergie \u00e9lectrique venant de l'Arduino et la transforme, par exemple le module LED re\u00e7oit de l'\u00e9nergie \u00e9lectrique et la transforme en \u00e9nergie lumineuse.</p>"},{"location":"arduino/05-Modules_Grove/#31-le-module-led","title":"3.1 Le module LED","text":"<p>Nous donnons ci-dessous un exemple d'utilisation du module LED, ce code fait clignoter la LED du module Grove LED toutes les secondes qui est connect\u00e9 sur la pin num\u00e9rique 2 :</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin o\u00f9 la led est reli\u00e9e\nvoid setup() //Initialisations\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2\n}\nvoid loop() //Programme principal\n{\ndigitalWrite(led,HIGH); //Mise \u00e0 1 de la pin num\u00e9rique 2 d\u00e9sign\u00e9e par la constante led\ndelay(1000); //Pause de 1s\ndigitalWrite(led,LOW); //Mise \u00e0 0 de la pin num\u00e9rique 2 d\u00e9sign\u00e9e par la constante led\ndelay(1000); //Pause de 1s\n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/#4-les-capteurs","title":"4. Les capteurs","text":"<p>Les modules capteurs \u00e9mettent un signal \u00e9lectrique (une tension) image de la donn\u00e9e physique (temp\u00e9rature, luminosit\u00e9 ...) qu'ils mesurent.</p>"},{"location":"arduino/05-Modules_Grove/#41-le-module-bouton-poussoir-button","title":"4.1 Le module bouton poussoir : Button","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Button, le comportement est le suivant : L'appui sur le bouton poussoir reli\u00e9 sur la pin num\u00e9rique 3, provoque l'allumage de la led reli\u00e9e sur la pin num\u00e9rique 2. Le rel\u00e2chement provoque son extinction.</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin o\u00f9 la led est reli\u00e9e\nconst int bp=3; //D\u00e9claration d'une constante de type int et de nom \"bp\", contenant 3 la pin o\u00f9 le bouton poussoir est reli\u00e9\nboolean etat=false; //D\u00e9claration d'une variable \"etat\" de type bool\u00e9en initialis\u00e9e \u00e0 false (soit niveau logique 0)\nvoid setup() //Initialisation\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\npinMode(bp,INPUT); //Mise en entr\u00e9e de la pin num\u00e9rique 3 pour le bouton poussoir\n}\nvoid loop() //Programme principal\n{\netat=digitalRead(bp); //Lecture de la valeur de la pin 3 : bouton appuy\u00e9 -&gt; etat=1   bouton relach\u00e9 -&gt; etat=0\ndigitalWrite(led,etat); //La led s'allume ou s'\u00e9teint suivant la valeur de \"etat\"\n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/#42-le-module-capteur-dinclinaison-tilt-switch","title":"4.2 Le module capteur d'inclinaison : Tilt Switch","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Tilt Switch, le comportement est le suivant : L'inclinaison du capteur reli\u00e9 sur la pin num\u00e9rique 3, provoque l'allumage de la led reli\u00e9e sur la pin num\u00e9rique 2. Le fait de mettre le capteur \u00e0 l'horizontale provoque son extinction.</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin o\u00f9 la led est reli\u00e9e\nconst int tilt=3; //D\u00e9claration d'une constante de type int et de nom \"bp\", contenant 3 la pin o\u00f9 le bouton poussoir est reli\u00e9\nboolean etat=false; //D\u00e9claration d'une variable \"etat\" de type bool\u00e9en initialis\u00e9e \u00e0 false (soit niveau logique 0)\nvoid setup() //Initialisation\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\npinMode(tilt,INPUT); //Mise en entr\u00e9e de la pin num\u00e9rique 3 pour le tilt switch\n}\nvoid loop() //Programme principal\n{\netat=digitalRead(tilt); //Lecture de la valeur de la pin 3 : tilt inclin\u00e9 -&gt; etat=1   tilt horizontal -&gt; etat=0\ndigitalWrite(led,etat); //La led s'allume ou s'\u00e9teint suivant la valeur de \"etat\"\n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/#43-le-module-potentiometre-rotary-sensor","title":"4.3 Le module potentiom\u00e8tre : Rotary Sensor","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Rotary Sensor, le comportement est le suivant : Le module potentiom\u00e8tre est reli\u00e9 \u00e0 la pin analogique 0, le fait de faire tourner celui-ci fait varier la tension \\(V_{a0}\\) entre 0 et 5V sur cette pin. Nous utilisons le CAN pour lire cette tension et la transformer en une information num\u00e9rique N comprise entre 0 et 1023 (sur 10 bits), nous \"re-bornons\" cette information \u00e0 l'aide de la fonction Arduino <code>map()</code> entre 0 et 255 (sur 8 bits) et l'utilisons avec le PWM sur la pin num\u00e9rique 2 pour faire varier la luminosit\u00e9 du module led.</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin num\u00e9rique o\u00f9 la led est reli\u00e9e\nconst int rotary_sensor=0; //D\u00e9claration d'une constante de type int et de nom \"rotary_sensor\", contenant 0 la pin analogique o\u00f9 le potentiom\u00e8tre est reli\u00e9\nint N=0; //D\u00e9claration d'une variable enti\u00e8re appel\u00e9e N est initialis\u00e9e \u00e0 0 pour stocker la sortie du CAN\nvoid setup() //Initialisation\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\n}\nvoid loop() //Programme principal\n{\nN=analogRead(rotary_sensor); //Conversion Analogique -&gt; Num\u00e9rique de la tension Va0 -&gt; N\nN=map(N,0,1023,0,255); //Rebornage de 0&lt;N&lt;1023 en 0&lt;N&lt;255\nanalogWrite(led,N); //La luminosit\u00e9 de la led varie en fonction de N et donc de Va0\n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/#44-le-module-ldr-light-sensor","title":"4.4 Le module LDR : Light Sensor","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Light Sensor, le comportement est le suivant : Le module LDR est reli\u00e9 \u00e0 la pin analogique 0, le fait de faire varier la luminosit\u00e9 (cacher ou d\u00e9voiler le capteur) fait varier la tension \\(V_{a0}\\) entre 0 et 5V sur cette pin. Nous utilisons le CAN pour lire cette tension et la transformer en une information num\u00e9rique N comprise entre 0 et 1023 (sur 10 bits), nous \"re-bornons\" cette information \u00e0 l'aide de la fonction Arduino <code>map()</code> entre 0 et 255 (sur 8 bits) et l'utilisons avec le PWM sur la pin num\u00e9rique 2 pour faire varier la luminosit\u00e9 du module led. Cette fois-ci une forte luminosit\u00e9 entra\u00eenera une extinction de la led et une faible luminosit\u00e9 un \u00e9clairement maximal.</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin num\u00e9rique o\u00f9 la led est reli\u00e9e\nconst int light_sensor=0; //D\u00e9claration d'une constante de type int et de nom \"light_sensor\", contenant 0 la pin analogique o\u00f9 la LDR est reli\u00e9e\nint N=0; //D\u00e9claration d'une variable enti\u00e8re appel\u00e9e N est initialis\u00e9e \u00e0 0 pour stocker la sortie du CAN\nvoid setup() //Initialisation\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\n}\nvoid loop() //Programme principal\n{\nN=analogRead(light_sensor); //Conversion Analogique -&gt; Num\u00e9rique de la tension Va0 -&gt; N\nN=map(N,0,1023,255,0); //Rebornage de 0&lt;N&lt;1023 en 0&lt;N&lt;255 avec inversion pour 0 -&gt;255 pour 1023-&gt;0\nanalogWrite(led,N); //La luminosit\u00e9 de la led varie en fonction de N et donc de Va0\n}\n</code></pre> <p>Info</p> <p>Il est possible que la tension de la LDR m\u00eame avec une forte luminosit\u00e9 ne fasse pas monter la valeur N \u00e0 1023, il s'agit donc de regarder la valeur max r\u00e9elle de N (\u00e0 l'aide du Serial par exemple) pour ajuster le rebornage dans <code>map()</code>.</p>"},{"location":"arduino/05-Modules_Grove/#45-le-module-temperature-temperature-sensor","title":"4.5 Le module temp\u00e9rature : Temperature Sensor","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Temperature Sensor, le comportement est le suivant : Le module temp\u00e9rature est reli\u00e9 \u00e0 la pin analogique 0, le fait de faire monter la temp\u00e9rature au dessus de 30\u00b0C allume le module led reli\u00e9 sur la pin num\u00e9rique 2. Faire descendre la temp\u00e9rature en dessous provoque l'extinction de la led.</p> <pre><code>#include &lt;math.h&gt; //Ajout de la biblioth\u00e8que C/C++ math.h pour utiliser la fonction logarithme d\u00e9cimal : log()\n//Constantes prises sur la documentation du Wiki de Seeed Studio\nconst int B=4275; //B valeur de la LDR en Ohms\nconst int R0 = 100000; //R0 = 100k\nconst int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin num\u00e9rique o\u00f9 la led est reli\u00e9e\nconst int temperature_sensor=0; //D\u00e9claration d'une constante de type int et de nom \"temperature_sensor\", contenant 0 la pin analogique o\u00f9 le capteur de temp\u00e9rature est reli\u00e9\nint N=0; //D\u00e9claration d'une variable enti\u00e8re appel\u00e9e N est initialis\u00e9e \u00e0 0 pour stocker la sortie du CAN\nfloat R=0; //D\u00e9claration d'une variable flottante appel\u00e9e R est initialis\u00e9e \u00e0 0 pour calculer la temp\u00e9rature\nfloat temperature=0; //D\u00e9claration d'une variable flottante appel\u00e9e R est initialis\u00e9e \u00e0 0 pour stocker la valeur de la temp\u00e9rature\nvoid setup() //Initialisation\n{\npinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\n}\nvoid loop() //Programme principal\n{\nN=analogRead(temperature_sensor); //Conversion Analogique -&gt; Num\u00e9rique de la tension Va0 -&gt; N\n//Calcul de la temperature suivant la doc du Wiki de Seeed Studio\nR=1023.0/((float)N)-1.0;\nR=100000.0*R;\ntemperature=1.0/(log(R/100000.0)/B+1/298.15)-273.15; //calcul de la temperature suivant la doc\nif(temperature&gt;30)\n{\ndigitalWrite(led,HIGH); //Allumage de la led si temperature &gt; 30\n}\nelse\n{\ndigitalWrite(led,LOW); //Extinction de la led si temperature &lt; 30\n}\n}\n</code></pre> <p>Note</p> <p>La biblioth\u00e8que math.h est d\u00e9j\u00e0 pr\u00e9-ajout\u00e9e dans l'IDE Arduino inutile de chercher o\u00f9 la t\u00e9l\u00e9charger.</p>"},{"location":"arduino/05-Modules_Grove/#5-lafficheur-lcd","title":"5. L'afficheur LCD","text":"<p>Ce module est un \u00e9cran LCD noir et blanc de 2 lignes et 16 colonnes, un r\u00e9tro-\u00e9clairage fonctionnant \u00e0 l'aide de leds RGB est disponible.</p> <p>Info</p> <p>Ce module fonctionne gr\u00e2ce \u00e0 la liaison i2C, il est donc n\u00e9cessaire de choisir un connecteur i2C sur le shield Grove.</p>"},{"location":"arduino/05-Modules_Grove/#51-la-bibliotheque-rgb_lcdh","title":"5.1 La biblioth\u00e8que <code>rgb_lcd.h</code>","text":"<p>L'ajout d'une biblioth\u00e8que \u00e0 l'IDE Arduino est n\u00e9cessaire \u00e0 l'utilisation du module LCD RGB Backlight, celle-ci est disponible sur le Github de Seeed Studio : lien</p> <p></p> <p>Ensuite, ajoutez le fichier .zip \u00e0 l'IDE Arduino :</p> <p></p> <p>Il suffit d'inclure \u00e0 pr\u00e9sent la biblioth\u00e8que au d\u00e9but du code Arduino de cette mani\u00e8re :</p> <pre><code>#include &lt;Wire.h&gt; //Ajout de la biblioth\u00e8que i2c pour utiliser le lcd\n#include \"rgb_lcd.h\" //Ajout de la biblioth\u00e8que du lcd\n</code></pre> <p>Info</p> <p>Ne pas oublier d'ajouter \u00e9galement la biblioth\u00e8que <code>Wire.h</code> pour utiliser la liaison i2C.</p>"},{"location":"arduino/05-Modules_Grove/#52-initialisation-du-lcd-avec-lcdbegin","title":"5.2 Initialisation du lcd avec <code>lcd.begin()</code>","text":"<p>Nous donnons ci-dessous un code exemple de l'initialisation de l'\u00e9cran Grove RGB LCD :</p> <p><pre><code>rgb_lcd lcd; //Constructeur rgb_lcd pour l'objet lcd\nvoid setup() //Initialisations\n{\nlcd.begin(16, 2); //Initialisation du lcd de 16 colonnes et 2 lignes\n}\n</code></pre> {% include note.html content=\" Le langage C++ est un langage orient\u00e9 objet, un principe de programmation complexe que nous n'allons pas aborder ici. Le constructeur est en quelque sorte la mani\u00e8re de d\u00e9clarer un objet, dans notre cas nous d\u00e9clarons un objet <code>lcd</code> de type <code>rgb_lcd</code>.\"%}</p>"},{"location":"arduino/05-Modules_Grove/#ecrire-ou-lon-veut-avec-lcdsetcursor","title":"\u00c9crire o\u00f9 l'on veut avec <code>lcd.setCursor()</code>","text":"<p>L'\u00e9cran lcd du module Grove RGB LCD dispose de 16 colonnes et 2 lignes, si on ne pr\u00e9cise rien quand on code l'instruction permettant d'\u00e9crire des choses dessus, la colonne 0 et la ligne 0 sont prisent en d\u00e9faut ce qui a pour cons\u00e9quence d'\u00e9crire en haut \u00e0 gauche :</p> <p></p> <p>Mais comment fait-on si on souhaite commencer \u00e0 \u00e9crire au milieu ? Il suffit d'utiliser la fonction <code>lcd.setCursor()</code>, dont nous expliquons le fonctionnement ci-dessous :</p> <p></p>"},{"location":"arduino/05-Modules_Grove/#53-tout-effacer-avec-lcdclear","title":"5.3 Tout effacer avec <code>lcd.clear()</code>","text":"<p>La fonction <code>lcd.clear()</code> permet d'effacer enti\u00e8rement l'\u00e9cran lcd, nous donnons la structure de cette fonction ci-dessous :</p> <p></p>"},{"location":"arduino/05-Modules_Grove/#54-ecrire-avec-lcdprint","title":"5.4 \u00c9crire avec <code>lcd.print()</code>","text":"<p>La fonction <code>lcd.print()</code> permet d'\u00e9crire ce que l'on veut sur le lcd mais ne g\u00e8re pas le d\u00e9passement (\u00e9crire au del\u00e0 des 16 colonnes et 2 lignes), c'est au d\u00e9veloppeur de v\u00e9rifier deux fois que ce qu'il souhaite \u00e9crire tienne bien dans la place impartie. Nous donnons la structure de cette fonction ci-dessous :</p> <ul> <li>Pour \u00e9crire une cha\u00eene de caract\u00e8res :</li> </ul> <p></p> <ul> <li>Pour \u00e9crire le contenu d'une variable :</li> </ul> <p></p> <p>Nous donnons ci-dessous un code exemple complet de l'utilisation de <code>lcd.print()</code> et montrons le r\u00e9sultat sur l'\u00e9cran lcd :</p> <p><pre><code>#include &lt;Wire.h&gt; //Ajout de la biblioth\u00e8que i2c pour utiliser le lcd\n#include \"rgb_lcd.h\" //Ajout de la biblioth\u00e8que du lcd\nrgb_lcd lcd;  //Constructeur rgb_lcd pour l'objet lcd\nint cpt=0; //D\u00e9claration d'un entier \"cpt\" initialis\u00e9 \u00e0 0 pour compter le nombre de cycles d'affichages\nvoid setup() //Initialisations\n{\nlcd.begin(16, 2); //Initialisation du lcd de 16 colonnes et 2 lignes    \n}\nvoid loop() //Programme principal\n{\nlcd.setCursor(0,0); //On commence \u00e0 \u00e9crire en haut \u00e0 gauche\nlcd.print(\"hello, world!\"); //On \u00e9crit \"hello, world!\"\nlcd.setCursor(0,1); //On se met sur la ligne du bas \u00e0 gauche\nlcd.print(\"STI2D SIN\"); //On \u00e9crit \"STI2D SIN\"\ndelay(3000); //On attend 3s\nlcd.clear(); //On efface le lcd\nlcd.setCursor(0,0); //On commence \u00e0 \u00e9crire en haut \u00e0 gauche\nlcd.print(\"Lycee GT\"); //On \u00e9crit \"Lycee LGT\"\nlcd.setCursor(0,1); //On se met sur la ligne du bas \u00e0 gauche\nlcd.print(\"L.Rascol Albi\"); //On \u00e9crit \"L.Rascol Albi\"\ndelay(3000); //On attend 3s\nlcd.clear(); //On efface le lcd\nlcd.setCursor(0,0); //On commence \u00e0 \u00e9crire en haut \u00e0 gauche\nlcd.print(\"Affichage : \"); //On \u00e9crit \"Affichage : \"\nlcd.setCursor(13,0); //On se met sur la 13 \u00e8me colonne de la premi\u00e8re ligne\nlcd.print(cpt); //On \u00e9crit le contenu de la variable cpt\ndelay(3000); //On attend 3s\nlcd.clear(); //On efface le lcd\ncpt++ //On incr\u00e9mente de 1 la variable cpt\n}\n</code></pre> </p>"},{"location":"arduino/05-Modules_Grove/#55-changer-la-couleur-du-retro-eclairage-avec-lcdsetrgb","title":"5.5 Changer la couleur du r\u00e9tro-\u00e9clairage avec <code>lcd.setRGB()</code>","text":"<p>Le module LCD RGB Backlight comme son nom l'indique contient des leds RGB pour Red Green Blue. En faisant varier l'intensit\u00e9 de chaque composante nous pouvons choisir la couleur du r\u00e9tro-\u00e9clairage parmi une infinit\u00e9. Nous donnons ci-dessous la structure de la fonction <code>lcd.setRGB()</code> \u00e0 param\u00e9trer dans le <code>void setup()</code>.</p> <p></p> <p>L'intensit\u00e9 de chaque couleur se code sur 8 bits, soit une valeur entre 0 et 255. Nous donnons ci-dessous un code exemple pour un \u00e9clairage en rouge et montrons le r\u00e9sultat sur l'\u00e9cran lcd :</p> <p><pre><code>#include &lt;Wire.h&gt; //Ajout de la biblioth\u00e8que i2c pour utiliser le lcd\n#include \"rgb_lcd.h\" //Ajout de la biblioth\u00e8que du lcd\nrgb_lcd lcd;  //Constructeur rgb_lcd pour l'objet lcd\nvoid setup() //Initialisations\n{\nlcd.begin(16, 2); //Initialisation du lcd de 16 colonnes et 2 lignes\nlcd.setRGB(255,0,0); //Configuration de l'\u00e9clairage en rouge\n}\nvoid loop() //Programme principal\n{\nlcd.setCursor(0,0); //On commence \u00e0 \u00e9crire en haut \u00e0 gauche\nlcd.print(\"hello, world!\"); //On \u00e9crit \"hello, world!\"\nlcd.setCursor(0,1); //On se met sur la ligne du bas \u00e0 gauche\nlcd.print(\"STI2D SIN\"); //On \u00e9crit \"STI2D SIN\"           \n}\n</code></pre> </p>"},{"location":"arduino/06-Creer_une_macro/","title":"Cr\u00e9ation d'une macro ou sous-programme en environnement C/C++","text":"<p>Une macro aussi appel\u00e9e sous-programme ou fonction est une suite d'instructions d\u00e9finies \u00e0 l'avance, pouvant \u00eatre ex\u00e9cut\u00e9es \u00e0 l'infini. Une macro est utilis\u00e9e pour, par exemple simplifier le code en limitant les r\u00e9p\u00e9titions.</p>"},{"location":"arduino/06-Creer_une_macro/#1-ou-declarer-sa-macro","title":"1. O\u00f9 d\u00e9clarer sa macro ?","text":"<p>Les d\u00e9clarations de macros doivent \u00eatre faites juste apr\u00e8s les d\u00e9clarations de variables globales, dans un code Arduino, comme le montre l'exemple ci-dessous.</p> <pre><code>/**************************************************************************************************\nNom ......... : Projet_Alarme_Emission_433.ino\nRole ........ : Transmet en 433MHz gr\u00e2ce \u00e0 la biblioth\u00e8que VirtualWire une cha\u00eene de\n                caract\u00e8re sur la pin 12 de l'Arduino Mega 2560\n                * Dans le cas normal envoi :\"Repos_capteur_ILS\"\n                * Dans le cas d'un front montant sur CapteurPin envoi : \"Alerte_capteur_ILS\"\nAuteur ...... : J.Serrand\nMail ........ : joris.serrand@rascol.net\nVersion ..... : V0.0 du 17/02/16\nLicence ..... : Copyright (C) 2016  Joris SERRAND\n                This program is free software: you can redistribute it and/or modify\n                it under the terms of the GNU General Public License as published by\n                the Free Software Foundation, either version 3 of the License, or\n                (at your option) any later version.\n                This program is distributed in the hope that it will be useful,\n                but WITHOUT ANY WARRANTY; without even the implied warranty of\n                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                GNU General Public License for more details.\n                You should have received a copy of the GNU General Public License\n                along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\nCompilation . : Avec l'IDE Arduino\n****************************************************************************************************/\n//Ajout de biblioth\u00e8ques\n#include &lt;Wire.h&gt; //Insertion de la biblioth\u00e8que pour les fonctions I2C\n//D\u00e9clarations de constantes\n#define bp 10 //D\u00e9claration d'une constante appel\u00e9e bp de valeur 10\nconst float pi=3.14; //D\u00e9claration d'une constante de type float et de nom \"pi\" initialis\u00e9e \u00e0 3.14\n//D\u00e9claration de variables\nint cpt = 0; //D\u00e9claration d'un entier de nom \"cpt\" initialis\u00e9 \u00e0 0\nfloat vitesse = 10.5; //D\u00e9claration d'un flottant de nom \"vitesse\" initialis\u00e9 \u00e0 10.5\n//D\u00e9claration de macros\nint ma_macro(float toto)\n{\n//Instructions\n}\nvoid setup()\n{\n//Initialisations\n}\nvoid loop()\n{\n//Programme principal\n}\n</code></pre>"},{"location":"arduino/06-Creer_une_macro/#2-comment-creer-une-macro","title":"2. Comment cr\u00e9er une macro ?","text":""},{"location":"arduino/06-Creer_une_macro/#21-creation-dune-macro-sans-parametres-dentree-ni-de-sortie","title":"2.1 Cr\u00e9ation d'une macro sans param\u00e8tres d'entr\u00e9e ni de sortie","text":"<p>La figure ci-dessous montre l'exemple de la d\u00e9claration d'une telle macro, de mani\u00e8re algorithmique, puis en langage C/C++ : </p> <p>Ci-dessous l'exemple des macros <code>allumer_led_13()</code> et <code>eteindre_led_13()</code>, qui respectivement allume et \u00e9teint la led 13 lorsque on les appelle dans le programme principal <code>loop</code> :</p> <pre><code>//D\u00e9claration de macros\nvoid allumer_led_13(void)//D\u00e9claration d'une macro sans param\u00e8tre d'entr\u00e9e ni de sortie\n{\ndigitalWrite(13,HIGH); //Allumage de la led 13\n}\nvoid eteindre_led_13(void)//D\u00e9claration d'une macro sans param\u00e8tre d'entr\u00e9e ni de sortie\n{\ndigitalWrite(13,LOW); //Extinction de la led 13\n}\n//Initialisations\nvoid setup()\n{\npinMode(13,OUTPUT); //Param\u00e9trage de la pin 13 en sortie\n}\n//Programme principal\nvoid loop()\n{\nallumer_led_13(); //Appel de la macro allumer_led_13()\ndelay(1000);\neteindre_led_13(); //Appel de la macro eteindre_led_13()\ndelay(1000);\n}\n</code></pre>"},{"location":"arduino/06-Creer_une_macro/#22-creation-dune-macro-avec-parametre-dentree","title":"2.2 Cr\u00e9ation d'une macro avec param\u00e8tre d'entr\u00e9e","text":"<p>La figure ci-dessous montre l'exemple de la d\u00e9claration d'une telle macro, de mani\u00e8re algorithmique, puis en langage C/C++ :</p> <p></p> <p>Ci dessous nous donnons un exemple d'utilisation d'une telle macro : <code>affichage_mess_serial(boolean presence)</code>, permet d'envoyer sur le serial le message : <code>\"Presence d eau\"</code> quand le param\u00e8tre d'entr\u00e9e <code>presence</code> vaut <code>1</code> et <code>\"Capteur hors d eau\"</code> quand le param\u00e8tre vaut <code>0</code>.</p> <pre><code>//D\u00e9claration de macros\nvoid affichage_mess_serial(boolean presence) //Prototype de la macro\n{\nif(presence)\nSerial.println(\"Presence d eau\"); //Si le param\u00e8tre d\u2019entr\u00e9e \"presence\" vaut 1 affichage de \"Presence d eau\"\nelse\nSerial.println(\"Capteur hors d eau\"); //Si le param\u00e8tre d\u2019entr\u00e9e \"presence\" vaut 0 affichage de \"Capteur hors d eau\"\n}\n//Initialisations\nvoid setup()\n{\nSerial.begin(9600); //Initialisation du port s\u00e9rie \u00e0 9600 bauds\n}\n//Programme principal\nvoid loop()\n{\naffichage_mess_serial(0); //Appel de la macro avec le param\u00e8tre d'entr\u00e9e \u00e0 0, aura pour effet d'envoyer sur le serial le message : \"Capteur hors d eau\"\n}\n</code></pre>"},{"location":"arduino/06-Creer_une_macro/#23-creation-dune-macro-avec-parametres-dentree-et-de-sortie","title":"2.3 Cr\u00e9ation d'une macro avec param\u00e8tres d'entr\u00e9e et de sortie","text":"<p>La figure ci-dessous montre l'exemple de la d\u00e9claration d'une telle macro, de mani\u00e8re algorithmique, puis en langage C/C++ :</p> <p> </p> <p>Ci-dessous la macro <code>float hypotenuse(float a, float b)</code> renvoi un flottant qui correspond \u00e0 l\u2019hypot\u00e9nuse calcul\u00e9e suivant les deux param\u00e8tres donn\u00e9s en entr\u00e9e, soit les longueurs des deux c\u00f4t\u00e9s a et b.</p> <pre><code>//D\u00e9claration de macros\nfloat hypotenuse(float a,float b)\n{\nfloat c=0; //D\u00e9claration de la variable c initialis\u00e9e \u00e0 0, qui contiendra le r\u00e9sultat\nc=(pow(a,2)+pow(b,2)); //Calcul de la somme des deux c\u00f4t\u00e9s au carr\u00e9\nc=sqrt(c); //Calcul de la racine carr\u00e9 du r\u00e9sultat pr\u00e9c\u00e9dent\nreturn c; //Renvoi le contenu de la variable c en param\u00e8tre de sortie de la macro  \n}\n//Initialisations\nvoid setup()\n{\n}\n//Programme principal\nvoid loop()\n{\nfloat hyp=0;\nhyp=hypotenuse(6,8); //Appel de la macro\n}\n</code></pre>"},{"location":"arduino/07-interruptions/","title":"Les interruptions en environnement Arduino","text":"<p>L'interruption, ou comment mettre en pause le programme principal pour pouvoir faire ex\u00e9cuter autre chose au microcontr\u00f4leur.</p>"},{"location":"arduino/07-interruptions/#1-ca-sert-a-quoi-une-interruption","title":"1. \u00c7a sert \u00e0 quoi une interruption ?","text":"<p>Une interruption peut se d\u00e9clencher de plusieurs mani\u00e8res :</p> <ul> <li>Sur un \u00e9v\u00e9nement interne : Fin  de comptage d'un timer, fin de d\u00e9codage d'un CAN ...</li> <li>Sur un \u00e9v\u00e9nement externe : Changement d'\u00e9tat d'une pin num\u00e9rique.</li> </ul> <p>Nous nous concentrerons dans cette partie aux interruptions d\u00e9clench\u00e9es par un \u00e9v\u00e9nement externe. Le comportement du microcontr\u00f4leur r\u00e9agissant \u00e0 un tel type d'interruption est le suivant.</p> <ol> <li>Une pin num\u00e9rique param\u00e9tr\u00e9e en entr\u00e9e sur laquelle a \u00e9t\u00e9 programm\u00e9e une interruption, change d'\u00e9tat (passage de 0 \u00e0 1 par exemple).</li> <li>Le programme principal (<code>void loop()</code>) est imm\u00e9diatement arr\u00eat\u00e9, sa position est m\u00e9moris\u00e9e</li> <li>Le microcontr\u00f4leur ex\u00e9cute la macro d'interruption d\u00e9finie au pr\u00e9alable.</li> <li>Le microcontr\u00f4leur reprend le programme principal \u00e0 l'endroit m\u00e9moris\u00e9.</li> </ol> <p>Note</p> <p>Les interruptions sont tr\u00e8s utilis\u00e9es, le fait de pouvoir mettre en pause le programme principal m\u00eame lorsque celui-ci ex\u00e9cute un <code>delay()</code> est tr\u00e8s appr\u00e9ci\u00e9.</p>"},{"location":"arduino/07-interruptions/#2-parametrage-dune-interruption-sur-un-evenement-externe","title":"2. Param\u00e9trage d'une interruption sur un \u00e9v\u00e9nement externe","text":"<p>Le param\u00e9trage de l'interruption se fait dans le <code>void setup()</code> en utilisant la fonction <code>attachInterrupt()</code> de cette mani\u00e8re :</p> <p></p> <p>Warning</p> <p>Toutes le pins ne peuvent pas \u00eatre utilis\u00e9es pour faire des interruptions, pour l'Arduino MEGA se sont les pins : 2, 3, 18, 19, 20, 21 et pour l'Arduino UNO les pins :  2 et 3.</p> <p>Ci-dessous un exemple de param\u00e9trage d'interruption sur la pin num\u00e9rique 2 d'un Arduino MEGA, le d\u00e9clenchement est choisi sur front-montant (rising) :</p> <pre><code>void setup()\n{\npinMode(2,INPUT); //D\u00e9claration de la pin 2 en entr\u00e9e\nattachInterrupt(digitalPinToInterrupt(2),macro_interrupt,RISING); //Param\u00e9trage d'une interruption sur la pin 2\n}\n</code></pre>"},{"location":"arduino/07-interruptions/#3-creation-de-la-macro-dinterruption","title":"3. Cr\u00e9ation de la macro d'interruption","text":"<p>La macro d'interruption est une macro sans param\u00e8tres d'entr\u00e9e ni de sortie, celle-ci doit \u00eatre la plus courte possible. En effet, afin de ne pas saturer la m\u00e9moire du microcontr\u00f4leur qui lors d'une interruption doit m\u00e9moriser les valeurs des variables dans le programme principal, votre macro d'interruption ne doit pas comporter d'instructions gourmandes en m\u00e9moire : appel de fonctions pour le port s\u00e9rie, pour \u00e9crire sur un \u00e9cran lcd ...</p> <p>En g\u00e9n\u00e9ral nous pr\u00e9conisons d'inverser l'\u00e9tat d'un bool\u00e9en aussi appel\u00e9 flag dans cette macro, il s\u2019agira ensuite de regarder l'\u00e9tat de se flag dans le programme principal v\u00e9rifiant si il y a eu, ou non une interruption. Les variables utilis\u00e9es dans une macro d'interruption doivent obligatoirement \u00eatre d\u00e9clar\u00e9 globales et comme volatile.</p> <p>Nous donnons ci-dessous un exemple de cr\u00e9ation de macro d'interruption avec d\u00e9claration d'un flag, ainsi qu'un test sur ce flag dans le programme principal:</p> <pre><code>volatile boolean flag=false; //D\u00e9claration du flag en volatile pour utilisation dans la macro d'interruption\nvoid macro_interrupt(void) //Prototype de la macro d'interruption\n{\nflag=!flag; //Inversion du flag\n}\nvoid setup()\n{\npinMode(2,INPUT);\nSerial.begin(9600);\nattachInterrupt(digitalPinToInterrupt(2),macro_interrupt,RISING);\n}\nvoid loop()\n{\nif (!flag) //Test sur la variable  flag, si flag=0 =&gt; Pas d'interruption, si flag=1 =&gt; Il y a eu une interruption\nSerial.println(\"Il n'y a pas eu d'interruption\"); //Affichage d'un message sur le serial si pas d'interruption\nelse\n{\nSerial.println(\"Il y a eu une interruption\"); //Affichage d'un message sur le serial si interruption\nflag=false; //remise \u00e0 z\u00e9ro du flag pour la prochaine interruption\n}  }\n</code></pre>"},{"location":"arduino/08-timer/","title":"Utilisation d'un timer","text":"<p>La biblioth\u00e8que flexitimer2 permet une utilisation simplifi\u00e9e du timer du microcontr\u00f4leur, nous expliquons ici son fonctionnement.</p>"},{"location":"arduino/08-timer/#1-la-bibliotheque-flexitimer2","title":"1. La biblioth\u00e8que flexitimer2","text":"<p>Un timer permet de programmer l\u2019ex\u00e9cution d'instructions sur une dur\u00e9e donn\u00e9e. Le param\u00e9trage des timers le l'Atmega2560 fait appel \u00e0 la programmation de registres complexes, l'utilisation de la biblioth\u00e8que flexitimer2 permet de rapidement mettre en place une solution.</p> <p>Malheureusement cette biblioth\u00e8que n'est pas dans la base de donn\u00e9es du gestionnaire, il faut donc l'ajouter manuellement, apr\u00e8s l'avoir t\u00e9l\u00e9charg\u00e9e sur le Github du cr\u00e9ateur : Biblioth\u00e8que flexitimer2</p> <p>Cliquez sur , puis dans l'IDE Arduino allez dans Croquis &gt; Inclure une biblioth\u00e8que &gt; Ajouter la biblioth\u00e8que .ZIP</p>"},{"location":"arduino/08-timer/#2-parametrage-dun-timer","title":"2. Param\u00e9trage d'un timer","text":"<p>Le param\u00e9trage du timer peut se faire n'importe o\u00f9, et plusieurs fois, dans le programme principal <code>loop()</code> ainsi que dans le <code>setup()</code>. Il faut pour ce faire utiliser la fonction <code>FlexiTimer2::set()</code>, le timer d\u00e9clenchera une interruption une fois le temps \u00e9coul\u00e9, il s'agit alors d'indiquer le nom de la macro d'interruption lors de ce param\u00e9trage.</p> <p></p> <p>Pour d\u00e9marrer le timer il suffit d\u2019ex\u00e9cuter la fonction : <code>FlexiTimer2::start()</code> et pour l'arr\u00eater : <code>FlexiTimer2::stop()</code></p>"},{"location":"arduino/08-timer/#3-utilisation-dun-timer","title":"3. Utilisation d'un timer","text":"<p>Le programme ci-dessous param\u00e8tre le timer pour une dur\u00e9e de 10s et allume la led 13 en fin de comptage de ce dernier :</p> <pre><code>#include &lt;FlexiTimer2.h&gt; //Biblioth\u00e8que pour utiliser le timer\nvolatile boolean flag=false; //D\u00e9claration de la variable utilis\u00e9e dans la macro d'interruption\nvoid macro_interrupt(void)\n{\nflag=!flag;\n}\nvoid setup()\n{\npinMode(13,OUTPUT);\nFlexiTimer2::set(10000,macro_interrupt); //Param\u00e9trage du timer sur 10s\n}\nvoid loop()\n{\nFlexiTimer2::start(); //D\u00e9marrage du timer\nwhile(!flag) //Attente de la fin de temporisation, du passage \u00e0 1 du flag\n{\ndigitalWrite(13,LOW);\n}\ndigitalWrite(13,HIGH);\n}\n</code></pre>"},{"location":"arduino/ACT1-InOutNum/","title":"D\u00e9couverte des entr\u00e9es sorties num\u00e9riques","text":""},{"location":"arduino/ACT1-InOutNum/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n//Ajout de biblioth\u00e8ques\n//D\u00e9clarations de constantes\n//D\u00e9claration de variables\nvoid setup()\n{\n//Ins\u00e9rez ici vos param\u00e8tres\n}\nvoid loop()\n{\n//Ins\u00e9rez ici votre programme principal\n}\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT1-InOutNum/#1-utilisation-des-sorties-numeriques-sur-une-carte-arduino","title":"1. Utilisation des sorties num\u00e9riques sur une carte Arduino","text":""},{"location":"arduino/ACT1-InOutNum/#11-clignotement-led-13","title":"1.1 Clignotement led 13","text":"<p>Nous souhaitons dans un premier temps faire clignoter la led 13 d'une carte Arduino MEGA. La led devra rester allum\u00e9e 500ms et \u00e9teinte 500ms.</p> <p>Info</p> <p>La led 13 est la led reli\u00e9e \u00e0 la pin 13 soud\u00e9e sur la carte Arduino MEGA ou Arduino UNO comme le montre la figure ci-dessous.</p> <p></p>"},{"location":"arduino/ACT1-InOutNum/#12-utilisation-du-module-grove-led","title":"1.2 Utilisation du module Grove led","text":"<p>\u00c0 pr\u00e9sent utilisez le programme pr\u00e9c\u00e9dent pour faire clignoter la led d'un module LED Grove reli\u00e9 \u00e0 la pin num\u00e9rique 2. Nous utiliserons le m\u00eame cycle de clignotement que tout \u00e0 l'heure soit, 500ms \u00e9teinte / 500ms allum\u00e9e.</p>"},{"location":"arduino/ACT1-InOutNum/#2-utilisation-des-entrees-numeriques-sur-une-carte-arduino","title":"2. Utilisation des entr\u00e9es num\u00e9riques sur une carte Arduino","text":""},{"location":"arduino/ACT1-InOutNum/#21-bouton-poussoir-sans-condition","title":"2.1 Bouton poussoir sans condition","text":"<p>Allumer la led du module Grove de la partie 1 lors d'un appui sur le bouton poussoir. La led est toujours reli\u00e9e \u00e0 la pin num\u00e9rique 2 et le bouton poussoir \u00e0 la pin num\u00e9rique 6. Dans un premier temps, ne pas se servir de la condition <code>if()</code> ou <code>if() else</code>.</p>"},{"location":"arduino/ACT1-InOutNum/#22-bouton-poussoir-avec-condition","title":"2.2 Bouton poussoir avec condition","text":"<p>\u00c0 pr\u00e9sent vous devez faire le m\u00eame exercice que pr\u00e9c\u00e9demment mais en utilisant une condition de type <code>if()</code> ou <code>if() else</code>. Nous utiliserons les m\u00eames pins.</p>"},{"location":"arduino/ACT1-InOutNum/#23-allumage-inverse","title":"2.3 Allumage invers\u00e9","text":"<p>Cette fois-ci il s'agit d'allumer la led quand le bouton poussoir est rel\u00e2ch\u00e9 et de l'\u00e9teindre quand on appui sur celui-ci. Nous utiliserons les m\u00eames pins.</p>"},{"location":"arduino/ACT1-InOutNum/#24-allumage-et-extinction-explicites","title":"2.4 Allumage et extinction explicites","text":"<p>Pour finir, un appui sur le bouton poussoir allumera la led et la laissera allum\u00e9e, un autre appui \u00e9teindra la led et la laissera \u00e9teinte.</p>"},{"location":"arduino/ACT2-Serial/","title":"Exploitation du port s\u00e9rie","text":""},{"location":"arduino/ACT2-Serial/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n//Ajout de biblioth\u00e8ques\n//D\u00e9clarations de constantes\n//D\u00e9claration de variables\nvoid setup()\n{\n//Ins\u00e9rez ici vos param\u00e8tres\n}\nvoid loop()\n{\n//Ins\u00e9rez ici votre programme principal\n}\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT2-Serial/#1-transmission-puis-affichage-dun-texte-sur-le-moniteur-serie","title":"1. Transmission puis affichage d'un texte sur le moniteur s\u00e9rie","text":"<p>Nous souhaitons utiliser le Serial (aussi appel\u00e9 UART) d'une carte Arduino MEGA pour afficher le texte suivant :<code>STI2D SIN Rascol, Arduino du basique au complexe.</code> Un retour \u00e0 la ligne sera effectu\u00e9 \u00e0 la fin de la phrase et le texte devra s'afficher en boucle comme le montre l'image ci-dessous :</p> <p></p>"},{"location":"arduino/ACT2-Serial/#2-incrementation-dun-compteur-et-affichage-sur-le-moniteur-serie","title":"2. Incr\u00e9mentation d'un compteur et affichage sur le moniteur s\u00e9rie","text":"<p>Cr\u00e9ez un compteur qui d\u00e9marre \u00e0 zero et s'incr\u00e9mente de 1 \u00e0 chaque passage dans la boucle principale <code>void loop()</code>, affichez l'\u00e9tat de ce compteur \u00e0 chaque passage gr\u00e2ce au moniteur s\u00e9rie, comme le montre l'exemple ci-dessous :</p> <p></p>"},{"location":"arduino/ACT2-Serial/#3-affichage-de-letat-dun-bouton-poussoir-sur-le-moniteur-serie","title":"3. Affichage de l'\u00e9tat d'un bouton poussoir sur le moniteur s\u00e9rie","text":"<p>Pour finir, nous souhaitons afficher l'\u00e9tat d'un bouton poussoir Grove sur le moniteur s\u00e9rie. Quand le bouton poussoir est relach\u00e9 vous devez afficher : <code>Etat bouton poussoir = Relach\u00e9</code>, quand ce dernier est appuy\u00e9 affichez : <code>Etat bouton poussoir = Appuy\u00e9</code>. L'exemple ci-dessous montre le comportement attendu :</p> <p></p>"},{"location":"arduino/ACT3-CAN/","title":"D\u00e9couverte du convertisseur analogique num\u00e9rique","text":""},{"location":"arduino/ACT3-CAN/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n//Ajout de biblioth\u00e8ques\n//D\u00e9clarations de constantes\n//D\u00e9claration de variables\nvoid setup()\n{\n//Ins\u00e9rez ici vos param\u00e8tres\n}\nvoid loop()\n{\n//Ins\u00e9rez ici votre programme principal\n}\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT3-CAN/#1-fabrication-dun-voltmetre","title":"1. Fabrication d'un voltm\u00e8tre","text":""},{"location":"arduino/ACT3-CAN/#11-affichage-sur-le-moniteur-serie","title":"1.1 Affichage sur le moniteur s\u00e9rie","text":"<p>Nous souhaitons utiliser le Serial (aussi appel\u00e9 UART) d'une carte Arduino MEGA pour afficher la tension analogique de la pin A0 au dixi\u00e8me pr\u00eat. Nous ferons varier cette tension gr\u00e2ce au module Grove : Rotary Sensor. La figure ci-dessous montre l'affichage attendu sur le moniteur s\u00e9rie :</p> <p></p>"},{"location":"arduino/ACT3-CAN/#12-affichage-sur-un-ecran-lcd","title":"1.2 Affichage sur un \u00e9cran lcd","text":"<p>Nous souhaitons \u00e0 pr\u00e9sent conserver le m\u00eame fonctionnement que pr\u00e9c\u00e9demment, seulement l'affichage se fera sur un \u00e9cran lcd : Grove LCD RGB Backlight. La figure ci-dessous montre l'affichage attendu sur l'\u00e9cran LCD :</p> <p></p>"},{"location":"arduino/ACT3-CAN/#2-affiche-dun-niveau-sous-forme-de-jauge-a-essence","title":"2. Affiche d'un niveau sous forme de jauge \u00e0 essence","text":"<p>Dans cette partie tourner le Grove Rotary Sensor toujours connect\u00e9 \u00e0 l'entr\u00e9e A0 aura pour but de simuler le niveau d'essence d'un r\u00e9servoir. Nous souhaitons ensuite avoir un affichage sur 4 leds de ce niveau, la variation du niveau d'essence (soit la tension sur A0) provoquera l'allumage ou l'extinction des 4 leds. Le comportement attendu est le suivant :</p> <p></p>"},{"location":"arduino/ACT4-PWM/","title":"La fonction modulation de largeur d'impulsions ou PWM","text":""},{"location":"arduino/ACT4-PWM/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n//Ajout de biblioth\u00e8ques\n//D\u00e9clarations de constantes\n//D\u00e9claration de variables\nvoid setup()\n{\n//Ins\u00e9rez ici vos param\u00e8tres\n}\nvoid loop()\n{\n//Ins\u00e9rez ici votre programme principal\n}\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT4-PWM/#1-variation-de-luminosite-avec-potentiometre","title":"1. Variation de luminosit\u00e9 avec potentiom\u00e8tre","text":"<p>Nous souhaitons utiliser le PWM d'une carte Arduino UNO pour faire varier la luminosit\u00e9 d'une led connect\u00e9e \u00e0 la pin num\u00e9rique 2, la luminosit\u00e9 se r\u00e9glera en tournant le Grove Rotary Sensor connect\u00e9 en pin A0. Le comportement attendu est le suivant:</p> <ul> <li>Rotary sensor en but\u00e9e gauche = Led \u00e9teinte.</li> <li>Rotary sensor en but\u00e9e droite = Led allum\u00e9e au maximum.</li> </ul>"},{"location":"arduino/ACT4-PWM/#2-variation-de-luminosite-avec-ldr","title":"2. Variation de luminosit\u00e9 avec LDR","text":"<p>Nous souhaitons \u00e0 pr\u00e9sent faire un syst\u00e8me d'\u00e9clairage domotique, toujours avec une led mais en rempla\u00e7ant le Rotary Sensor par un module Grove Light Sensor connect\u00e9 en pin A0, le comportement attendu est le suivant :</p> <ul> <li>Quand le capteur de luminosit\u00e9 est d\u00e9couvert (expos\u00e9 \u00e0 la lumi\u00e8re ambiante) la led doit \u00eatre totalement \u00e9teinte.</li> <li>Quand le capteur de luminosit\u00e9 est occult\u00e9 la led doit \u00eatre allum\u00e9e au maximum.</li> </ul>"},{"location":"arduino/ACT5-Macros/","title":"Cr\u00e9ation et utilisation de macros en langage C/C++","text":""},{"location":"arduino/ACT5-Macros/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n//Ajout de biblioth\u00e8ques\n//D\u00e9clarations de constantes\n//D\u00e9claration de variables\nvoid setup()\n{\n//Ins\u00e9rez ici vos param\u00e8tres\n}\nvoid loop()\n{\n//Ins\u00e9rez ici votre programme principal\n}\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT5-Macros/#1-emission-dimpulsions","title":"1. \u00c9mission d'impulsions","text":"<p>Nous souhaitons cr\u00e9er une macro, qui lorsqu'elle est appel\u00e9e envoie le signal suivant sur la pin num\u00e9rique 2 :</p> <p></p> <ul> <li>Le prototype de la macro \u00e0 cr\u00e9er est le suivant : <code>void signal(int tl, int tc)</code>.</li> <li>Le programme principal devra appeler la macro avec ses deux param\u00e8tres d'entr\u00e9e, nous imposons <code>tl&gt;tc</code></li> </ul>"},{"location":"arduino/ACT5-Macros/#2-fabrication-dune-calculatrice","title":"2. Fabrication d'une calculatrice","text":"<p>Nous souhaitons cr\u00e9er une calculatrice dont la saisie des nombres sera effectu\u00e9e avec le clavier et la visualisation des r\u00e9sultats sur le moniteur s\u00e9rie.</p> <p></p> <p>\"Clear Everything\" by Hurock24 is licensed under CC BY-NC-ND 2.0</p>"},{"location":"arduino/ACT5-Macros/#21-creation-des-macros","title":"2.1.  Cr\u00e9ation des macros","text":"<p>Cr\u00e9er les 4 macros suivantes, qui auront pour t\u00e2che la r\u00e9alisation des 4 calculs de base :</p> <ul> <li><code>float addition(float a, float b)</code></li> <li><code>float soustraction(float a, float b)</code></li> <li><code>float multiplication(float a, float b)</code></li> <li><code>float division(float a, float b)</code></li> </ul>"},{"location":"arduino/ACT5-Macros/#21-creation-du-programme-principal","title":"2.1. Cr\u00e9ation du programme principal","text":"<p>Cr\u00e9er le programme principal qui aura pour t\u00e2che :</p> <ul> <li>L'affichage du menu sous la forme suivante :</li> </ul> <p><pre><code>Menu principal\n1-Addition\n2-Soustraction\n3-Multiplication\n4-Division\n</code></pre> * La demande de la saisie des nombres \u00e0 l'utilisateur, sous la forme suivante :</p> <pre><code>Saisissez le premier nombre :\n--\nSaisissez le second nombre :\n--\nR\u00e9sultat :\n--\n</code></pre> <p>Note</p> <p>La saisie de nombres \u00e0 l'aide du clavier et l'acquisition par les fonctions <code>Serial.parseFloat()</code> ou <code>Serial.parseInt()</code> est complexe nous donnons un exemple ci-dessous.</p> <pre><code>/***************************************************************************************************\nNom ......... : Test_serial_calculette.ino\nRole ........ : Envoi de flottants et d'entiers par le serial gr\u00e2ce aux fonctions parseFloat() et parseInt()\nAuteur ...... : J.Serrand\nMail ........ : joris.serrand@rascol.net\nVersion ..... : V0.0 du 27/03/17\nLicence ..... : Copyright (C) 2016  Joris SERRAND\n                This program is free software: you can redistribute it and/or modify\n                it under the terms of the GNU General Public License as published by\n                the Free Software Foundation, either version 3 of the License, or\n                (at your option) any later version.\n                This program is distributed in the hope that it will be useful,\n                but WITHOUT ANY WARRANTY; without even the implied warranty of\n                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                GNU General Public License for more details.\n                You should have received a copy of the GNU General Public License\n                along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\nCompilation . : Avec l'IDE Arduino\n***************************************************************************************************/\n//D\u00e9claration des fonctions\n/**************************************************************************************************/\nvoid setup()\n{\n//Initialisation de l'UART\nSerial.begin(9600);\n}\n/**************************************************************************************************/\nvoid loop()\n{\nfloat nombre_flottant=0;//D\u00e9claration de la variable qui recevra la saisie du flottant sur le moniteur s\u00e9rie\nint nombre_entier=0; //D\u00e9claration de la variable qui recevra la saisie de l'entier sur le moniteur s\u00e9rie\nSerial.println(\"Veuillez rentrer un flottant :\");\nwhile(Serial.available()&lt;=0) //On attend l'\u00e9criture sur le serial\n{\n}\nif(Serial.available() &gt; 0)//Attente de la r\u00e9ception d'un message\n{\nnombre_flottant=Serial.parseFloat();\nSerial.println(nombre_flottant);\n}\nSerial.println(\"Veuillez rentrer un entier :\");\nwhile(Serial.available()&lt;=0) //On attend l'\u00e9criture sur le serial\n{\n}\nif(Serial.available() &gt; 0)//Attente de la r\u00e9ception d'un message\n{\nnombre_entier=Serial.parseInt();\nSerial.println(nombre_entier);\n}\n}\n</code></pre>"},{"location":"arduino/ACT6-Interrupts/","title":"Utilisation des interruptions en environnement Arduino","text":""},{"location":"arduino/ACT6-Interrupts/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n//Ajout de biblioth\u00e8ques\n//D\u00e9clarations de constantes\n//D\u00e9claration de variables\nvoid setup()\n{\n//Ins\u00e9rez ici vos param\u00e8tres\n}\nvoid loop()\n{\n//Ins\u00e9rez ici votre programme principal\n}\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT6-Interrupts/#1-clignotement-de-led","title":"1. Clignotement de led","text":"<p>Nous souhaitons cr\u00e9er un programme qui fait clignoter une led de la mani\u00e8re suivante :</p> <ul> <li>500ms ON</li> <li>500ms OFF</li> </ul> <p>L'appui sur un bouton-poussoir d\u00e9clenchera une interruption, celle-ci aura pour effet de stopper le clignotement qui reprendra seulement lors d'un nouvel appui sur celui-ci. R\u00e9alisez le programme principal et la macro d'interruption qui produisent le fonctionnement attendu.</p>"},{"location":"arduino/ACT6-Interrupts/#2-variation-de-frequence-de-clignotement","title":"2. Variation de fr\u00e9quence de Clignotement","text":"<p>Nous reprenons le programme pr\u00e9c\u00e9dent, mais cette fois-ci nous d\u00e9sirons changer la fr\u00e9quence de clignotement de la led lors d'une interruption :</p> <ul> <li>200ms ON</li> <li>200ms OFF</li> </ul>"},{"location":"arduino/ACT7-Timer/","title":"Utilisation d'un timer en environnement Arduino","text":""},{"location":"arduino/ACT7-Timer/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n//Ajout de biblioth\u00e8ques\n//D\u00e9clarations de constantes\n//D\u00e9claration de variables\nvoid setup()\n{\n//Ins\u00e9rez ici vos param\u00e8tres\n}\nvoid loop()\n{\n//Ins\u00e9rez ici votre programme principal\n}\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT7-Timer/#1-clignotement-et-arret-le-temps-desire","title":"1. Clignotement et arr\u00eat le temps d\u00e9sir\u00e9","text":"<p>Dans le programme principal nous souhaitons faire clignoter une led de la mani\u00e8re suivante :</p> <ul> <li>200ms ON</li> <li>200ms OFF</li> </ul> <p>L'appui sur un bouton-poussoir d\u00e9clenchera une interruption qui d\u00e9marrera un timer, durant la temporisation le clignotement sera suspendu. Une fois la temporisation termin\u00e9e le clignotement reprendra.</p>"},{"location":"cpp/01-IntroCpp/introCpp/","title":"Introduction","text":"<p> Slides projet\u00e9s durant le cours</p>"},{"location":"cpp/02-utilisationIDE/utilisationIDE/","title":"Utilisation d'un IDE","text":"<p> Slides projet\u00e9s durant le cours</p>"},{"location":"cpp/03-variablesConstantes/variablesConstantes/","title":"Variables et constantes","text":"<p> Slideshow</p>"},{"location":"cpp/04-tableauxVecteurs/tableauxVecteurs/","title":"Tableaux et vecteurs","text":"<p> Slideshow</p>"},{"location":"cpp/05-structuresSelectives/structuresSelectives/","title":"Structures s\u00e9lectives","text":"<p> Slideshow</p>"},{"location":"cpp/06-structuresIteratives/structuresIteratives/","title":"Structures it\u00e9ratives","text":"<p> Slideshow</p>"},{"location":"cpp/10-pointeurs/pointeurs/","title":"Pointeurs","text":"<p> Slideshow</p>"},{"location":"cpp/11-classesObjets/classesObjets/","title":"Classes et Objets","text":"<p> Slideshow</p>"},{"location":"cpp/12-constructeursDestructeurs/constructeursDestructeurs/","title":"Constructeurs et Destructeurs","text":"<p> Slideshow</p>"}]}