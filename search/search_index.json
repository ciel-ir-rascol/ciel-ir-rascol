{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STS CIEL Informatique et R\u00e9seaux","text":""},{"location":"#lycee-louis-rascol-albi","title":"Lyc\u00e9e Louis Rascol, Albi","text":"<p>Ce site web regroupe des ressources pour la formation en STS CIEL Cybers\u00e9curit\u00e9 Informatique et \u00c9lectronique option Informatique et R\u00e9seaux au lyc\u00e9e Louis Rascol \u00e0 Albi.</p>"},{"location":"arduino/","title":"Programmation en environnement Arduino","text":"<p>L'environnement Arduino est appr\u00e9ci\u00e9 pour sa rapidit\u00e9 de prise en main et son c\u00f4t\u00e9 open-source, en ayant pour base le langage C/C++ et les microcontr\u00f4leurs Atmega de chez Atmel la surcouche Arduino permet de coder les algorithmiques des plus simples aux plus complexes.</p>"},{"location":"arduino/#sommaire","title":"Sommaire","text":""},{"location":"arduino/#cours","title":"Cours","text":"<ol> <li>Structure d'un programme Arduino</li> <li>Les variables et constantes dans un code Arduino</li> <li>Les fonctions de base du langage C/C++</li> <li>Les fonctions Arduino</li> <li>Utilisation des modules Grove de Seeed Studio</li> <li>Cr\u00e9ation d'une macro ou sous-programme en environnement C/C++</li> <li>Les interruptions</li> <li>Le timer</li> </ol>"},{"location":"arduino/#activites","title":"Activit\u00e9s","text":"<ol> <li>D\u00e9couverte des entr\u00e9es sorties num\u00e9riques</li> <li>Exploitation du port s\u00e9rie</li> <li>D\u00e9couverte du Convertisseur Num\u00e9rique Analogique (CAN)</li> <li>La fonction Modulation de Largeur d'Impulsions ou PWM</li> <li>Les macros</li> <li>Les interruptions</li> <li>Le timer</li> </ol>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/","title":"Structure d'un programme Arduino","text":"<p>Un programme Arduino est toujours structur\u00e9 de la m\u00eame mani\u00e8re : Une partie initialisations et d\u00e9clarations de variables, une partie setup() et une partie loop()</p>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/#1-le-cartouche","title":"1. Le cartouche","text":"<p>Tout programme doit contenir un cartouche, il permet d'informer le lecteur sur :</p> <ul> <li>Le nom du programme</li> <li>Le r\u00f4le du programme, d\u00e9crit en quelques mots.</li> <li>Son auteur et \u00e9ventuellement comment communiquer avec lui (mail)</li> <li>La version du code en commen\u00e7ant par V0.0 et sa date</li> <li>\u00c9ventuellement une licence si le code est publi\u00e9 sur internet</li> <li>Le logiciel permettant sa compilation (dans notre cas l'IDE Arduino)</li> </ul> <p>Voici un exemple de cartouche pour un programme Arduino avec licence GNU V3.0, que vous pouvez utiliser pour vos propres codes :</p> <pre><code>/**************************************************************************************************\nNom ......... : Projet_Alarme_Emission_433.ino\nRole ........ : Transmet en 433MHz gr\u00e2ce \u00e0 la biblioth\u00e8que VirtualWire une cha\u00eene de\n                caract\u00e8re sur la pin 12 de l'Arduino Mega 2560\n                * Dans le cas normal envoi :\"Repos_capteur_ILS\"\n                * Dans le cas d'un front montant sur CapteurPin envoi : \"Alerte_capteur_ILS\"\nAuteur ...... : J.Serrand\nMail ........ : joris.serrand@rascol.net\nVersion ..... : V0.0 du 17/02/16\nLicence ..... : Copyright (C) 2016  Joris SERRAND\n\n                This program is free software: you can redistribute it and/or modify\n                it under the terms of the GNU General Public License as published by\n                the Free Software Foundation, either version 3 of the License, or\n                (at your option) any later version.\n\n                This program is distributed in the hope that it will be useful,\n                but WITHOUT ANY WARRANTY; without even the implied warranty of\n                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                GNU General Public License for more details.\n\n                You should have received a copy of the GNU General Public License\n                along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\nCompilation . : Avec l'IDE Arduino\n****************************************************************************************************/\n</code></pre>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/#2-initialisations-et-declarations-de-variables-ou-constantes","title":"2. Initialisations et d\u00e9clarations de variables ou constantes","text":"<p>C'est dans cette partie que nous faisons les ajouts de biblioth\u00e8ques n\u00e9cessaires \u00e0 l'ex\u00e9cution de notre code, ainsi que les d\u00e9clarations et initialisations de variables et constantes. M\u00eame si le c++ autorise les d\u00e9clarations n'importe o\u00f9 dans le programme, il est vivement conseill\u00e9 de toutes les regrouper dans cette partie.</p> <p>Voici un exemple de d'ajout de biblioth\u00e8ques et de d\u00e9clarations :</p> <pre><code>//Ajout de biblioth\u00e8ques\n#include &lt;Wire.h&gt; //Insertion de la biblioth\u00e8que pour les fonctions I2C\n\n//D\u00e9clarations de constantes\n#define bp 10 //D\u00e9claration d'une constante appel\u00e9e bp de valeur 10\nconst float pi(3.14); //D\u00e9claration d'une constante de type float et de nom \"pi\" initialis\u00e9e \u00e0 3.14\n\n//D\u00e9claration de variables\nint cpt(0); //D\u00e9claration d'un entier de nom \"cpt\" initialis\u00e9 \u00e0 0\nfloat vitesse(10.5); //D\u00e9claration d'un flottant de nom \"vitesse\" initialis\u00e9 \u00e0 10.5\n</code></pre>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/#3-le-parametrage-du-programme-setup","title":"3. Le param\u00e9trage du programme setup()","text":"<p>La partie <code>void setup()</code> renferme le param\u00e9trage n\u00e9cessaire au fonctionnement du programme, on peut par exemple y trouver :</p> <ul> <li>Le <code>pinMode()</code>, permettant de dire si une pin num\u00e9rique est utilis\u00e9e en entr\u00e9e ou en sortie.</li> <li>Le <code>Serial.begin()</code>, permettant de param\u00e9trer la vitesse de transfert de l'UART.</li> <li>...</li> </ul> <p>Warning</p> <p>Ne pas commencer \u00e0 \u00e9crire votre code dans cette partie, <code>setup()</code> ne doit contenir que le param\u00e9trage et ne s'ex\u00e9cute qu'une seule fois lors du lancement du programme.</p> <p>Voici un exemple de <code>setup()</code> :</p> <pre><code>void setup()\n{\n  Wire.begin();//Initialisation de la liaison I2C\n  lcd.init(); //Initialisation du LCD\n  pinMode(4, INPUT); //Param\u00e9trage de la pin num\u00e9rique 4 en entr\u00e9e\n  Serial.begin(9600); //Param\u00e9trage de la vitesse du port s\u00e9rie\n}\n</code></pre>"},{"location":"arduino/01-Structure_d_un_programme_Arduino/#4-le-programme-principal-loop","title":"4. Le programme principal loop()","text":"<p>La partie <code>void loop()</code> est le programme principal de votre code Arduino. Comme son nom l'indique \u00e9crire dans cette partie revient \u00e0 \u00e9crire dans une boucle <code>while(1)</code>, le programme est reboucl\u00e9 sans fin.</p> <p>Exemple de programme principal faisant clignoter la led 13 (led pr\u00e9sente sur le circuit imprim\u00e9 d'une carte Arduino UNO) :</p> <pre><code>void loop()\n{\n  digitalWrite(13, HIGH);   // Met la pin 13 au niveau haut, ce qui a pour effet d'allumer la led\n  delay(1000);              // Attend une seconde\n  digitalWrite(13, LOW);    // Met la pin 13 au niveau bas, ce qui a pour effet d'\u00e9teindre la led\n  delay(1000);              // Attend une seconde\n}\n</code></pre>"},{"location":"arduino/02-Variables_constantes/","title":"Les variables et constantes dans un code Arduino","text":"<p>La variable est en programmation un syst\u00e8me de stockage de donn\u00e9es. Par analogie une variable peut \u00eatre compar\u00e9e \u00e0 une bo\u00eete, le type de variable correspondant \u00e0 la taille de la bo\u00eete, plus le type est cod\u00e9 sur un nombre de bits important, plus la bo\u00eete sera grande. L'int\u00e9rieur d'une variable contient un nombre (ou un caract\u00e8re si le type le permet) modifiable \u00e0 souhait tout au long du programme.</p> <p></p>"},{"location":"arduino/02-Variables_constantes/#1-les-types-de-variables","title":"1. Les types de variables","text":""},{"location":"arduino/02-Variables_constantes/#11-signe-ou-non-signe","title":"1.1 Sign\u00e9 ou non Sign\u00e9 ??","text":"<p>Vous avez peut-\u00eatre pu remarquer au cours de vos lectures la r\u00e9f\u00e9rence \u00e0 un type de variable sign\u00e9 ou non sign\u00e9, qu'est ce que \u00e7a peut bien vouloir dire ? La \"signature\" est un moyen en programmation pour coder les nombres relatifs, un type de variable non sign\u00e9 comme par exemple un <code>unsigned int</code> ne pourra pas contenir un nombre relatif inf\u00e9rieur \u00e0 0 comme -9. \u00c0 contrario, un type sign\u00e9 comme <code>int</code> pourra contenir un nombre relatif sup\u00e9rieur ou inf\u00e9rieur \u00e0 0.</p>"},{"location":"arduino/02-Variables_constantes/#12-le-booleen-boolean","title":"1.2 Le bool\u00e9en : <code>boolean</code>","text":"<p>Le bool\u00e9en not\u00e9 <code>boolean</code> sur Arduino, est le plus petit type de variable que vous serez emmen\u00e9 \u00e0 rencontrer, il est cod\u00e9 sur seulement 2 bits. Son contenu ne peut \u00eatre que 0 ou 1, soit <code>True</code>ou <code>False</code>sur Arduino. Ce type est souvent utilis\u00e9 pour stocker l'\u00e9tat d'un capteur num\u00e9rique, par exemple un bouton poussoir : <code>True</code>si le bouton est appuy\u00e9, <code>False</code>si il est rel\u00e2ch\u00e9. C'est un type non sign\u00e9.</p>"},{"location":"arduino/02-Variables_constantes/#13-loctet-byte","title":"1.3 L'octet : <code>byte</code>","text":"<p>L'octet not\u00e9 <code>byte</code> sous Arduino, est un type de variable cod\u00e9 sur 8 bits. Son contenu est un nombre pouvant aller de 0 \u00e0 255. C'est un type non sign\u00e9.</p>"},{"location":"arduino/02-Variables_constantes/#14-lentier-int","title":"1.4 L'entier : <code>int</code>","text":"<p>L'entier not\u00e9 <code>int</code> sous Arduino, est un type de variable sign\u00e9 cod\u00e9 sur 16 bits. Son contenu est un nombre pouvant aller de \\({-2}^{15}\\) \u00e0 \\({2}^{15}-1\\) soit de -32768 \u00e0 32767. Le calcul des extrema se fait sur 15 bits et non pas sur 16 car le bit de poids fort est r\u00e9serv\u00e9 pour le bit de signe, si celui-ci est \u00e0 1 le compl\u00e9ment \u00e0 deux du nombre qui suit est interpr\u00e9t\u00e9 comme un n\u00e9gatif, inversement pour un positif.</p> <p>Info</p> <p>Il existe le type <code>unsigned int</code> pour un entier non sign\u00e9. Les valeurs limites sont donc de 0 \u00e0 \\(2^{16}-1\\), soit de 0 \u00e0  65 535.</p>"},{"location":"arduino/02-Variables_constantes/#15-le-flottant-float","title":"1.5 Le flottant : <code>float</code>","text":"<p>Le flottant not\u00e9 <code>float</code> sous Arduino, est un type de variable sign\u00e9 cod\u00e9 sur 4 octets soit 32 bits. Son contenu est un nombre pouvant aller de 3.4028235E+38 \u00e0 -3.4028235E+38.</p> <p>Codage d'un nombre en virgule flottante : La virgule flottante est une technique pour stocker dans une variable un nombre r\u00e9el. Pour cela il suffit de d\u00e9composer le nombre de la mani\u00e8re suivante :</p> <p></p> <ul> <li>Le bit de poids fort est le bit de signe, il est \u00e0 1 si le nombre est n\u00e9gatif, \u00e0 0 si il est positif.</li> <li>La mantisse contient les chiffres significatifs du nombre elle est cod\u00e9e sur 23 bits.</li> <li>L'exposant repr\u00e9sente la place de la virgule dans le nombre, il est cod\u00e9 sur 8 bits.</li> </ul>"},{"location":"arduino/02-Variables_constantes/#16-le-caractere-char","title":"1.6 Le caract\u00e8re : <code>char</code>","text":"<p>Le caract\u00e8re not\u00e9 <code>char</code> sous Arduino, est un type de variable cod\u00e9 sur 8 bits. Son contenu est un caract\u00e8re, cod\u00e9 avec son code d\u00e9cimal ASCII correspondant. Pour enregistrer un caract\u00e8re il suffit de le mettre entre c\u00f4tes : <code>'a'</code> , si on souhaite enregistrer le code d\u00e9cimal ASCII correspondant au caract\u00e8re souhait\u00e9 il suffit de le noter tel quel. Pour <code>'a'</code> le code ASCII correspondant est 97.</p> <p>Le codage ASCII</p> <p>L'ASCII pour American Standard Code for Information Interchange (Code am\u00e9ricain normalis\u00e9 pour l'\u00e9change d'information) est un syst\u00e8me de codage des caract\u00e8res invent\u00e9 dans les 60 par l'ISO (International Organization for Standardization). C'est un syst\u00e8me de codage devenu un standard pour transmettre l'information de mani\u00e8re num\u00e9rique. Pour de plus amples renseignements sur la cr\u00e9ation du code ASCII n'h\u00e9sitez pas \u00e0 consulter la page Wikip\u00e9dia d\u00e9di\u00e9e.</p> <p></p>"},{"location":"arduino/02-Variables_constantes/#2-la-declaration-et-linitialisation-de-variables","title":"2. La d\u00e9claration et l'initialisation de variables","text":"<p>Pour utiliser une variable dans son programme Arduino il faut au pr\u00e9alable la cr\u00e9er, en programmation on parlera de d\u00e9clarer une variable. Le langage C/C++ autorise la d\u00e9claration de variables n'importe o\u00f9 dans le code, cependant il est pr\u00e9f\u00e9rable pour les novices de faire toutes les d\u00e9clarations et initialisations au d\u00e9but, juste apr\u00e8s les ajouts de biblioth\u00e8ques (<code>#define ...</code>). Quand on d\u00e9clare une variable on a pour obligation de lui donner un nom, et de pr\u00e9ciser son type, il est pr\u00e9f\u00e9rable \u00e9galement de l'initialiser, c'est \u00e0 dire lui donner une valeur de d\u00e9part sans quoi un nombre ind\u00e9pendant de notre volont\u00e9 sera enregistr\u00e9.</p> <p>Pour d\u00e9clarer et initialiser une variable il suffit d'utiliser l'instruction suivante :</p> <p></p> <p>Dans cet exemple nous venons de d\u00e9clarer une variable de type entier appel\u00e9e ma_variable et initialis\u00e9e \u00e0 124.</p> <p>Warning</p> <p>Les noms de variables ne doivent pas contenir d'espaces, d'accents, de caract\u00e8res sp\u00e9ciaux autre que <code>_</code>. De plus le langage C/C++ est sensible \u00e0 la casse c'est \u00e0 dire qu'il diff\u00e9rencie les minuscules des majuscules.</p> <p>Autres exemples :</p> <ul> <li>Pour un bool\u00e9en : <code>boolean etat_bp=true;</code> Initialisation d'un bool\u00e9en appel\u00e9 etat_bp \u00e0 l'\u00e9tat haut.</li> <li>Pour un flottant : <code>float capteur=56.4;</code> Initialisation d'un flottant appel\u00e9 capteur \u00e0 la valeur 56.4.</li> <li>Pour un octet : <code>byte toto=23;</code> Initialisation d'un octet appel\u00e9 toto \u00e0 la valeur 23.</li> <li>Pour un caract\u00e8re : <code>char mon_caractere='b';</code> ou <code>char mon_caractere=98;</code> Initialisation d'un caract\u00e8re appel\u00e9 mon_caractere \u00e0 la valeur 98 code ASCII correspondant \u00e0 'b'.</li> </ul>"},{"location":"arduino/02-Variables_constantes/#3-la-declaration-de-constantes","title":"3. La d\u00e9claration de constantes","text":"<p>Une constante \u00e0 l'inverse d'une variable, ne varie pas lors de l'ex\u00e9cution du programme elle reste \u00e0 la valeur \u00e0 laquelle elle a \u00e9t\u00e9 initialis\u00e9e. Cela est tr\u00e8s utile pour d\u00e9finir un num\u00e9ro de pin ou une constante comme le nombre pi. Nous d\u00e9veloppons ci-dessous 2 m\u00e9thodes pour d\u00e9clarer une constante :</p>"},{"location":"arduino/02-Variables_constantes/#31-utilisation-de-const","title":"3.1 Utilisation de <code>const</code>","text":"<p>La d\u00e9finition d'une constante gr\u00e2ce au mot cl\u00e9 <code>const</code> est la m\u00e9thode \u00e0 privil\u00e9gier, il suffit pour cela de choisir le bon type de variable pouvant contenir notre constante et utiliser l'instruction suivante :</p> <p></p> <p>Ici nous d\u00e9clarons une constante appel\u00e9e <code>ma_constante</code> et initialis\u00e9e \u00e0 la valeur 234.</p>"},{"location":"arduino/02-Variables_constantes/#32-utilisation-de-define","title":"3.2 Utilisation de <code>#define</code>","text":"<p>La d\u00e9finition d'une constante \u00e0 l'aide du mot cl\u00e9 <code>#define</code> est \u00e0 \u00e9viter, toutefois nous tenons \u00e0 vous montrer son utilisation ci-dessous :</p> <p></p> <p>Warning</p> <p>Le <code>#define</code> attribue dans l'exemple ci-dessus le mot <code>ma_constante</code> \u00e0 <code>234</code> avant la compilation. C'est \u00e0 dire que dans tout le code \u00e0 chaque fois que le mot <code>ma_constante</code> sera utilis\u00e9 il sera remplac\u00e9 par <code>234</code>, je vous laisse voir les probl\u00e8mes que cela peut poser dans le code...</p>"},{"location":"arduino/03-Fonctions_C%2B%2B/","title":"Les fonctions de base du langage C/C++","text":"<p>Le langage C/C++ utilis\u00e9 pour la programmation des microcontr\u00f4leurs Atmel est le langage choisi par Arduino pour la programmation de ses cartes \u00e9lectroniques. Dans ce cours nous donnons les principaux mots-cl\u00e9s du langage permettant de reproduire les structures de bases vues en algorithmique : structures lin\u00e9aires, alternatives et r\u00e9p\u00e9titives.</p>"},{"location":"arduino/03-Fonctions_C%2B%2B/#1-les-operateurs-de-comparaison","title":"1. Les op\u00e9rateurs de comparaison","text":"<p>Le tableau suivant liste les op\u00e9rateurs utilis\u00e9s en C/C++ pour d\u00e9finir des conditions :</p> Op\u00e9rateurs <code>==</code> Egalit\u00e9 <code>!=</code> Diff\u00e9rence <code>&lt;</code> Inf\u00e9rieur <code>&gt;</code> Sup\u00e9rieur <code>&lt;=</code> Inf\u00e9rieur ou \u00e9gal <code>&gt;=</code> Sup\u00e9rieur ou \u00e9gal <p>Warning</p> <p>L'erreur classique est de confondre le <code>=</code> et le <code>==</code>, notez que le premier est pour l'affectation d'une valeur \u00e0 une variable et le second pour la comparaison. De plus le langage C/C++ n'autorise pas l'encadrement de variables entre deux valeurs dans une condition tel que : <code>5&lt;toto&lt;10</code>, pour \u00e9crire une telle condition il suffit d'utiliser l'op\u00e9rateur logique <code>&amp;&amp;</code>.</p>"},{"location":"arduino/03-Fonctions_C%2B%2B/#2-les-operateurs-logiques","title":"2. Les op\u00e9rateurs logiques","text":"<p>Le tableau suivant liste les op\u00e9rateurs logiques utilis\u00e9s en C/C++ pour d\u00e9finir des conditions :</p> Op\u00e9rateurs <code>&amp;&amp;</code> Et logique | | Ou logique <code>!</code> Non <p>Warning</p> <p>Faire attention \u00e0 ne pas confondre le <code>&amp;&amp;</code> et le <code>&amp;</code> ou le <code>||</code> et le <code>|</code>. Dans le cas du double symbole l'utilisation est pour une condition, dans le cas du symbole seul l'utilisation est un pour une op\u00e9ration logique bit \u00e0 bit.</p>"},{"location":"arduino/03-Fonctions_C%2B%2B/#3-les-conditions","title":"3. Les conditions","text":""},{"location":"arduino/03-Fonctions_C%2B%2B/#31-si-alors-if","title":"3.1 Si Alors : <code>if()</code>","text":"<p>La condition Si Alors permet de r\u00e9aliser une ou plusieurs actions si seulement la condition \u00e9nonc\u00e9e est vrai, si ce n'est pas le cas le programme saute la condition et poursuit son ex\u00e9cution. La structure de cette condition est donn\u00e9e ci-dessous :</p> <p></p> <p>Warning</p> <p>Le langage C/C++ utilise l'accolade ouverte <code>{</code> pour indiquer l'entr\u00e9e dans une fonction et l'accolade ferm\u00e9e <code>}</code> pour en sortir, afin de na pas oublier cette particularit\u00e9 propre \u00e0 ce langage il est vivement conseill\u00e9 de bien indenter son code pour en am\u00e9liorer la lisibilit\u00e9.</p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>int a = 0; //D\u00e9claration d'un entier \"a\", initialis\u00e9 \u00e0 0\n\nif(a&lt;10) //Condition pour entrer dans le si : \"a\" doit \u00eatre strictement inf\u00e9rieur \u00e0 10\n{\n    a=a+1; // Si \"a\" est inf\u00e9rieur \u00e0 10 alors on rajoute 1 \u00e0 \"a\".\n}\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#32-si-alors-sinon-if-else","title":"3.2 Si Alors Sinon : <code>if() else</code>","text":"<p>La condition Si Alors Sinon permet de r\u00e9aliser une ou plusieurs actions si seulement la condition \u00e9nonc\u00e9e est vrai, si ce n'est pas le cas le programme aiguille l'ex\u00e9cution vers le Sinon. La structure de cette condition est donn\u00e9e ci-dessous :</p> <p></p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>int a = 0; //D\u00e9claration d'un entier \"a\", initialis\u00e9 \u00e0 0\n\nif(a&lt;10) //Condition pour entrer dans le si : \"a\" doit \u00eatre strictement inf\u00e9rieur \u00e0 10\n{\n    a=a+1; // Si \"a\" est inf\u00e9rieur \u00e0 10 alors on rajoute 1 \u00e0 \"a\"\n}\nelse\n{\n    a=a-1; // Sinon on enl\u00e8ve 1 \u00e0 \"a\"\n}\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#33-le-choix-multiple-switch-case","title":"3.3 Le choix multiple : <code>switch() case</code>","text":"<p>Le choix multiple permet pour une variable de notre choix, d'aiguiller le programme suivant la valeur que cette variable va prendre. La structure de cette condition est donn\u00e9e ci-dessous :</p> <p></p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>int var_choix = 0; //D\u00e9claration d'un entier \"var_choix\", initialis\u00e9 \u00e0 0\n\nswitch(var_choix) //Mise en place d'un choix multiple pour la variable var_choix\n{\n    case 1: //Actions \u00e0 ex\u00e9cuter dans le cas o\u00f9 var_choix = 1\n             break; //Indication de fin d'instructions pour ce case\n\n    case 2: //Actions \u00e0 ex\u00e9cuter dans le cas o\u00f9 var_choix = 2\n             break; //Indication de fin d'instructions pour ce case\n\n    default: //Actions \u00e0 ex\u00e9cuter dans le cas o\u00f9 var_choix est diff\u00e9rent de tous les cases pr\u00e9c\u00e9dents\n             break; //Indication de fin d'instructions pour ce case\n}\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#4-les-boucles","title":"4. Les boucles","text":""},{"location":"arduino/03-Fonctions_C%2B%2B/#41-tant-que-while","title":"4.1 Tant que : <code>while()</code>","text":"<p>La boucle Tant que permet de r\u00e9p\u00e9ter une suite d'instructions tant que le condition \u00e9nonc\u00e9e au d\u00e9but est vraie. La structure de cette boucle est donn\u00e9e ci-dessous.</p> <p></p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>while(1) //Permet de r\u00e9aliser une boucle infinie \u00e9quivaut \u00e0 \u00e9crire while(1=1)\n{\n    //Suite d'instructions \u00e0 r\u00e9aliser dans la boucle\n}\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#42-faire-tant-que-do-while","title":"4.2 Faire Tant que : <code>do while()</code>","text":"<p>La boucle Faire Tant que permet de r\u00e9p\u00e9ter une suite d'instructions tant que le condition \u00e9nonc\u00e9e \u00e0 la fin est vraie, la suite d'instructions sera r\u00e9alis\u00e9e au moins une fois car le test de la condition ne se fait qu'\u00e0 la fin. La structure de cette boucle est donn\u00e9e ci-dessous.</p> <p></p> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>do\n{\n    //Suite d'instructions \u00e0 r\u00e9aliser dans la boucle\n}while(1); //Permet de r\u00e9aliser une boucle infinie \u00e9quivaut \u00e0 \u00e9crire while(1=1)\n</code></pre>"},{"location":"arduino/03-Fonctions_C%2B%2B/#43-pour-for","title":"4.3 Pour : <code>for()</code>","text":"<p>La boucle Pour permet de r\u00e9p\u00e9ter une suite d'instructions selon une \u00e9volution d\u00e9finie au d\u00e9but. La structure de cette boucle est donn\u00e9e ci-dessous.</p> <p></p> <p>Param\u00e9trage de la boucle <code>for</code>:</p> <ul> <li> <p>Initialisation de la variable de comptage : Exceptionnellement et que dans ce cas bien pr\u00e9cis nous autorisons la   d\u00e9claration de variable au cours du programme. La variable de comptage ici <code>cpt</code> est la variable qui   s'incr\u00e9mentera ou se d\u00e9cr\u00e9mentera \u00e0 chaque passage dans la boucle suivant le pas de comptage choisi, celle-ci est   ici initialis\u00e9e \u00e0 0.</p> </li> <li> <p>Condition de comptage : Nous d\u00e9finissons ici la condition d'ex\u00e9cution de la boucle, dans notre cas nous tournerons   dans le boucle tant que la variable de comptage <code>cpt</code> est inf\u00e9rieure \u00e0 10.</p> </li> <li> <p>Pas de comptage : Ici nous d\u00e9finissons l'\u00e9volution de la variable de comptage <code>cpt</code> lors de chaque passage dans la   boucle. Dans notre cas nous incr\u00e9mentons de 1 \u00e0 chaque passage dans la boucle, <code>cpt++</code> revient \u00e0   coder <code>cpt=cpt+1</code>. Nous aurions pu \u00e9galement d\u00e9cr\u00e9menter de 1 : <code>cpt--</code>, ou bien choisir un pas diff\u00e9rent de   1 : <code>cpt=cpt+3</code>.</p> </li> </ul> <p>Nous donnons ci-dessous un code exemple utilisant cette fonction.</p> <pre><code>for(int cpt=0;cpt&lt;10;cpt++) //Boucle en initialisant cpt \u00e0 0 tant que cpt&lt;10 et incr\u00e9mente de 1 \u00e0 chaque passage\n{\n    //Suite d'instructions \u00e0 r\u00e9aliser dans la boucle\n}\n</code></pre>"},{"location":"arduino/04-Fonctions_Arduino/","title":"Les fonctions Arduino","text":""},{"location":"arduino/04-Fonctions_Arduino/#lire-et-ecrire-sur-les-pins-numeriques","title":"Lire et \u00e9crire sur les pins num\u00e9riques","text":"<p>Les cartes Arduino disposent toutes de pins num\u00e9riques utilisables aussi bien en entr\u00e9es qu'en sorties, nous montrons dans ce cours comment les param\u00e9trer et s'en servir.</p> <p>Nous rappelons ci-dessous l'emplacement des pins num\u00e9riques sur une carte Arduino UNO et MEGA :</p> <p></p>"},{"location":"arduino/04-Fonctions_Arduino/#1-parametrage-du-sens-dutilisation-avec-pinmode","title":"1. Param\u00e9trage du sens d'utilisation avec <code>pinMode()</code>","text":"<p>Une carte Arduino peu importe le mod\u00e8le, dispose de pins num\u00e9riques et de pins analogiques, la premi\u00e8re cat\u00e9gorie de pins contrairement \u00e0 la seconde peut \u00eatre configur\u00e9e, aussi bien en entr\u00e9e qu'en sortie :</p> <ul> <li> <p>Une pin num\u00e9rique est utilis\u00e9e en entr\u00e9e <code>INPUT</code> pour recueillir une information ext\u00e9rieure (un \"1\" ou un \"0\") venant d'un capteur \u00e0 sortie num\u00e9rique, par exemple un bouton poussoir ou un capteur ILS (Reed).</p> </li> <li> <p>Une pin num\u00e9rique est utilis\u00e9e en sortie <code>OUTPUT</code> pour \u00e9crire un niveau logique (un \"1\" ou un \"0\") sur l'entr\u00e9e d'un actionneur, par exemple une led, un relais ou un moteur.</p> </li> </ul> <p>La figure ci-dessous illustre ces deux possibilit\u00e9s, la pin 13 est configur\u00e9e en sortie et la pin 2 en entr\u00e9e :</p> <p></p> <p>La fonction <code>pinMode()</code> \u00e0 coder dans la partie <code>void setup()</code> va nous permettre d'indiquer au micro-contr\u00f4leur le sens d'utilisation de chaque pin. Ci-dessous nous donnons la structure de cette fonction :</p> <p></p> <p>Puis un code exemple de l'utilisation de cette fonction :</p> <pre><code>const int led=13; //D\u00e9claration d'une constante de type entier appel\u00e9e \"led\" et initialis\u00e9e \u00e0 13\nconst int bp=2; //D\u00e9claration d'une constante de type entier appel\u00e9e \"bp\" et initialis\u00e9e \u00e0 2\n\nvoid setup() //Initialisations\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin 13\n    pinMode(bp,INPUT); //Mise en entr\u00e9e de la pin 2\n}\n</code></pre> <p>Warning</p> <p>Comme pr\u00e9cis\u00e9 ci-dessus <code>pinMode()</code> ne s'utilise qu'avec des pins num\u00e9riques (digital). De plus quand une pin a \u00e9t\u00e9 d\u00e9finie en sortie, il est interdit de l'utiliser en entr\u00e9e plus tard dans le programme et vice-versa.</p>"},{"location":"arduino/04-Fonctions_Arduino/#2-utilisation-de-digitalwrite","title":"2. Utilisation de <code>digitalWrite()</code>","text":"<p>La fonction Arduino <code>digitalWrite()</code> permet d'\u00e9crire une information num\u00e9rique (un 0 ou un 1), sur une pin num\u00e9rique. Les niveaux de tension correspondants sont les niveaux TTL :</p> <ul> <li>Un 1 logique vaut 5V</li> <li>Un 0 logique vaut GND (la masse)</li> </ul> <p>Ci-dessous nous donnons la structure de cette fonction :</p> <p></p> <p>Le code ci-dessous allume la led 13 reli\u00e9e \u00e0 la pin 13 (led pr\u00e9sente sur le circuit imprim\u00e9 d'une carte Arduino UNO ou Mega) en se servant de <code>digitalWrite()</code> :</p> <pre><code>const int led=13; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 13 la pin o\u00f9 la led est reli\u00e9e\n\nvoid setup() //Initialisations\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 13\n}\n\nvoid loop() //Programme principal\n{\n    digitalWrite(led,HIGH); //Mise \u00e0 1 de la pin num\u00e9rique 13 d\u00e9sign\u00e9e par la constante led\n}\n</code></pre> <p>M\u00eame exemple mais en se servant d'une variable <code>etat</code> de type <code>boolean</code> contenant le niveau logique servant \u00e0 l'allumage de la led :</p> <pre><code>const int led=13; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 13 la pin o\u00f9 la led est reli\u00e9e\nboolean etat=true; //D\u00e9claration d'une variable \"etat\" de type bool\u00e9en initialis\u00e9e \u00e0 true (soit niveau logique 1)\n\nvoid setup() //Initialisation\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 13\n}\n\nvoid loop() //Programme principal\n{\n    digitalWrite(led,etat); //Mise \u00e0 1 de la pin num\u00e9rique 13 d\u00e9sign\u00e9e par la constante led, l'\u00e9tat de la pin est contenu dans la variable \"etat\"\n}\n</code></pre> <p>Emplacement de la led 13 sur les cartes Arduino UNO et MEGA :</p> <p></p>"},{"location":"arduino/04-Fonctions_Arduino/#3-utilisation-de-digitalread","title":"3. Utilisation de <code>digitalRead()</code>","text":"<p>La fonction Arduino <code>digitalRead()</code> permet de lire une information num\u00e9rique (un 0 ou un 1), sur une pin num\u00e9rique. Les niveaux de tension correspondants sont \u00e9galement des niveaux TTL.</p> <p>Ci-dessous nous donnons la structure de cette fonction :</p> <p></p> <p>{% include important.html content=\"Ne pas oublier de d\u00e9clarer une variable (ici nomm\u00e9e Etat) de type bool\u00e9en <code>boolean</code> qui contiendra le niveau logique de la pin dont vous faites la lecture.\"%}</p> <p>Le code ci-dessous allume la led reli\u00e9e \u00e0 la pin 13 quand le bouton poussoir reli\u00e9e \u00e0 la pin 2 est appuy\u00e9 :</p> <pre><code>const int led=13; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 13 la pin o\u00f9 la led est reli\u00e9e\nconst int bp=2; //D\u00e9claration d'une constante de type int et de nom \"bp\", contenant 2 la pin o\u00f9 le bouton poussoir est reli\u00e9\nboolean etat=false; //D\u00e9claration d'une variable \"etat\" de type bool\u00e9en initialis\u00e9e \u00e0 false (soit niveau logique 0)\n\nvoid setup() //Initialisation\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 13 pour la led\n    pinMode(bp,INPUT); //Mise en entr\u00e9e de la pin num\u00e9rique 2 pour le bouton poussoir\n}\n\nvoid loop() //Programme principal\n{\n    etat=digitalRead(bp); //Lecture de la valeur de la pin 2 : bouton appuy\u00e9 -&gt; etat=1   bouton relach\u00e9 -&gt; etat=0\n    digitalWrite(led,etat); //La led s'allume ou s'\u00e9teint suivant la valeur de \"etat\"\n}\n</code></pre> <p>Montage Arduino pour le code pr\u00e9c\u00e9dent :</p> <p></p>"},{"location":"arduino/04-Fonctions_Arduino/#utiliser-le-can-et-le-pwm","title":"Utiliser le CAN et le PWM","text":"<p>L'environnement Arduino nous permet d'utiliser de mani\u00e8re simple deux fonctions essentielles d'un microcontr\u00f4leur le CAN et le PWM, nous donnons dans ce cours les explications quant \u00e0 leurs param\u00e9trages et leurs utilisations.</p>"},{"location":"arduino/04-Fonctions_Arduino/#1-fonctionnement-du-can-et-utilisation-de-analogread","title":"1. Fonctionnement du CAN et utilisation de <code>analogRead()</code>","text":"<p>Nous rappelons ci-dessous l'emplacement des pins analogiques sur une carte Arduino UNO et MEGA :</p> <p></p>"},{"location":"arduino/04-Fonctions_Arduino/#11-apport-theorique-sur-la-conversion-analogique-numerique","title":"1.1 Apport th\u00e9orique sur la conversion analogique num\u00e9rique","text":"<p>Les cartes Arduino UNO et MEGA disposent toutes deux d'un Convertisseur Analogique Num\u00e9rique de 10 bits int\u00e9gr\u00e9 au micro-contr\u00f4leur, la figure ci-dessous vise \u00e0 expliquer son fonctionnement :</p> <p></p> <p>Une carte Arduino dispose de 6 entr\u00e9es analogiques A0 \u00e0 A5 pour le UNO, 16 de A0 \u00e0 A15 pour le MEGA. L'entr\u00e9e du convertisseur \\(\\(V_{a0}\\)\\) accepte une tension analogiques comprise entre 0 et 5V maximum, qui sera convertie en un nombre binaire N compris entre 0 et 1023.</p> <p>Nous d\u00e9duisons alors la caract\u00e9ristique entr\u00e9e/sortie du CAN :</p> <p></p> <p>Le quantum q est la plage de tension analogique qui permet \u00e0 la sortie N de cro\u00eetre d'une marche quand celle-ci est d\u00e9pass\u00e9e :</p> \\[ q=\\frac{V_{pe}}{2^{n}-1}=\\frac{5}{2^{10}-1}=4.89mV \\] <p>\u00c0 partir de la droite rouge nous obtenons l'\u00e9quation du CAN :</p> \\[ (N)_{10}=\\frac{1023}{5}\\times V_{a0} \\] <p>On peut alors en d\u00e9duire les valeurs \\(N_{min}\\) et \\(N_{max}\\) :</p> \\[ N_{min}=(0000000000)_{2}=(0)_{10} \\] \\[ N_{max}=2^{10}-1=(1111111111)_{2}=(1023)_{10} \\]"},{"location":"arduino/04-Fonctions_Arduino/#12-utiliser-le-can-avec-arduino","title":"1.2 Utiliser le CAN avec Arduino","text":"<p>L'utilisation du CAN avec Arduino est tr\u00e8s simple, il suffit d'utiliser la fonction <code>analogRead()</code>, nous donnons ci-dessous sa structure :</p> <p></p> <p>Le code suivant lit la valeur analogique sur la pin A0 et la convertit en <code>N</code> en utilisant la fonction <code>analogRead</code>. La variable <code>N</code> est ensuite convertie en Volts gr\u00e2ce \u00e0 l'\u00e9quation de la droite du CAN, pour obtenir finalement la variable <code>Va0</code>.</p> <pre><code>const int PinAna=0; //D\u00e9claration d'une constante de type int et de nom \"PinAna\", contenant 0 la pin analogique \u00e0 lire\nfloat VaO=0; //D\u00e9claration d'une variable de type float et de nom \"Vao\", initialis\u00e9e \u00e0 0\nint N=0; //D\u00e9claration d'une variable de type int et de nom \"N\", initialis\u00e9e \u00e0 0\n\nvoid setup() //Initialisation\n{\n//Pas de pinMode pour analogRead()\n}\n\nvoid loop() //Programme principal\n{\n    N=analogRead(PinAna); //Lecture de la valeur Va0 de la pin analogique 0 et conversion en N -&gt; 0&lt;N&lt;1023\n    Vao=(5.0/1023.0)* N; //Conversion de N en Va0 gr\u00e2ce \u00e0 l'\u00e9quation de la droite du CAN\n}\n</code></pre> <p>Warning</p> <p>Ne pas d\u00e9clarer la pin analogique utilis\u00e9e en entr\u00e9e \u00e0 l'aide de <code>pinMode()</code> Arduino le fait de mani\u00e8re automatique sachant que <code>analogRead()</code> ne s'utilise qu'avec des pins analogiques qui ne fonctionnent qu'en entr\u00e9e.</p>"},{"location":"arduino/04-Fonctions_Arduino/#2-fonctionnement-du-pwm-et-utilisation-de-analogwrite","title":"2. Fonctionnement du PWM et utilisation de <code>analogWrite()</code>","text":""},{"location":"arduino/04-Fonctions_Arduino/#21-apport-theorique-sur-la-modulation-de-largeur-dimpulsion-mli","title":"2.1 Apport th\u00e9orique sur la modulation de largeur d'impulsion (MLI)","text":"<p>La MLI aussi appel\u00e9e PWM (Pulse Width Modulation) en Anglais, est une technique permettant de faire varier la valeur moyenne de la tension d'un signal carr\u00e9 en changeant son rapport cyclique. Avant de rentrer dans les d\u00e9tails, revoyons un peu de vocabulaire technique.</p> <p></p> <p>La figure ci-dessus montre un signal carr\u00e9 configur\u00e9 de cette mani\u00e8re :</p> <ul> <li> <p>P\u00e9riode : T = 2ms</p> </li> <li> <p>Fr\u00e9quence : f = \\(\\frac{1}{T}\\) = 500Hz</p> </li> <li> <p>Dur\u00e9e de l'\u00e9tat bas : \\(T_b\\) = 1ms</p> </li> <li> <p>Dur\u00e9e de l'\u00e9tat haut : \\(T_h\\) = 1ms</p> </li> <li> <p>Tension max : \\(V_{max}\\) = \\(\\hat{V}\\) = 5V</p> </li> <li> <p>Tension min : \\(V_{min}\\) = 0V</p> </li> </ul> <p>Nous montrons ici comment calculer sa valeur moyenne :</p> <p></p> <p>Formule de la valeur moyenne \\(&lt;V&gt;\\) pour un signal carr\u00e9 et seulement pour un signal carr\u00e9 :</p> \\[ &lt;V&gt;=\\frac{\\Delta T}{T} \\] <p>O\u00f9 \\(\\Delta T\\) est l'aire du carr\u00e9 bleu :</p> \\[ \\Delta T =V_{max}\\times T_h \\] <p>Nous obtenons alors :</p> \\[ &lt;V&gt;=\\frac{V_{max}\\times T_h}{T} \\] <p>En faisant l'application num\u00e9rique \u00e0 la figure ci-dessus :</p> \\[ &lt;V&gt;=\\frac{5\\times 1\\times 10^{-3}}{2\\times 10^{-3}}=2,5V \\] <p>On trace \u00e0 pr\u00e9sent la valeur moyenne \\(&lt;V&gt;\\) en vert sur la figure :</p> <p></p> <p>Introduisons \u00e0 pr\u00e9sent la notion de rapport cyclique \\(\\alpha\\) qui est essentielle \u00e0 la compr\u00e9hension du fonctionnement d'un PWM :</p> \\[ \\alpha=\\frac{T_h}{T} \\] <p>Le rapport cyclique est un pourcentage : \\(0\\%&lt;\\alpha&lt;100\\%\\)</p> <p>La technique du PWM consiste \u00e0 faire varier le rapport cyclique qui revient \u00e0 faire varier la valeur moyenne du signal. Nous donnons ci-dessous des variations du rapport cyclique du signal carr\u00e9 pr\u00e9c\u00e9dent, tout en gardant la m\u00eame fr\u00e9quence f=500Hz :</p> <ul> <li>Pour \\(\\alpha=0\\%\\)</li> </ul> <p></p> <ul> <li>Pour \\(\\alpha=10\\%\\)</li> </ul> <p></p> <ul> <li>Pour \\(\\alpha=50\\%\\)</li> </ul> <p></p> <ul> <li>Pour \\(\\alpha=90\\%\\)</li> </ul> <p></p> <ul> <li>Pour \\(\\alpha=100\\%\\)</li> </ul> <p></p> <p>Avec une fr\u00e9quence \u00e9lev\u00e9e le composant branch\u00e9 en sortie du PWM ne verra que la valeur moyenne (la droite verte) du signal carr\u00e9 qui est continue.</p> <p>La technique du PWM peut \u00eatre utilis\u00e9e dans les cas suivants :</p> <ul> <li>Faire varier la vitesse d'un moteur \u00e0 courant continu.</li> <li>Faire varier la luminosit\u00e9 d'une led.</li> </ul>"},{"location":"arduino/04-Fonctions_Arduino/#22-utiliser-le-pwm-avec-arduino","title":"2.2 Utiliser le PWM avec Arduino","text":"<p>En environnement Arduino, le PWM s'utilise avec la fonction <code>analogWrite()</code>, nous donnons ci-dessous sa structure :</p> <p></p> <p>Le choix du rapport cyclique avec la fonction <code>analogWrite()</code> se fait sur 8 bits soit une valeur comprise entre 0 -&gt; 0% et 255 -&gt; 100%</p> <p>Le PWM ne s'utilise pas avec n'importe quelle pin ! Il faut que la pin soit num\u00e9rique et que ce soit une pin PWM, nous donnons le num\u00e9ro des pins utilisables avec les cartes Arduino UNO et MEGA ainsi que la fr\u00e9quence dans le tableau suivant :</p> Carte Pins PWM Fr\u00e9quence du PWM UNO 3,5,6,9,10,11 490Hz et 980Hz sur pins 3 et 11 MEGA 2 \u00e0 13, 44 \u00e0 46 490Hz et 980Hz sur pins 3 et 11 <p>Note</p> <p>Les pins num\u00e9riques utilisables en PWM sont not\u00e9es avec un ~ sur les cartes Arduino.</p> <p>Nous donnons ci-dessous un code exemple de l'utilisation de cette fonction :</p> <pre><code>const int PinPWM=3; //D\u00e9claration d'une constante de type int et de nom \"PinPWM\", contenant 3 la pin num\u00e9rique \u00e0 utiliser pour le pwm\n\nvoid setup() //Initialisation\n{\n    pinMode(PinPWM,OUTPUT);//Mise en sortie de la pin num\u00e9rique 3 pour utiliser le pwm\n}\n\nvoid loop() //Programme principal\n{\n    analogWrite(PinPWM,127); //Cr\u00e9ation d'un signal PWM sur la pin num\u00e9rique 3 avec un rapport cyclique de 50%\n}\n</code></pre>"},{"location":"arduino/04-Fonctions_Arduino/#le-port-serie","title":"Le port s\u00e9rie","text":"<p>Le port s\u00e9rie Serial ou encore UART est un protocole de communication filaire, o\u00f9 les donn\u00e9es \u00e0 transmettre sont envoy\u00e9es par paquets de 8 bits. Le port s\u00e9rie est un des moyens qu'a une carte Arduino pour communiquer avec des \u00e9l\u00e9ments externes comme une autre carte ou un ordinateur.</p>"},{"location":"arduino/04-Fonctions_Arduino/#1-fonctionnement-de-luart","title":"1. Fonctionnement de l'UART","text":"<p>L'UART (Universal Asynchronous Receiver Transmitter) est un des p\u00e9riph\u00e9riques du micro-contr\u00f4leur qui vient g\u00e9rer la liaison s\u00e9rie, ce protocole de communication n\u00e9cessite 3 fils. La figure ci-dessous montre le c\u00e2blage n\u00e9cessaire pour une transmission s\u00e9rie par l'UART entre 2 cartes Arduino UNO.</p> <p></p> <p>Les donn\u00e9es transitent par la liaison s\u00e9rie sous forme de paquets de 8bits plus 1 bit de start et 1 bit de stop, nous donnons ci-dessous une trame, exemple d'\u00e9mission par l'UART :</p> <p></p> <p>D\u00e9crivons les \u00e9tapes de cet envoi qui d\u00e9bute \u00e0 gauche du graphe et se termine \u00e0 droite :</p> <ol> <li> <p>La liaison est au repos au niveau \"1\" \u00e0 5V dans un \u00e9tat que l'on apelle \"Idle\" en Anglais.</p> </li> <li> <p>La liaison d\u00e9tecte le d\u00e9but d'\u00e9mission par le passage de l'\u00e9tat Idle \u00e0 \"0\" =&gt; C'est le bit de start.</p> </li> <li> <p>Les 8 bits du message sont envoy\u00e9s en commen\u00e7ant par le bit de poids faible le LSB (Least Significant Bit) et se termine par le bit de poids fort le MSB (Most Significant Bit). Si le message que l'on souhaite envoyer est cod\u00e9 sur plus de 8 bits il sera d\u00e9coup\u00e9 en paquet de 8 obligatoirement.</p> </li> <li> <p>La liaison termine son \u00e9mission par un bit de stop \u00e0 \"1\" avant de retourner \u00e0 l'\u00e9tat Idle.</p> </li> </ol>"},{"location":"arduino/04-Fonctions_Arduino/#2-parametrer-luart-avec-serialbegin","title":"2. Param\u00e9trer l'UART avec <code>Serial.begin()</code>","text":"<p>La fr\u00e9quence d'\u00e9mission soit le nombre de Bauds (bits par seconde) est d\u00e9finie avec la fonction Arduino <code>Serial.begin()</code>, notons que cette dur\u00e9e ne varie pas dans la suite du code une fois qu'on en a fait le param\u00e9trage dans le <code>void setup()</code>. Nous donnons ci-dessous la structure de cette fonction :</p> <p></p> <p>Warning</p> <p>Le protocole de transmission s\u00e9rie \u00e9tant asynchrone l'horloge qui permet de synchroniser les signaux entre l'\u00e9metteur et le r\u00e9cepteur n'est pas transmise. Il faut donc que la fr\u00e9quence d'\u00e9mission soit la m\u00eame sur l'\u00e9metteur et sur le r\u00e9cepteur.</p> <p>Nous donnons ci-dessous un code exemple Arduino pour le param\u00e9trage d'une liaison s\u00e9rie \u00e0 9600 Bauds :</p> <pre><code>void setup()//Initialisations\n{\n  Serial.begin(9600);//Initialisation du port s\u00e9rie avec une fr\u00e9quence d'\u00e9mission de 9600 Bauds\n}\n</code></pre>"},{"location":"arduino/04-Fonctions_Arduino/#3-ecrire-sur-le-port-serie-avec-serialprint-et-serialprintln","title":"3. Ecrire sur le port s\u00e9rie avec <code>Serial.print()</code> et <code>Serial.println()</code>","text":"<p>Deux fonctions permettent d'\u00e9crire simplement des messages sur le port s\u00e9rie d'une carte Arduino :</p> <ul> <li><code>Serial.print()</code> : Permet d'\u00e9crire de multiples choses sur le serial sans se soucier si le contenu de notre message est d'une taille sup\u00e9rieure \u00e0 8 bits. La fonction fait elle m\u00eame le partage en paquets de 8 bits. Nous donnons ci-dessous la structure de cette fonction :</li> </ul> <p></p> <ul> <li><code>Serial.println()</code> : Fait la m\u00eame chose que la fonction pr\u00e9c\u00e9dente mais provoque un renvoi \u00e0 la ligne en fin d'\u00e9mission. Nous donnons ci-dessous la structure de cette fonction :</li> </ul> <p></p> <p>Nous donnons ci-dessous un code exemple complet comprenant l'initialisation du serial et l'utilisation des deux fonctions pr\u00e9c\u00e9dentes :</p> <pre><code>int Tutu=2345; //D\u00e9claration d'un entier initialis\u00e9 \u00e0 2345\nfloat Tomaas=3.14;//D\u00e9claration d'un flottant initialis\u00e9 \u00e0 3.14\n\nvoid setup()//Initialisations\n{\n  Serial.begin(9600);//Initialisation du port s\u00e9rie avec une fr\u00e9quence d'\u00e9mission de 9600 Bauds\n}\n\nvoid loop()//Programme principal\n{\n  Serial.print(\"Ma variable Tutu contient : \");//Ecriture d'une chaine de caract\u00e8res sur le serial\n  Serial.println(Tutu);//Ecriture du contenu de Tutu et retour \u00e0 la ligne\n  Serial.print(\"Ma variable Tomaas contient : \");//Ecriture d'une chaine de caract\u00e8res sur le serial\n  Serial.println(Tomaas);//Ecriture du contenu de Tomaas et retour \u00e0 la ligne\n}\n</code></pre> <p>Une fonction sur l'Arduino IDE appel\u00e9e Moniteur s\u00e9rie permet d'afficher ce que notre carte Arduino \u00e9crit sur le serial gr\u00e2ce \u00e0 la liaison usb. (Les pins Rx et Tx du port s\u00e9rie sont retransmises sur le port USB). Observons ce que notre code produit sur le moniteur s\u00e9rie :</p> <p></p> <p>Le code pr\u00e9c\u00e9dent affiche de mani\u00e8re infinie (Nous rappelons que le <code>void loop()</code> est \u00e9quivalent \u00e0 un <code>while(1)</code>) la premi\u00e8re cha\u00eene de caract\u00e8re, le contenu de la variable Tutu, retourne \u00e0 la ligne puis affiche la seconde cha\u00eene de caract\u00e8res et affiche la variable Tomaas pour \u00e0 nouveau retourner \u00e0 la ligne et recommencer...</p>"},{"location":"arduino/04-Fonctions_Arduino/#autres-fonctions-utiles","title":"Autres fonctions utiles","text":"<p>Cette partie r\u00e9pertorie toutes les autres fonctions que vous pourriez \u00eatre amen\u00e9 \u00e0 utiliser dans vos codes Arduino.</p>"},{"location":"arduino/04-Fonctions_Arduino/#1-faire-une-pause-delay","title":"1. Faire une pause <code>delay()</code>","text":"<p>La fonction delay permet de mettre en pause l'ex\u00e9cution du programme durant le temps donn\u00e9 en milli-secondes. Nous donnons ci-dessous la structure de ce programme :</p> <p></p> <p>Nous donnons ci-dessous un code exemple de l'utilisation de cette fonction :</p> <pre><code>void loop (void)\n{\n  //Bloc d'instructions\n\n  delay(5000);//Pause de 5 secondes\n\n  //Bloc d'instructions  \n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/","title":"Utilisation des modules Grove de Seeed Studio","text":"<p>Les modules Grove de Seeed Studio permettant de prototyper rapidement une solution, seront utilis\u00e9s lors des activit\u00e9s sin.</p>"},{"location":"arduino/05-Modules_Grove/#1-introduction","title":"1. Introduction","text":"<p>Seeed Studio est une entreprise Chinoise bas\u00e9e \u00e0 Shenzhen qui commercialise des produits \u00e9lectroniques pour les Makers. Grove est un syst\u00e8me de modules se branchant sur une carte m\u00e8re appel\u00e9e Grove shield :</p> <ul> <li>Pour Arduino UNO : Grove Base Shield</li> <li>Pour Arduino Mega : Grove Mega Shield</li> </ul> <p>Beaucoup de documentation est disponible sur le Wiki de Seeed Studio allez y jeter un coup d'oeil !</p>"},{"location":"arduino/05-Modules_Grove/#2-comment-connecter-un-module-au-shield-grove","title":"2. Comment connecter un module au shield Grove ?","text":"<p>Ci-dessous le shield Grove Mega qui s'enfiche par dessus une carte Arduino Mega:</p> <p></p> <p>Ce shield dispose de 4 familles de connecteurs :</p> <ul> <li> <p>Les connecteurs sur pins num\u00e9riques commen\u00e7ant par un D qui re\u00e7oivent des modules num\u00e9riques comme le module LED, le bouton poussoir (Button), le capteur d'inclinaison (Tilt Switch) et le bargraphe (LED Bar)</p> </li> <li> <p>Les connecteurs sur pins analogiques commen\u00e7ant pas un A qui re\u00e7oivent des modules analogiques comme le module potentiom\u00e8tre (Rotary Sensor), le capteur de luminosit\u00e9 (Light Sensor) et le capteur de temp\u00e9rature (Temperature Sensor).</p> </li> <li> <p>Les connecteurs i2C IIC sur la carte, au nombre de 3 (tous les m\u00eames, sp\u00e9cificit\u00e9 du bus) permettant de connecter par la liaison s\u00e9rie i2C des composants fonctionnant sur ce bus comme l'\u00e9cran LCD (LCD RGB Backlight)</p> </li> <li> <p>Les connecteurs UART, au nombre de 4 un pour chaque Serial disponible sur l'Arduino MEGA, permettent de connecter des modules utilisant ce type de liaison.</p> </li> </ul> <p>La connexion des modules Grove sur le shield se fait gr\u00e2ce \u00e0 des cordons de 4 fils :</p> <ul> <li>Un fil noir pour la masse not\u00e9 G ou GND sur les modules</li> <li>Un fil rouge pour l'alimentation not\u00e9 Vcc ou V sur les modules</li> <li>Un fil blanc pour un des deux signaux bien souvent ce fil n'est pas utilis\u00e9 et est not\u00e9 NC (Non Connect\u00e9)</li> <li>Un fil jaune pour un des deux signaux not\u00e9 SIG, c'est ce fil qui est utilis\u00e9 principalement pour connecter le module \u00e0 la pin d\u00e9sir\u00e9e.</li> </ul> <p></p> <p>Sur ce sch\u00e9ma nous avons connect\u00e9 le module Light Sensor \u00e0 la pin analogique A0.</p>"},{"location":"arduino/05-Modules_Grove/#3-les-actionneurs","title":"3. Les actionneurs","text":"<p>Les modules actionneurs re\u00e7oivent de l'\u00e9nergie \u00e9lectrique venant de l'Arduino et la transforme, par exemple le module LED re\u00e7oit de l'\u00e9nergie \u00e9lectrique et la transforme en \u00e9nergie lumineuse.</p>"},{"location":"arduino/05-Modules_Grove/#31-le-module-led","title":"3.1 Le module LED","text":"<p>Nous donnons ci-dessous un exemple d'utilisation du module LED, ce code fait clignoter la LED du module Grove LED toutes les secondes qui est connect\u00e9 sur la pin num\u00e9rique 2 :</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin o\u00f9 la led est reli\u00e9e\n\nvoid setup() //Initialisations\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2\n}\n\nvoid loop() //Programme principal\n{\n    digitalWrite(led,HIGH); //Mise \u00e0 1 de la pin num\u00e9rique 2 d\u00e9sign\u00e9e par la constante led\n    delay(1000); //Pause de 1s\n    digitalWrite(led,LOW); //Mise \u00e0 0 de la pin num\u00e9rique 2 d\u00e9sign\u00e9e par la constante led\n    delay(1000); //Pause de 1s\n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/#4-les-capteurs","title":"4. Les capteurs","text":"<p>Les modules capteurs \u00e9mettent un signal \u00e9lectrique (une tension) image de la donn\u00e9e physique (temp\u00e9rature, luminosit\u00e9 ...) qu'ils mesurent.</p>"},{"location":"arduino/05-Modules_Grove/#41-le-module-bouton-poussoir-button","title":"4.1 Le module bouton poussoir : Button","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Button, le comportement est le suivant : L'appui sur le bouton poussoir reli\u00e9 sur la pin num\u00e9rique 3, provoque l'allumage de la led reli\u00e9e sur la pin num\u00e9rique 2. Le rel\u00e2chement provoque son extinction.</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin o\u00f9 la led est reli\u00e9e\nconst int bp=3; //D\u00e9claration d'une constante de type int et de nom \"bp\", contenant 3 la pin o\u00f9 le bouton poussoir est reli\u00e9\nboolean etat=false; //D\u00e9claration d'une variable \"etat\" de type bool\u00e9en initialis\u00e9e \u00e0 false (soit niveau logique 0)\n\nvoid setup() //Initialisation\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\n    pinMode(bp,INPUT); //Mise en entr\u00e9e de la pin num\u00e9rique 3 pour le bouton poussoir\n}\n\nvoid loop() //Programme principal\n{\n    etat=digitalRead(bp); //Lecture de la valeur de la pin 3 : bouton appuy\u00e9 -&gt; etat=1   bouton relach\u00e9 -&gt; etat=0\n    digitalWrite(led,etat); //La led s'allume ou s'\u00e9teint suivant la valeur de \"etat\"\n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/#42-le-module-capteur-dinclinaison-tilt-switch","title":"4.2 Le module capteur d'inclinaison : Tilt Switch","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Tilt Switch, le comportement est le suivant : L'inclinaison du capteur reli\u00e9 sur la pin num\u00e9rique 3, provoque l'allumage de la led reli\u00e9e sur la pin num\u00e9rique 2. Le fait de mettre le capteur \u00e0 l'horizontale provoque son extinction.</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin o\u00f9 la led est reli\u00e9e\nconst int tilt=3; //D\u00e9claration d'une constante de type int et de nom \"bp\", contenant 3 la pin o\u00f9 le bouton poussoir est reli\u00e9\nboolean etat=false; //D\u00e9claration d'une variable \"etat\" de type bool\u00e9en initialis\u00e9e \u00e0 false (soit niveau logique 0)\n\nvoid setup() //Initialisation\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\n    pinMode(tilt,INPUT); //Mise en entr\u00e9e de la pin num\u00e9rique 3 pour le tilt switch\n}\n\nvoid loop() //Programme principal\n{\n    etat=digitalRead(tilt); //Lecture de la valeur de la pin 3 : tilt inclin\u00e9 -&gt; etat=1   tilt horizontal -&gt; etat=0\n    digitalWrite(led,etat); //La led s'allume ou s'\u00e9teint suivant la valeur de \"etat\"\n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/#43-le-module-potentiometre-rotary-sensor","title":"4.3 Le module potentiom\u00e8tre : Rotary Sensor","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Rotary Sensor, le comportement est le suivant : Le module potentiom\u00e8tre est reli\u00e9 \u00e0 la pin analogique 0, le fait de faire tourner celui-ci fait varier la tension \\(V_{a0}\\) entre 0 et 5V sur cette pin. Nous utilisons le CAN pour lire cette tension et la transformer en une information num\u00e9rique N comprise entre 0 et 1023 (sur 10 bits), nous \"re-bornons\" cette information \u00e0 l'aide de la fonction Arduino <code>map()</code> entre 0 et 255 (sur 8 bits) et l'utilisons avec le PWM sur la pin num\u00e9rique 2 pour faire varier la luminosit\u00e9 du module led.</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin num\u00e9rique o\u00f9 la led est reli\u00e9e\nconst int rotary_sensor=0; //D\u00e9claration d'une constante de type int et de nom \"rotary_sensor\", contenant 0 la pin analogique o\u00f9 le potentiom\u00e8tre est reli\u00e9\n\nint N=0; //D\u00e9claration d'une variable enti\u00e8re appel\u00e9e N est initialis\u00e9e \u00e0 0 pour stocker la sortie du CAN\n\nvoid setup() //Initialisation\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\n}\n\nvoid loop() //Programme principal\n{\n    N=analogRead(rotary_sensor); //Conversion Analogique -&gt; Num\u00e9rique de la tension Va0 -&gt; N\n    N=map(N,0,1023,0,255); //Rebornage de 0&lt;N&lt;1023 en 0&lt;N&lt;255\n    analogWrite(led,N); //La luminosit\u00e9 de la led varie en fonction de N et donc de Va0\n}\n</code></pre>"},{"location":"arduino/05-Modules_Grove/#44-le-module-ldr-light-sensor","title":"4.4 Le module LDR : Light Sensor","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Light Sensor, le comportement est le suivant : Le module LDR est reli\u00e9 \u00e0 la pin analogique 0, le fait de faire varier la luminosit\u00e9 (cacher ou d\u00e9voiler le capteur) fait varier la tension \\(V_{a0}\\) entre 0 et 5V sur cette pin. Nous utilisons le CAN pour lire cette tension et la transformer en une information num\u00e9rique N comprise entre 0 et 1023 (sur 10 bits), nous \"re-bornons\" cette information \u00e0 l'aide de la fonction Arduino <code>map()</code> entre 0 et 255 (sur 8 bits) et l'utilisons avec le PWM sur la pin num\u00e9rique 2 pour faire varier la luminosit\u00e9 du module led. Cette fois-ci une forte luminosit\u00e9 entra\u00eenera une extinction de la led et une faible luminosit\u00e9 un \u00e9clairement maximal.</p> <pre><code>const int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin num\u00e9rique o\u00f9 la led est reli\u00e9e\nconst int light_sensor=0; //D\u00e9claration d'une constante de type int et de nom \"light_sensor\", contenant 0 la pin analogique o\u00f9 la LDR est reli\u00e9e\n\nint N=0; //D\u00e9claration d'une variable enti\u00e8re appel\u00e9e N est initialis\u00e9e \u00e0 0 pour stocker la sortie du CAN\n\nvoid setup() //Initialisation\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\n}\n\nvoid loop() //Programme principal\n{\n    N=analogRead(light_sensor); //Conversion Analogique -&gt; Num\u00e9rique de la tension Va0 -&gt; N\n    N=map(N,0,1023,255,0); //Rebornage de 0&lt;N&lt;1023 en 0&lt;N&lt;255 avec inversion pour 0 -&gt;255 pour 1023-&gt;0\n    analogWrite(led,N); //La luminosit\u00e9 de la led varie en fonction de N et donc de Va0\n}\n</code></pre> <p>Info</p> <p>Il est possible que la tension de la LDR m\u00eame avec une forte luminosit\u00e9 ne fasse pas monter la valeur N \u00e0 1023, il s'agit donc de regarder la valeur max r\u00e9elle de N (\u00e0 l'aide du Serial par exemple) pour ajuster le rebornage dans <code>map()</code>.</p>"},{"location":"arduino/05-Modules_Grove/#45-le-module-temperature-temperature-sensor","title":"4.5 Le module temp\u00e9rature : Temperature Sensor","text":"<p>Nous donnons ci-dessous un code exemple de l'utilisation du module Temperature Sensor, le comportement est le suivant : Le module temp\u00e9rature est reli\u00e9 \u00e0 la pin analogique 0, le fait de faire monter la temp\u00e9rature au dessus de 30\u00b0C allume le module led reli\u00e9 sur la pin num\u00e9rique 2. Faire descendre la temp\u00e9rature en dessous provoque l'extinction de la led.</p> <pre><code>#include &lt;math.h&gt; //Ajout de la biblioth\u00e8que C/C++ math.h pour utiliser la fonction logarithme d\u00e9cimal : log()\n\n//Constantes prises sur la documentation du Wiki de Seeed Studio\nconst int B=4275; //B valeur de la LDR en Ohms\nconst int R0 = 100000; //R0 = 100k\n\nconst int led=2; //D\u00e9claration d'une constante de type int et de nom \"led\", contenant 2 la pin num\u00e9rique o\u00f9 la led est reli\u00e9e\nconst int temperature_sensor=0; //D\u00e9claration d'une constante de type int et de nom \"temperature_sensor\", contenant 0 la pin analogique o\u00f9 le capteur de temp\u00e9rature est reli\u00e9\n\nint N=0; //D\u00e9claration d'une variable enti\u00e8re appel\u00e9e N est initialis\u00e9e \u00e0 0 pour stocker la sortie du CAN\nfloat R=0; //D\u00e9claration d'une variable flottante appel\u00e9e R est initialis\u00e9e \u00e0 0 pour calculer la temp\u00e9rature\nfloat temperature=0; //D\u00e9claration d'une variable flottante appel\u00e9e R est initialis\u00e9e \u00e0 0 pour stocker la valeur de la temp\u00e9rature\n\nvoid setup() //Initialisation\n{\n    pinMode(led,OUTPUT); //Mise en sortie de la pin num\u00e9rique 2 pour la led\n}\n\nvoid loop() //Programme principal\n{\n    N=analogRead(temperature_sensor); //Conversion Analogique -&gt; Num\u00e9rique de la tension Va0 -&gt; N\n\n    //Calcul de la temperature suivant la doc du Wiki de Seeed Studio\n    R=1023.0/((float)N)-1.0;\n    R=100000.0*R;\n    temperature=1.0/(log(R/100000.0)/B+1/298.15)-273.15; //calcul de la temperature suivant la doc\n\n    if(temperature&gt;30)\n    {\n        digitalWrite(led,HIGH); //Allumage de la led si temperature &gt; 30\n    }\n    else\n    {\n        digitalWrite(led,LOW); //Extinction de la led si temperature &lt; 30\n    }\n}\n</code></pre> <p>Note</p> <p>La biblioth\u00e8que math.h est d\u00e9j\u00e0 pr\u00e9-ajout\u00e9e dans l'IDE Arduino inutile de chercher o\u00f9 la t\u00e9l\u00e9charger.</p>"},{"location":"arduino/05-Modules_Grove/#5-lafficheur-lcd","title":"5. L'afficheur LCD","text":"<p>Ce module est un \u00e9cran LCD noir et blanc de 2 lignes et 16 colonnes, un r\u00e9tro-\u00e9clairage fonctionnant \u00e0 l'aide de leds RGB est disponible.</p> <p>Info</p> <p>Ce module fonctionne gr\u00e2ce \u00e0 la liaison i2C, il est donc n\u00e9cessaire de choisir un connecteur i2C sur le shield Grove.</p>"},{"location":"arduino/05-Modules_Grove/#51-la-bibliotheque-rgb_lcdh","title":"5.1 La biblioth\u00e8que <code>rgb_lcd.h</code>","text":"<p>L'ajout d'une biblioth\u00e8que \u00e0 l'IDE Arduino est n\u00e9cessaire \u00e0 l'utilisation du module LCD RGB Backlight, celle-ci est disponible sur le Github de Seeed Studio : lien</p> <p></p> <p>Ensuite, ajoutez le fichier .zip \u00e0 l'IDE Arduino :</p> <p></p> <p>Il suffit d'inclure \u00e0 pr\u00e9sent la biblioth\u00e8que au d\u00e9but du code Arduino de cette mani\u00e8re :</p> <pre><code>#include &lt;Wire.h&gt; //Ajout de la biblioth\u00e8que i2c pour utiliser le lcd\n#include \"rgb_lcd.h\" //Ajout de la biblioth\u00e8que du lcd\n</code></pre> <p>Info</p> <p>Ne pas oublier d'ajouter \u00e9galement la biblioth\u00e8que <code>Wire.h</code> pour utiliser la liaison i2C.</p>"},{"location":"arduino/05-Modules_Grove/#52-initialisation-du-lcd-avec-lcdbegin","title":"5.2 Initialisation du lcd avec <code>lcd.begin()</code>","text":"<p>Nous donnons ci-dessous un code exemple de l'initialisation de l'\u00e9cran Grove RGB LCD :</p> <p><pre><code>rgb_lcd lcd; //Constructeur rgb_lcd pour l'objet lcd\n\nvoid setup() //Initialisations\n{\n    lcd.begin(16, 2); //Initialisation du lcd de 16 colonnes et 2 lignes\n}\n</code></pre> {% include note.html content=\" Le langage C++ est un langage orient\u00e9 objet, un principe de programmation complexe que nous n'allons pas aborder ici. Le constructeur est en quelque sorte la mani\u00e8re de d\u00e9clarer un objet, dans notre cas nous d\u00e9clarons un objet <code>lcd</code> de type <code>rgb_lcd</code>.\"%}</p>"},{"location":"arduino/05-Modules_Grove/#ecrire-ou-lon-veut-avec-lcdsetcursor","title":"\u00c9crire o\u00f9 l'on veut avec <code>lcd.setCursor()</code>","text":"<p>L'\u00e9cran lcd du module Grove RGB LCD dispose de 16 colonnes et 2 lignes, si on ne pr\u00e9cise rien quand on code l'instruction permettant d'\u00e9crire des choses dessus, la colonne 0 et la ligne 0 sont prisent en d\u00e9faut ce qui a pour cons\u00e9quence d'\u00e9crire en haut \u00e0 gauche :</p> <p></p> <p>Mais comment fait-on si on souhaite commencer \u00e0 \u00e9crire au milieu ? Il suffit d'utiliser la fonction <code>lcd.setCursor()</code>, dont nous expliquons le fonctionnement ci-dessous :</p> <p></p>"},{"location":"arduino/05-Modules_Grove/#53-tout-effacer-avec-lcdclear","title":"5.3 Tout effacer avec <code>lcd.clear()</code>","text":"<p>La fonction <code>lcd.clear()</code> permet d'effacer enti\u00e8rement l'\u00e9cran lcd, nous donnons la structure de cette fonction ci-dessous :</p> <p></p>"},{"location":"arduino/05-Modules_Grove/#54-ecrire-avec-lcdprint","title":"5.4 \u00c9crire avec <code>lcd.print()</code>","text":"<p>La fonction <code>lcd.print()</code> permet d'\u00e9crire ce que l'on veut sur le lcd mais ne g\u00e8re pas le d\u00e9passement (\u00e9crire au del\u00e0 des 16 colonnes et 2 lignes), c'est au d\u00e9veloppeur de v\u00e9rifier deux fois que ce qu'il souhaite \u00e9crire tienne bien dans la place impartie. Nous donnons la structure de cette fonction ci-dessous :</p> <ul> <li>Pour \u00e9crire une cha\u00eene de caract\u00e8res :</li> </ul> <p></p> <ul> <li>Pour \u00e9crire le contenu d'une variable :</li> </ul> <p></p> <p>Nous donnons ci-dessous un code exemple complet de l'utilisation de <code>lcd.print()</code> et montrons le r\u00e9sultat sur l'\u00e9cran lcd :</p> <p><pre><code>#include &lt;Wire.h&gt; //Ajout de la biblioth\u00e8que i2c pour utiliser le lcd\n#include \"rgb_lcd.h\" //Ajout de la biblioth\u00e8que du lcd\n\nrgb_lcd lcd;  //Constructeur rgb_lcd pour l'objet lcd\n\nint cpt=0; //D\u00e9claration d'un entier \"cpt\" initialis\u00e9 \u00e0 0 pour compter le nombre de cycles d'affichages\n\nvoid setup() //Initialisations\n{\n    lcd.begin(16, 2); //Initialisation du lcd de 16 colonnes et 2 lignes    \n}\n\nvoid loop() //Programme principal\n{\n    lcd.setCursor(0,0); //On commence \u00e0 \u00e9crire en haut \u00e0 gauche\n    lcd.print(\"hello, world!\"); //On \u00e9crit \"hello, world!\"\n    lcd.setCursor(0,1); //On se met sur la ligne du bas \u00e0 gauche\n    lcd.print(\"STI2D SIN\"); //On \u00e9crit \"STI2D SIN\"\n    delay(3000); //On attend 3s\n    lcd.clear(); //On efface le lcd\n\n    lcd.setCursor(0,0); //On commence \u00e0 \u00e9crire en haut \u00e0 gauche\n    lcd.print(\"Lycee GT\"); //On \u00e9crit \"Lycee LGT\"\n    lcd.setCursor(0,1); //On se met sur la ligne du bas \u00e0 gauche\n    lcd.print(\"L.Rascol Albi\"); //On \u00e9crit \"L.Rascol Albi\"\n    delay(3000); //On attend 3s\n    lcd.clear(); //On efface le lcd\n\n    lcd.setCursor(0,0); //On commence \u00e0 \u00e9crire en haut \u00e0 gauche\n    lcd.print(\"Affichage : \"); //On \u00e9crit \"Affichage : \"\n    lcd.setCursor(13,0); //On se met sur la 13 \u00e8me colonne de la premi\u00e8re ligne\n    lcd.print(cpt); //On \u00e9crit le contenu de la variable cpt\n    delay(3000); //On attend 3s\n    lcd.clear(); //On efface le lcd\n\n    cpt++ //On incr\u00e9mente de 1 la variable cpt\n}\n</code></pre> </p>"},{"location":"arduino/05-Modules_Grove/#55-changer-la-couleur-du-retro-eclairage-avec-lcdsetrgb","title":"5.5 Changer la couleur du r\u00e9tro-\u00e9clairage avec <code>lcd.setRGB()</code>","text":"<p>Le module LCD RGB Backlight comme son nom l'indique contient des leds RGB pour Red Green Blue. En faisant varier l'intensit\u00e9 de chaque composante nous pouvons choisir la couleur du r\u00e9tro-\u00e9clairage parmi une infinit\u00e9. Nous donnons ci-dessous la structure de la fonction <code>lcd.setRGB()</code> \u00e0 param\u00e9trer dans le <code>void setup()</code>.</p> <p></p> <p>L'intensit\u00e9 de chaque couleur se code sur 8 bits, soit une valeur entre 0 et 255. Nous donnons ci-dessous un code exemple pour un \u00e9clairage en rouge et montrons le r\u00e9sultat sur l'\u00e9cran lcd :</p> <p><pre><code>#include &lt;Wire.h&gt; //Ajout de la biblioth\u00e8que i2c pour utiliser le lcd\n#include \"rgb_lcd.h\" //Ajout de la biblioth\u00e8que du lcd\n\nrgb_lcd lcd;  //Constructeur rgb_lcd pour l'objet lcd\n\nvoid setup() //Initialisations\n{\n    lcd.begin(16, 2); //Initialisation du lcd de 16 colonnes et 2 lignes\n    lcd.setRGB(255,0,0); //Configuration de l'\u00e9clairage en rouge\n}\n\nvoid loop() //Programme principal\n{\n    lcd.setCursor(0,0); //On commence \u00e0 \u00e9crire en haut \u00e0 gauche\n    lcd.print(\"hello, world!\"); //On \u00e9crit \"hello, world!\"\n    lcd.setCursor(0,1); //On se met sur la ligne du bas \u00e0 gauche\n    lcd.print(\"STI2D SIN\"); //On \u00e9crit \"STI2D SIN\"           \n}\n</code></pre> </p>"},{"location":"arduino/06-Creer_une_macro/","title":"Cr\u00e9ation d'une macro ou sous-programme en environnement C/C++","text":"<p>Une macro aussi appel\u00e9e sous-programme ou fonction est une suite d'instructions d\u00e9finies \u00e0 l'avance, pouvant \u00eatre ex\u00e9cut\u00e9es \u00e0 l'infini. Une macro est utilis\u00e9e pour, par exemple simplifier le code en limitant les r\u00e9p\u00e9titions.</p>"},{"location":"arduino/06-Creer_une_macro/#1-ou-declarer-sa-macro","title":"1. O\u00f9 d\u00e9clarer sa macro ?","text":"<p>Les d\u00e9clarations de macros doivent \u00eatre faites juste apr\u00e8s les d\u00e9clarations de variables globales, dans un code Arduino, comme le montre l'exemple ci-dessous.</p> <pre><code>/**************************************************************************************************\nNom ......... : Projet_Alarme_Emission_433.ino\nRole ........ : Transmet en 433MHz gr\u00e2ce \u00e0 la biblioth\u00e8que VirtualWire une cha\u00eene de\n                caract\u00e8re sur la pin 12 de l'Arduino Mega 2560\n                * Dans le cas normal envoi :\"Repos_capteur_ILS\"\n                * Dans le cas d'un front montant sur CapteurPin envoi : \"Alerte_capteur_ILS\"\nAuteur ...... : J.Serrand\nMail ........ : joris.serrand@rascol.net\nVersion ..... : V0.0 du 17/02/16\nLicence ..... : Copyright (C) 2016  Joris SERRAND\n\n                This program is free software: you can redistribute it and/or modify\n                it under the terms of the GNU General Public License as published by\n                the Free Software Foundation, either version 3 of the License, or\n                (at your option) any later version.\n\n                This program is distributed in the hope that it will be useful,\n                but WITHOUT ANY WARRANTY; without even the implied warranty of\n                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                GNU General Public License for more details.\n\n                You should have received a copy of the GNU General Public License\n                along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\nCompilation . : Avec l'IDE Arduino\n****************************************************************************************************/\n\n//Ajout de biblioth\u00e8ques\n#include &lt;Wire.h&gt; //Insertion de la biblioth\u00e8que pour les fonctions I2C\n\n//D\u00e9clarations de constantes\n#define bp 10 //D\u00e9claration d'une constante appel\u00e9e bp de valeur 10\nconst float pi=3.14; //D\u00e9claration d'une constante de type float et de nom \"pi\" initialis\u00e9e \u00e0 3.14\n\n//D\u00e9claration de variables\nint cpt = 0; //D\u00e9claration d'un entier de nom \"cpt\" initialis\u00e9 \u00e0 0\nfloat vitesse = 10.5; //D\u00e9claration d'un flottant de nom \"vitesse\" initialis\u00e9 \u00e0 10.5\n\n//D\u00e9claration de macros\nint ma_macro(float toto)\n{\n  //Instructions\n}\n\nvoid setup()\n{\n  //Initialisations\n}\n\nvoid loop()\n{\n  //Programme principal\n}\n</code></pre>"},{"location":"arduino/06-Creer_une_macro/#2-comment-creer-une-macro","title":"2. Comment cr\u00e9er une macro ?","text":""},{"location":"arduino/06-Creer_une_macro/#21-creation-dune-macro-sans-parametres-dentree-ni-de-sortie","title":"2.1 Cr\u00e9ation d'une macro sans param\u00e8tres d'entr\u00e9e ni de sortie","text":"<p>La figure ci-dessous montre l'exemple de la d\u00e9claration d'une telle macro, de mani\u00e8re algorithmique, puis en langage C/C++ : </p> <p>Ci-dessous l'exemple des macros <code>allumer_led_13()</code> et <code>eteindre_led_13()</code>, qui respectivement allume et \u00e9teint la led 13 lorsque on les appelle dans le programme principal <code>loop</code> :</p> <pre><code>//D\u00e9claration de macros\n\nvoid allumer_led_13(void)//D\u00e9claration d'une macro sans param\u00e8tre d'entr\u00e9e ni de sortie\n{\n  digitalWrite(13,HIGH); //Allumage de la led 13\n}\n\n\nvoid eteindre_led_13(void)//D\u00e9claration d'une macro sans param\u00e8tre d'entr\u00e9e ni de sortie\n{\n  digitalWrite(13,LOW); //Extinction de la led 13\n}\n\n//Initialisations\nvoid setup()\n{\n  pinMode(13,OUTPUT); //Param\u00e9trage de la pin 13 en sortie\n}\n\n//Programme principal\nvoid loop()\n{\n  allumer_led_13(); //Appel de la macro allumer_led_13()\n  delay(1000);\n  eteindre_led_13(); //Appel de la macro eteindre_led_13()\n  delay(1000);\n}\n</code></pre>"},{"location":"arduino/06-Creer_une_macro/#22-creation-dune-macro-avec-parametre-dentree","title":"2.2 Cr\u00e9ation d'une macro avec param\u00e8tre d'entr\u00e9e","text":"<p>La figure ci-dessous montre l'exemple de la d\u00e9claration d'une telle macro, de mani\u00e8re algorithmique, puis en langage C/C++ :</p> <p></p> <p>Ci dessous nous donnons un exemple d'utilisation d'une telle macro : <code>affichage_mess_serial(boolean presence)</code>, permet d'envoyer sur le serial le message : <code>\"Presence d eau\"</code> quand le param\u00e8tre d'entr\u00e9e <code>presence</code> vaut <code>1</code> et <code>\"Capteur hors d eau\"</code> quand le param\u00e8tre vaut <code>0</code>.</p> <pre><code>//D\u00e9claration de macros\nvoid affichage_mess_serial(boolean presence) //Prototype de la macro\n{\n  if(presence)\n    Serial.println(\"Presence d eau\"); //Si le param\u00e8tre d\u2019entr\u00e9e \"presence\" vaut 1 affichage de \"Presence d eau\"\n  else\n    Serial.println(\"Capteur hors d eau\"); //Si le param\u00e8tre d\u2019entr\u00e9e \"presence\" vaut 0 affichage de \"Capteur hors d eau\"\n}\n\n//Initialisations\nvoid setup()\n{\n  Serial.begin(9600); //Initialisation du port s\u00e9rie \u00e0 9600 bauds\n}\n\n//Programme principal\nvoid loop()\n{\n  affichage_mess_serial(0); //Appel de la macro avec le param\u00e8tre d'entr\u00e9e \u00e0 0, aura pour effet d'envoyer sur le serial le message : \"Capteur hors d eau\"\n\n}\n</code></pre>"},{"location":"arduino/06-Creer_une_macro/#23-creation-dune-macro-avec-parametres-dentree-et-de-sortie","title":"2.3 Cr\u00e9ation d'une macro avec param\u00e8tres d'entr\u00e9e et de sortie","text":"<p>La figure ci-dessous montre l'exemple de la d\u00e9claration d'une telle macro, de mani\u00e8re algorithmique, puis en langage C/C++ :</p> <p> </p> <p>Ci-dessous la macro <code>float hypotenuse(float a, float b)</code> renvoi un flottant qui correspond \u00e0 l\u2019hypot\u00e9nuse calcul\u00e9e suivant les deux param\u00e8tres donn\u00e9s en entr\u00e9e, soit les longueurs des deux c\u00f4t\u00e9s a et b.</p> <pre><code>//D\u00e9claration de macros\nfloat hypotenuse(float a,float b)\n{\n  float c=0; //D\u00e9claration de la variable c initialis\u00e9e \u00e0 0, qui contiendra le r\u00e9sultat\n\n  c=(pow(a,2)+pow(b,2)); //Calcul de la somme des deux c\u00f4t\u00e9s au carr\u00e9\n  c=sqrt(c); //Calcul de la racine carr\u00e9 du r\u00e9sultat pr\u00e9c\u00e9dent\n\n  return c; //Renvoi le contenu de la variable c en param\u00e8tre de sortie de la macro  \n}\n\n//Initialisations\nvoid setup()\n{\n\n}\n\n//Programme principal\nvoid loop()\n{\n  float hyp=0;\n  hyp=hypotenuse(6,8); //Appel de la macro\n\n\n}\n</code></pre>"},{"location":"arduino/07-interruptions/","title":"Les interruptions en environnement Arduino","text":"<p>L'interruption, ou comment mettre en pause le programme principal pour pouvoir faire ex\u00e9cuter autre chose au microcontr\u00f4leur.</p>"},{"location":"arduino/07-interruptions/#1-ca-sert-a-quoi-une-interruption","title":"1. \u00c7a sert \u00e0 quoi une interruption ?","text":"<p>Une interruption peut se d\u00e9clencher de plusieurs mani\u00e8res :</p> <ul> <li>Sur un \u00e9v\u00e9nement interne : Fin  de comptage d'un timer, fin de d\u00e9codage d'un CAN ...</li> <li>Sur un \u00e9v\u00e9nement externe : Changement d'\u00e9tat d'une pin num\u00e9rique.</li> </ul> <p>Nous nous concentrerons dans cette partie aux interruptions d\u00e9clench\u00e9es par un \u00e9v\u00e9nement externe. Le comportement du microcontr\u00f4leur r\u00e9agissant \u00e0 un tel type d'interruption est le suivant.</p> <ol> <li>Une pin num\u00e9rique param\u00e9tr\u00e9e en entr\u00e9e sur laquelle a \u00e9t\u00e9 programm\u00e9e une interruption, change d'\u00e9tat (passage de 0 \u00e0 1 par exemple).</li> <li>Le programme principal (<code>void loop()</code>) est imm\u00e9diatement arr\u00eat\u00e9, sa position est m\u00e9moris\u00e9e</li> <li>Le microcontr\u00f4leur ex\u00e9cute la macro d'interruption d\u00e9finie au pr\u00e9alable.</li> <li>Le microcontr\u00f4leur reprend le programme principal \u00e0 l'endroit m\u00e9moris\u00e9.</li> </ol> <p>Note</p> <p>Les interruptions sont tr\u00e8s utilis\u00e9es, le fait de pouvoir mettre en pause le programme principal m\u00eame lorsque celui-ci ex\u00e9cute un <code>delay()</code> est tr\u00e8s appr\u00e9ci\u00e9.</p>"},{"location":"arduino/07-interruptions/#2-parametrage-dune-interruption-sur-un-evenement-externe","title":"2. Param\u00e9trage d'une interruption sur un \u00e9v\u00e9nement externe","text":"<p>Le param\u00e9trage de l'interruption se fait dans le <code>void setup()</code> en utilisant la fonction <code>attachInterrupt()</code> de cette mani\u00e8re :</p> <p></p> <p>Warning</p> <p>Toutes le pins ne peuvent pas \u00eatre utilis\u00e9es pour faire des interruptions, pour l'Arduino MEGA se sont les pins : 2, 3, 18, 19, 20, 21 et pour l'Arduino UNO les pins :  2 et 3.</p> <p>Ci-dessous un exemple de param\u00e9trage d'interruption sur la pin num\u00e9rique 2 d'un Arduino MEGA, le d\u00e9clenchement est choisi sur front-montant (rising) :</p> <pre><code>void setup()\n{\n  pinMode(2,INPUT); //D\u00e9claration de la pin 2 en entr\u00e9e\n  attachInterrupt(digitalPinToInterrupt(2),macro_interrupt,RISING); //Param\u00e9trage d'une interruption sur la pin 2\n}\n</code></pre>"},{"location":"arduino/07-interruptions/#3-creation-de-la-macro-dinterruption","title":"3. Cr\u00e9ation de la macro d'interruption","text":"<p>La macro d'interruption est une macro sans param\u00e8tres d'entr\u00e9e ni de sortie, celle-ci doit \u00eatre la plus courte possible. En effet, afin de ne pas saturer la m\u00e9moire du microcontr\u00f4leur qui lors d'une interruption doit m\u00e9moriser les valeurs des variables dans le programme principal, votre macro d'interruption ne doit pas comporter d'instructions gourmandes en m\u00e9moire : appel de fonctions pour le port s\u00e9rie, pour \u00e9crire sur un \u00e9cran lcd ...</p> <p>En g\u00e9n\u00e9ral nous pr\u00e9conisons d'inverser l'\u00e9tat d'un bool\u00e9en aussi appel\u00e9 flag dans cette macro, il s\u2019agira ensuite de regarder l'\u00e9tat de se flag dans le programme principal v\u00e9rifiant si il y a eu, ou non une interruption. Les variables utilis\u00e9es dans une macro d'interruption doivent obligatoirement \u00eatre d\u00e9clar\u00e9 globales et comme volatile.</p> <p>Nous donnons ci-dessous un exemple de cr\u00e9ation de macro d'interruption avec d\u00e9claration d'un flag, ainsi qu'un test sur ce flag dans le programme principal:</p> <pre><code>volatile boolean flag=false; //D\u00e9claration du flag en volatile pour utilisation dans la macro d'interruption\n\nvoid macro_interrupt(void) //Prototype de la macro d'interruption\n{\n  flag=!flag; //Inversion du flag\n}\n\nvoid setup()\n{\n  pinMode(2,INPUT);\n  Serial.begin(9600);\n  attachInterrupt(digitalPinToInterrupt(2),macro_interrupt,RISING);\n}\n\nvoid loop()\n{\n  if (!flag) //Test sur la variable  flag, si flag=0 =&gt; Pas d'interruption, si flag=1 =&gt; Il y a eu une interruption\n  Serial.println(\"Il n'y a pas eu d'interruption\"); //Affichage d'un message sur le serial si pas d'interruption\n  else\n  {\n      Serial.println(\"Il y a eu une interruption\"); //Affichage d'un message sur le serial si interruption\n      flag=false; //remise \u00e0 z\u00e9ro du flag pour la prochaine interruption\n  }  \n}\n</code></pre>"},{"location":"arduino/08-timer/","title":"Utilisation d'un timer","text":"<p>La biblioth\u00e8que flexitimer2 permet une utilisation simplifi\u00e9e du timer du microcontr\u00f4leur, nous expliquons ici son fonctionnement.</p>"},{"location":"arduino/08-timer/#1-la-bibliotheque-flexitimer2","title":"1. La biblioth\u00e8que flexitimer2","text":"<p>Un timer permet de programmer l\u2019ex\u00e9cution d'instructions sur une dur\u00e9e donn\u00e9e. Le param\u00e9trage des timers le l'Atmega2560 fait appel \u00e0 la programmation de registres complexes, l'utilisation de la biblioth\u00e8que flexitimer2 permet de rapidement mettre en place une solution.</p> <p>Malheureusement cette biblioth\u00e8que n'est pas dans la base de donn\u00e9es du gestionnaire, il faut donc l'ajouter manuellement, apr\u00e8s l'avoir t\u00e9l\u00e9charg\u00e9e sur le Github du cr\u00e9ateur : Biblioth\u00e8que flexitimer2</p> <p>Cliquez sur , puis dans l'IDE Arduino allez dans Croquis &gt; Inclure une biblioth\u00e8que &gt; Ajouter la biblioth\u00e8que .ZIP</p>"},{"location":"arduino/08-timer/#2-parametrage-dun-timer","title":"2. Param\u00e9trage d'un timer","text":"<p>Le param\u00e9trage du timer peut se faire n'importe o\u00f9, et plusieurs fois, dans le programme principal <code>loop()</code> ainsi que dans le <code>setup()</code>. Il faut pour ce faire utiliser la fonction <code>FlexiTimer2::set()</code>, le timer d\u00e9clenchera une interruption une fois le temps \u00e9coul\u00e9, il s'agit alors d'indiquer le nom de la macro d'interruption lors de ce param\u00e9trage.</p> <p></p> <p>Pour d\u00e9marrer le timer il suffit d\u2019ex\u00e9cuter la fonction : <code>FlexiTimer2::start()</code> et pour l'arr\u00eater : <code>FlexiTimer2::stop()</code></p>"},{"location":"arduino/08-timer/#3-utilisation-dun-timer","title":"3. Utilisation d'un timer","text":"<p>Le programme ci-dessous param\u00e8tre le timer pour une dur\u00e9e de 10s et allume la led 13 en fin de comptage de ce dernier :</p> <pre><code>#include &lt;FlexiTimer2.h&gt; //Biblioth\u00e8que pour utiliser le timer\n\nvolatile boolean flag=false; //D\u00e9claration de la variable utilis\u00e9e dans la macro d'interruption\n\nvoid macro_interrupt(void)\n{\n  flag=!flag;\n}\n\nvoid setup()\n{\n  pinMode(13,OUTPUT);\n  FlexiTimer2::set(10000,macro_interrupt); //Param\u00e9trage du timer sur 10s\n}\n\nvoid loop()\n{\n  FlexiTimer2::start(); //D\u00e9marrage du timer\n\n  while(!flag) //Attente de la fin de temporisation, du passage \u00e0 1 du flag\n  {\n    digitalWrite(13,LOW);\n  }\n\n  digitalWrite(13,HIGH);\n}\n</code></pre>"},{"location":"arduino/ACT1-InOutNum/","title":"D\u00e9couverte des entr\u00e9es sorties num\u00e9riques","text":""},{"location":"arduino/ACT1-InOutNum/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n\n //Ajout de biblioth\u00e8ques\n\n\n //D\u00e9clarations de constantes\n\n\n //D\u00e9claration de variables\n\n\n void setup()\n {\n     //Ins\u00e9rez ici vos param\u00e8tres\n }\n\n void loop()\n {\n   //Ins\u00e9rez ici votre programme principal\n }\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT1-InOutNum/#1-utilisation-des-sorties-numeriques-sur-une-carte-arduino","title":"1. Utilisation des sorties num\u00e9riques sur une carte Arduino","text":""},{"location":"arduino/ACT1-InOutNum/#11-clignotement-led-13","title":"1.1 Clignotement led 13","text":"<p>Nous souhaitons dans un premier temps faire clignoter la led 13 d'une carte Arduino MEGA. La led devra rester allum\u00e9e 500ms et \u00e9teinte 500ms.</p> <p>Info</p> <p>La led 13 est la led reli\u00e9e \u00e0 la pin 13 soud\u00e9e sur la carte Arduino MEGA ou Arduino UNO comme le montre la figure ci-dessous.</p> <p></p>"},{"location":"arduino/ACT1-InOutNum/#12-utilisation-du-module-grove-led","title":"1.2 Utilisation du module Grove led","text":"<p>\u00c0 pr\u00e9sent utilisez le programme pr\u00e9c\u00e9dent pour faire clignoter la led d'un module LED Grove reli\u00e9 \u00e0 la pin num\u00e9rique 2. Nous utiliserons le m\u00eame cycle de clignotement que tout \u00e0 l'heure soit, 500ms \u00e9teinte / 500ms allum\u00e9e.</p>"},{"location":"arduino/ACT1-InOutNum/#2-utilisation-des-entrees-numeriques-sur-une-carte-arduino","title":"2. Utilisation des entr\u00e9es num\u00e9riques sur une carte Arduino","text":""},{"location":"arduino/ACT1-InOutNum/#21-bouton-poussoir-sans-condition","title":"2.1 Bouton poussoir sans condition","text":"<p>Allumer la led du module Grove de la partie 1 lors d'un appui sur le bouton poussoir. La led est toujours reli\u00e9e \u00e0 la pin num\u00e9rique 2 et le bouton poussoir \u00e0 la pin num\u00e9rique 6. Dans un premier temps, ne pas se servir de la condition <code>if()</code> ou <code>if() else</code>.</p>"},{"location":"arduino/ACT1-InOutNum/#22-bouton-poussoir-avec-condition","title":"2.2 Bouton poussoir avec condition","text":"<p>\u00c0 pr\u00e9sent vous devez faire le m\u00eame exercice que pr\u00e9c\u00e9demment mais en utilisant une condition de type <code>if()</code> ou <code>if() else</code>. Nous utiliserons les m\u00eames pins.</p>"},{"location":"arduino/ACT1-InOutNum/#23-allumage-inverse","title":"2.3 Allumage invers\u00e9","text":"<p>Cette fois-ci il s'agit d'allumer la led quand le bouton poussoir est rel\u00e2ch\u00e9 et de l'\u00e9teindre quand on appui sur celui-ci. Nous utiliserons les m\u00eames pins.</p>"},{"location":"arduino/ACT1-InOutNum/#24-allumage-et-extinction-explicites","title":"2.4 Allumage et extinction explicites","text":"<p>Pour finir, un appui sur le bouton poussoir allumera la led et la laissera allum\u00e9e, un autre appui \u00e9teindra la led et la laissera \u00e9teinte.</p>"},{"location":"arduino/ACT2-Serial/","title":"Exploitation du port s\u00e9rie","text":""},{"location":"arduino/ACT2-Serial/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n\n //Ajout de biblioth\u00e8ques\n\n\n //D\u00e9clarations de constantes\n\n\n //D\u00e9claration de variables\n\n\n void setup()\n {\n     //Ins\u00e9rez ici vos param\u00e8tres\n }\n\n void loop()\n {\n   //Ins\u00e9rez ici votre programme principal\n }\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT2-Serial/#1-transmission-puis-affichage-dun-texte-sur-le-moniteur-serie","title":"1. Transmission puis affichage d'un texte sur le moniteur s\u00e9rie","text":"<p>Nous souhaitons utiliser le Serial (aussi appel\u00e9 UART) d'une carte Arduino MEGA pour afficher le texte suivant :<code>STI2D SIN Rascol, Arduino du basique au complexe.</code> Un retour \u00e0 la ligne sera effectu\u00e9 \u00e0 la fin de la phrase et le texte devra s'afficher en boucle comme le montre l'image ci-dessous :</p> <p></p>"},{"location":"arduino/ACT2-Serial/#2-incrementation-dun-compteur-et-affichage-sur-le-moniteur-serie","title":"2. Incr\u00e9mentation d'un compteur et affichage sur le moniteur s\u00e9rie","text":"<p>Cr\u00e9ez un compteur qui d\u00e9marre \u00e0 zero et s'incr\u00e9mente de 1 \u00e0 chaque passage dans la boucle principale <code>void loop()</code>, affichez l'\u00e9tat de ce compteur \u00e0 chaque passage gr\u00e2ce au moniteur s\u00e9rie, comme le montre l'exemple ci-dessous :</p> <p></p>"},{"location":"arduino/ACT2-Serial/#3-affichage-de-letat-dun-bouton-poussoir-sur-le-moniteur-serie","title":"3. Affichage de l'\u00e9tat d'un bouton poussoir sur le moniteur s\u00e9rie","text":"<p>Pour finir, nous souhaitons afficher l'\u00e9tat d'un bouton poussoir Grove sur le moniteur s\u00e9rie. Quand le bouton poussoir est relach\u00e9 vous devez afficher : <code>Etat bouton poussoir = Relach\u00e9</code>, quand ce dernier est appuy\u00e9 affichez : <code>Etat bouton poussoir = Appuy\u00e9</code>. L'exemple ci-dessous montre le comportement attendu :</p> <p></p>"},{"location":"arduino/ACT3-CAN/","title":"D\u00e9couverte du convertisseur analogique num\u00e9rique","text":""},{"location":"arduino/ACT3-CAN/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n\n //Ajout de biblioth\u00e8ques\n\n\n //D\u00e9clarations de constantes\n\n\n //D\u00e9claration de variables\n\n\n void setup()\n {\n     //Ins\u00e9rez ici vos param\u00e8tres\n }\n\n void loop()\n {\n   //Ins\u00e9rez ici votre programme principal\n }\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT3-CAN/#1-fabrication-dun-voltmetre","title":"1. Fabrication d'un voltm\u00e8tre","text":""},{"location":"arduino/ACT3-CAN/#11-affichage-sur-le-moniteur-serie","title":"1.1 Affichage sur le moniteur s\u00e9rie","text":"<p>Nous souhaitons utiliser le Serial (aussi appel\u00e9 UART) d'une carte Arduino MEGA pour afficher la tension analogique de la pin A0 au dixi\u00e8me pr\u00eat. Nous ferons varier cette tension gr\u00e2ce au module Grove : Rotary Sensor. La figure ci-dessous montre l'affichage attendu sur le moniteur s\u00e9rie :</p> <p></p>"},{"location":"arduino/ACT3-CAN/#12-affichage-sur-un-ecran-lcd","title":"1.2 Affichage sur un \u00e9cran lcd","text":"<p>Nous souhaitons \u00e0 pr\u00e9sent conserver le m\u00eame fonctionnement que pr\u00e9c\u00e9demment, seulement l'affichage se fera sur un \u00e9cran lcd : Grove LCD RGB Backlight. La figure ci-dessous montre l'affichage attendu sur l'\u00e9cran LCD :</p> <p></p>"},{"location":"arduino/ACT3-CAN/#2-affiche-dun-niveau-sous-forme-de-jauge-a-essence","title":"2. Affiche d'un niveau sous forme de jauge \u00e0 essence","text":"<p>Dans cette partie tourner le Grove Rotary Sensor toujours connect\u00e9 \u00e0 l'entr\u00e9e A0 aura pour but de simuler le niveau d'essence d'un r\u00e9servoir. Nous souhaitons ensuite avoir un affichage sur 4 leds de ce niveau, la variation du niveau d'essence (soit la tension sur A0) provoquera l'allumage ou l'extinction des 4 leds. Le comportement attendu est le suivant :</p> <p></p>"},{"location":"arduino/ACT4-PWM/","title":"La fonction modulation de largeur d'impulsions ou PWM","text":""},{"location":"arduino/ACT4-PWM/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n\n //Ajout de biblioth\u00e8ques\n\n\n //D\u00e9clarations de constantes\n\n\n //D\u00e9claration de variables\n\n\n void setup()\n {\n     //Ins\u00e9rez ici vos param\u00e8tres\n }\n\n void loop()\n {\n   //Ins\u00e9rez ici votre programme principal\n }\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT4-PWM/#1-variation-de-luminosite-avec-potentiometre","title":"1. Variation de luminosit\u00e9 avec potentiom\u00e8tre","text":"<p>Nous souhaitons utiliser le PWM d'une carte Arduino UNO pour faire varier la luminosit\u00e9 d'une led connect\u00e9e \u00e0 la pin num\u00e9rique 2, la luminosit\u00e9 se r\u00e9glera en tournant le Grove Rotary Sensor connect\u00e9 en pin A0. Le comportement attendu est le suivant:</p> <ul> <li>Rotary sensor en but\u00e9e gauche = Led \u00e9teinte.</li> <li>Rotary sensor en but\u00e9e droite = Led allum\u00e9e au maximum.</li> </ul>"},{"location":"arduino/ACT4-PWM/#2-variation-de-luminosite-avec-ldr","title":"2. Variation de luminosit\u00e9 avec LDR","text":"<p>Nous souhaitons \u00e0 pr\u00e9sent faire un syst\u00e8me d'\u00e9clairage domotique, toujours avec une led mais en rempla\u00e7ant le Rotary Sensor par un module Grove Light Sensor connect\u00e9 en pin A0, le comportement attendu est le suivant :</p> <ul> <li>Quand le capteur de luminosit\u00e9 est d\u00e9couvert (expos\u00e9 \u00e0 la lumi\u00e8re ambiante) la led doit \u00eatre totalement \u00e9teinte.</li> <li>Quand le capteur de luminosit\u00e9 est occult\u00e9 la led doit \u00eatre allum\u00e9e au maximum.</li> </ul>"},{"location":"arduino/ACT5-Macros/","title":"Cr\u00e9ation et utilisation de macros en langage C/C++","text":""},{"location":"arduino/ACT5-Macros/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n\n //Ajout de biblioth\u00e8ques\n\n\n //D\u00e9clarations de constantes\n\n\n //D\u00e9claration de variables\n\n\n void setup()\n {\n     //Ins\u00e9rez ici vos param\u00e8tres\n }\n\n void loop()\n {\n   //Ins\u00e9rez ici votre programme principal\n }\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT5-Macros/#1-emission-dimpulsions","title":"1. \u00c9mission d'impulsions","text":"<p>Nous souhaitons cr\u00e9er une macro, qui lorsqu'elle est appel\u00e9e envoie le signal suivant sur la pin num\u00e9rique 2 :</p> <p></p> <ul> <li>Le prototype de la macro \u00e0 cr\u00e9er est le suivant : <code>void signal(int tl, int tc)</code>.</li> <li>Le programme principal devra appeler la macro avec ses deux param\u00e8tres d'entr\u00e9e, nous imposons <code>tl&gt;tc</code></li> </ul>"},{"location":"arduino/ACT5-Macros/#2-fabrication-dune-calculatrice","title":"2. Fabrication d'une calculatrice","text":"<p>Nous souhaitons cr\u00e9er une calculatrice dont la saisie des nombres sera effectu\u00e9e avec le clavier et la visualisation des r\u00e9sultats sur le moniteur s\u00e9rie.</p> <p></p> <p>\"Clear Everything\" by Hurock24 is licensed under CC BY-NC-ND 2.0</p>"},{"location":"arduino/ACT5-Macros/#21-creation-des-macros","title":"2.1.  Cr\u00e9ation des macros","text":"<p>Cr\u00e9er les 4 macros suivantes, qui auront pour t\u00e2che la r\u00e9alisation des 4 calculs de base :</p> <ul> <li><code>float addition(float a, float b)</code></li> <li><code>float soustraction(float a, float b)</code></li> <li><code>float multiplication(float a, float b)</code></li> <li><code>float division(float a, float b)</code></li> </ul>"},{"location":"arduino/ACT5-Macros/#21-creation-du-programme-principal","title":"2.1. Cr\u00e9ation du programme principal","text":"<p>Cr\u00e9er le programme principal qui aura pour t\u00e2che :</p> <ul> <li>L'affichage du menu sous la forme suivante :</li> </ul> <p><pre><code>Menu principal\n1-Addition\n2-Soustraction\n3-Multiplication\n4-Division\n</code></pre> * La demande de la saisie des nombres \u00e0 l'utilisateur, sous la forme suivante :</p> <pre><code>Saisissez le premier nombre :\n--\nSaisissez le second nombre :\n--\nR\u00e9sultat :\n--\n</code></pre> <p>Note</p> <p>La saisie de nombres \u00e0 l'aide du clavier et l'acquisition par les fonctions <code>Serial.parseFloat()</code> ou <code>Serial.parseInt()</code> est complexe nous donnons un exemple ci-dessous.</p> <pre><code>/***************************************************************************************************\nNom ......... : Test_serial_calculette.ino\nRole ........ : Envoi de flottants et d'entiers par le serial gr\u00e2ce aux fonctions parseFloat() et parseInt()\nAuteur ...... : J.Serrand\nMail ........ : joris.serrand@rascol.net\nVersion ..... : V0.0 du 27/03/17\nLicence ..... : Copyright (C) 2016  Joris SERRAND\n\n                This program is free software: you can redistribute it and/or modify\n                it under the terms of the GNU General Public License as published by\n                the Free Software Foundation, either version 3 of the License, or\n                (at your option) any later version.\n\n                This program is distributed in the hope that it will be useful,\n                but WITHOUT ANY WARRANTY; without even the implied warranty of\n                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                GNU General Public License for more details.\n\n                You should have received a copy of the GNU General Public License\n                along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\nCompilation . : Avec l'IDE Arduino\n***************************************************************************************************/\n//D\u00e9claration des fonctions\n\n\n/**************************************************************************************************/\nvoid setup()\n{\n    //Initialisation de l'UART\n    Serial.begin(9600);\n\n\n}\n\n/**************************************************************************************************/\nvoid loop()\n{\n\n  float nombre_flottant=0;//D\u00e9claration de la variable qui recevra la saisie du flottant sur le moniteur s\u00e9rie\n  int nombre_entier=0; //D\u00e9claration de la variable qui recevra la saisie de l'entier sur le moniteur s\u00e9rie\n\n  Serial.println(\"Veuillez rentrer un flottant :\");\n\n  while(Serial.available()&lt;=0) //On attend l'\u00e9criture sur le serial\n    {\n\n    }\n\n  if(Serial.available() &gt; 0)//Attente de la r\u00e9ception d'un message\n      {\n        nombre_flottant=Serial.parseFloat();\n        Serial.println(nombre_flottant);\n      }\n\n\n\n Serial.println(\"Veuillez rentrer un entier :\");\n\n  while(Serial.available()&lt;=0) //On attend l'\u00e9criture sur le serial\n    {\n\n    }\n\n  if(Serial.available() &gt; 0)//Attente de la r\u00e9ception d'un message\n      {\n        nombre_entier=Serial.parseInt();\n        Serial.println(nombre_entier);\n      }\n\n\n}\n</code></pre>"},{"location":"arduino/ACT6-Interrupts/","title":"Utilisation des interruptions en environnement Arduino","text":""},{"location":"arduino/ACT6-Interrupts/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n\n //Ajout de biblioth\u00e8ques\n\n\n //D\u00e9clarations de constantes\n\n\n //D\u00e9claration de variables\n\n\n void setup()\n {\n     //Ins\u00e9rez ici vos param\u00e8tres\n }\n\n void loop()\n {\n   //Ins\u00e9rez ici votre programme principal\n }\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT6-Interrupts/#1-clignotement-de-led","title":"1. Clignotement de led","text":"<p>Nous souhaitons cr\u00e9er un programme qui fait clignoter une led de la mani\u00e8re suivante :</p> <ul> <li>500ms ON</li> <li>500ms OFF</li> </ul> <p>L'appui sur un bouton-poussoir d\u00e9clenchera une interruption, celle-ci aura pour effet de stopper le clignotement qui reprendra seulement lors d'un nouvel appui sur celui-ci. R\u00e9alisez le programme principal et la macro d'interruption qui produisent le fonctionnement attendu.</p>"},{"location":"arduino/ACT6-Interrupts/#2-variation-de-frequence-de-clignotement","title":"2. Variation de fr\u00e9quence de Clignotement","text":"<p>Nous reprenons le programme pr\u00e9c\u00e9dent, mais cette fois-ci nous d\u00e9sirons changer la fr\u00e9quence de clignotement de la led lors d'une interruption :</p> <ul> <li>200ms ON</li> <li>200ms OFF</li> </ul>"},{"location":"arduino/ACT7-Timer/","title":"Utilisation d'un timer en environnement Arduino","text":""},{"location":"arduino/ACT7-Timer/#realisation-de-lactivite","title":"R\u00e9alisation de l'activit\u00e9","text":"<p>Pour cela vous devrez imp\u00e9rativement utiliser le squelette du programme Arduino donn\u00e9 ci-dessous :</p> <pre><code> /**************************************************************************************************\n Nom ......... : Clignotement_led_13.ino\n Role ........ : Fait clignoter la led reli\u00e9e \u00e0 la pin 13 d'une carte Arduino MEGA\n                                 Cycle : 500ms OFF; 500ms ON\n Auteur ...... : Votre nom\n Classe ...... : Votre classe\n Etablissement : Lyc\u00e9e Louis Rascol, Albi, FRANCE &lt;http://louis-rascol.entmip.fr/&gt;\n Mail ........ : Votre_mail@e.rascol.net\n Version ..... : V0.0 du xx/xx/16\n Licence ..... : Copyright (C) 2016  Votre nom\n\n                 This program is free software: you can redistribute it and/or modify\n                 it under the terms of the GNU General Public License as published by\n                 the Free Software Foundation, either version 3 of the License, or\n                 (at your option) any later version.\n\n                 This program is distributed in the hope that it will be useful,\n                 but WITHOUT ANY WARRANTY; without even the implied warranty of\n                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                 GNU General Public License for more details.\n\n                 You should have received a copy of the GNU General Public License\n                 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;\n\n Compilation . : Avec l'IDE Arduino\n ****************************************************************************************************/\n\n //Ajout de biblioth\u00e8ques\n\n\n //D\u00e9clarations de constantes\n\n\n //D\u00e9claration de variables\n\n\n void setup()\n {\n     //Ins\u00e9rez ici vos param\u00e8tres\n }\n\n void loop()\n {\n   //Ins\u00e9rez ici votre programme principal\n }\n</code></pre> <p>Pour la suite vous pouvez t\u00e9l\u00e9charger un fichier zip squelette pr\u00e9-rempli : T\u00e9l\u00e9charger</p> <p>Marche \u00e0 suivre :</p> <ol> <li>Faire l'algorithme du programme en utilisant la notation algorithmique normalis\u00e9e.</li> <li>Cr\u00e9er un fichier Arduino et y copier-coller le squelette.</li> <li>Codez votre algorithme ne soyez pas avare en commentaires.</li> <li>T\u00e9l\u00e9versez sur la carte et v\u00e9rifiez le bon fonctionnement.</li> <li>Appelez le professeur pour valider.</li> </ol> <p>Important</p> <p>La validation de l'exercice sera uniquement effectu\u00e9e lors de la pr\u00e9sentation d'un algorithme juste et d'un code Arduino suffisamment comment\u00e9 en fonctionnement.</p>"},{"location":"arduino/ACT7-Timer/#1-clignotement-et-arret-le-temps-desire","title":"1. Clignotement et arr\u00eat le temps d\u00e9sir\u00e9","text":"<p>Dans le programme principal nous souhaitons faire clignoter une led de la mani\u00e8re suivante :</p> <ul> <li>200ms ON</li> <li>200ms OFF</li> </ul> <p>L'appui sur un bouton-poussoir d\u00e9clenchera une interruption qui d\u00e9marrera un timer, durant la temporisation le clignotement sera suspendu. Une fois la temporisation termin\u00e9e le clignotement reprendra.</p>"},{"location":"cpp/00-gitHub/gitHub/","title":"GitHub authentification SSH","text":"<p>GitHub a supprim\u00e9 la possibilit\u00e9 de s'identifier en rentrant son mot de passe web \u00e0 partir du terminal, sur une distribution Linux. Il faudra donc utiliser la m\u00e9thode d'\u00e9change de cl\u00e9 SSH qui est davantage s\u00e9curis\u00e9e.</p>"},{"location":"cpp/00-gitHub/gitHub/#generation-dune-cle-ssh","title":"G\u00e9n\u00e9ration d'une cl\u00e9 SSH","text":"<ol> <li>Sur votre session, ouvrez un terminal.</li> <li>Collez le texte ci-dessous, en rempla\u00e7ant l\u2019e-mail utilis\u00e9 dans l\u2019exemple par votre adresse e-mail GitHub.     <pre><code>ssh-keygen -t ed25519 -C \"your_email@e.rascol.net\"\n</code></pre></li> <li>Lors de la demande de r\u00e9pertoire dans lequel enregistrer votre cl\u00e9, appuyez sur entrer :     <pre><code>&gt; Enter a file in which to save the key (/home/YOU/.ssh/id_ALGORITHM):[Press enter]\n</code></pre></li> <li>\u00c0 l\u2019invite, tapez une phrase secr\u00e8te s\u00e9curis\u00e9e. Ce sera le mot de passe qui s\u00e9curise votre cl\u00e9 priv\u00e9e, sans celui-ci impossible d'utiliser la cl\u00e9.    <pre><code>&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]\n&gt; Enter same passphrase again: [Type passphrase again]\n</code></pre></li> </ol>"},{"location":"cpp/00-gitHub/gitHub/#ajouter-votre-cle-publique-a-github","title":"Ajouter votre cl\u00e9 publique \u00e0 GitHub","text":"<p>Apr\u00e8s avoir g\u00e9n\u00e9r\u00e9 une paire de cl\u00e9s SSH, vous devez ajouter la cl\u00e9 publique \u00e0 GitHub.com afin d'activer l\u2019acc\u00e8s SSH pour votre compte.</p> <ol> <li>Copiez la cl\u00e9 publique SSH dans votre Presse-papiers. <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre>  Copiez la cl\u00e9 affich\u00e9e sur le terminal (tout la sortie de la commande <code>cat</code>, tout ce qui est affich\u00e9 en bleu sur le screenshot)!</li> <li>Dans l\u2019angle sup\u00e9rieur droit d\u2019une page de GitHub, cliquez sur la photo de votre profil, puis sur Param\u00e8tres.</li> <li>Dans la section \u00ab Acc\u00e8s \u00bb de la barre lat\u00e9rale, cliquez sur \ud83d\udd11 Cl\u00e9s SSH et GPG.</li> <li>Cliquez sur Nouvelle cl\u00e9 SSH ou Ajouter une cl\u00e9 SSH.</li> <li>Dans le champ \u00ab Titre \u00bb, ajoutez une \u00e9tiquette descriptive pour la nouvelle cl\u00e9. Par exemple, si vous utilisez un ordinateur portable personnel, vous pouvez nommer cette cl\u00e9 \u00ab Ordinateur portable personnel \u00bb.</li> <li>S\u00e9lectionnez le type de cl\u00e9 : authentification.</li> <li>Dans le champ \u00ab Cl\u00e9 \u00bb, collez votre cl\u00e9 publique.</li> <li>Cliquez sur Ajouter une cl\u00e9 SSH.</li> <li>Refaite la m\u00eame proc\u00e9dure pour une cl\u00e9 en mode signature, vous collerez la m\u00eame cl\u00e9 publique !</li> </ol>"},{"location":"cpp/00-gitHub/gitHub/#cloner-un-repos-avec-ssh","title":"Cloner un repos avec SSH","text":"<p>\u00c0 pr\u00e9sent quand vous devrez cloner un repository \u00e0 partir de GitHub, il faudra choisir l'adresse SSH de celui-ci :</p> <p></p> <ol> <li>Utiliser la commande <code>git clone</code> sur le terminal avec le lien ssh copi\u00e9 sur le repos GitHub : <pre><code>etudiant@VM-Debian-Etu:~$ git clone git@github.com:ciel-ir-rascol/cpp-tp20-revisions-richard-hendricks81.git\n</code></pre></li> <li>R\u00e9pondez <code>yes</code> \u00e0 la demande de connexion : <pre><code>Clonage dans 'cpp-tp20-revisions-richard-hendricks81'...\nThe authenticity of host 'github.com (140.82.121.4)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\n</code></pre></li> <li>Entrez le mot de passe de votre cl\u00e9 SSH d\u00e9fini plus t\u00f4t : <pre><code>Enter passphrase for key '/home/etudiant/.ssh/id_ed25519':\n</code></pre></li> </ol>"},{"location":"cpp/01-IntroCpp/introCpp/","title":"Introduction","text":"<p> Slides projet\u00e9s durant le cours</p>"},{"location":"cpp/02-utilisationIDE/utilisationIDE/","title":"Utilisation d'un IDE","text":"<p> Slides projet\u00e9s durant le cours</p>"},{"location":"cpp/03-variablesConstantes/variablesConstantes/","title":"Variables et constantes","text":"<p> Slideshow</p>"},{"location":"cpp/04-tableauxVecteurs/tableauxVecteurs/","title":"Tableaux et vecteurs","text":"<p> Slideshow</p>"},{"location":"cpp/05-structuresSelectives/structuresSelectives/","title":"Structures s\u00e9lectives","text":"<p> Slideshow</p>"},{"location":"cpp/06-structuresIteratives/structuresIteratives/","title":"Structures it\u00e9ratives","text":"<p> Slideshow</p>"},{"location":"cpp/10-pointeurs/pointeurs/","title":"Pointeurs","text":"<p> Slideshow</p>"},{"location":"cpp/11-classesObjets/classesObjets/","title":"Classes et Objets","text":"<p> Slideshow</p>"},{"location":"cpp/12-constructeursDestructeurs/constructeursDestructeurs/","title":"Constructeurs et Destructeurs","text":"<p> Slideshow</p>"},{"location":"cpp/13-relationsEntreClasses/relationsEntreClasses/","title":"Relations entre classes","text":"<p> Slideshow</p>"},{"location":"linux/","title":"Programmation en environnement GNU-Linux","text":"<p>GNU Linux se veut \u00eatre un syst\u00e8me d'exploitation libre et gratuit qui d\u00e9fend et respecte la vie priv\u00e9e de ses utilisateurs, \u00e0 contre courant de ce que propose aujourd'hui les plus grandes multi-nationales du logiciel. Lors de cette s\u00e9quence nous aborderons les principes de base d'un syst\u00e8me GNU-Linux, son histoire, son architecture logicielle, l'utilisation de la ligne de commande, du r\u00e9seau, du web, et l'application de ces principes sur le micro-ordinateur Raspberry Pi.</p>"},{"location":"linux/#sommaire","title":"Sommaire","text":""},{"location":"linux/#cours","title":"Cours","text":"<ol> <li>Introduction \u00e0 GNU/Linux</li> <li>Le Raspberry Pi</li> <li>Utiliser le terminal</li> <li>G\u00e9rer les permissions en environnement GNU-Linux</li> <li>R\u00e9alisation de scripts Bash</li> </ol>"},{"location":"linux/#activites","title":"Activit\u00e9s","text":"<p>L'ensemble des activit\u00e9s sont r\u00e9alis\u00e9es sur une carte Raspberry Pi avec la distribution Raspbian.</p> <ol> <li>Utiliser le terminal</li> <li>Linux et le r\u00e9seau</li> <li>G\u00e9rer les permissions</li> <li>\u00c9crire des scripts Bash</li> <li>DM de No\u00ebl</li> </ol>"},{"location":"linux/01-Intro/","title":"Introduction \u00e0 GNU Linux","text":"<p><sup>Tux l\u2019embl\u00e8me de Linux d\u00e9ssin\u00e9 par Larry Ewing en 1996</sup></p>"},{"location":"linux/01-Intro/#1-cest-quoi-linux","title":"1- C'est quoi Linux ?","text":"<p>GNU Linux est sp\u00e9cial de part sa diff\u00e9rence avec les syst\u00e8mes d\u2019exploitation dits classiques tels que Mac OSX ou Microsoft Windows. Une des principales diff\u00e9rences r\u00e9side dans le c\u00f4t\u00e9 Open-Source et gratuit de cet OS. En effet Linux nous permet de modifier enti\u00e8rement la composition du syst\u00e8me, pour pouvoir le fa\u00e7onner \u00e0 notre guise le code source, c'est \u00e0 dire la recette de fabrication est rendu disponible \u00e0 l\u2019utilisateur, l\u2019utilisation d\u2019un tel syst\u00e8me rend alors plus souple la programmation et l\u2019exp\u00e9rimentation.</p> <p>A savoir Linux est connu pour sa grande portabilit\u00e9, on peut le retrouver dans des t\u00e9l\u00e9phones portables, des machines \u00e0 laver le linge, des serveurs informatiques, des supercalculateurs, des voitures ou encore des t\u00e9l\u00e9visions.</p> <p>Quelques exemples de syst\u00e8mes utilisant Linux :</p> <ul> <li>Les serveurs web : le site Wikipedia est h\u00e9berg\u00e9 sur un serveur LAMP (Linux Apache MySQL PHP)</li> <li>L'OS Android pour les smartphones</li> <li>Les boxs internet de Orange, Free, ou SFR</li> <li>Les GPS Tomtom</li> </ul>"},{"location":"linux/01-Intro/#2-de-gnu-a-linux","title":"2- De GNU \u00e0 Linux","text":"<p><sup>\"Richard Stallman\" by Leonid Dmitriev (leozub) is licensed under CC BY 3.0</sup></p> <p>Tout commence avec UNIX dont les origines remontent en 1969, c\u2019est un syst\u00e8me qui fonctionne sans interface graphique, en ligne de code, concurrent direct \u00e0 l\u2019\u00e9poque du syst\u00e8me MS-DOS de Microsoft (sorti en 1984). En 1984 Richard Stallman, chercheur en intelligence artificielle au MIT, cr\u00e9a le projet GNU, soit plus ou moins un syst\u00e8me d\u2019exploitation fonctionnant comme UNIX, la seule diff\u00e9rence \u00e9tant qu\u2019UNIX \u00e9tait propri\u00e9taire et payant et GNU lui sera libre et gratuit.</p> <p></p> <p><sup>\"Linus Torvalds\" by Krd is licensed under CC BY-SA 4.0</sup></p> <p>Une autre personne va intervenir dans la cr\u00e9ation de ce nouveau syst\u00e8me, c\u2019est Le Finlandais Linus Torvalds, \u00e9tudiant \u00e0 l\u2019universit\u00e9 de Helsinki, qui entreprend de cr\u00e9er son propre syst\u00e8me d\u2019exploitation, qui a pris son nom (Linus + Unix).Les deux hommes se sont par la suite associ\u00e9s pour cr\u00e9er le syst\u00e8me GNU Linux, Richard Stallman cr\u00e9ant les programmes de base (programme de copie de fichier, de suppression de fichier, \u00e9diteur de texte), Linus Torvalds se lan\u00e7ant dans la cr\u00e9ation du \u00ab c\u0153ur \u00bb du syst\u00e8me d'exploitation : le noyau. Le projet GNU (programmes libres) et Linux (noyau d'OS) ont fusionn\u00e9 pour cr\u00e9er GNU/Linux.</p>"},{"location":"linux/01-Intro/#3-les-distributions-de-linux","title":"3- Les distributions de Linux","text":"<p>Une distribution est en quelque sorte l\u2019emballage de Linux, le coeur du syst\u00e8me GNU Linux, restant le m\u00eame pour toutes. Linux est un syst\u00e8me d\u2019exploitation tr\u00e8s complet, avec de nombreux logiciels disponibles, les distributions ont \u00e9t\u00e9 cr\u00e9\u00e9es pour permette \u00e0 l\u2019utilisateur d\u2019avoir un syst\u00e8me correspondant \u00e0 l\u2019utilisation qu\u2019il fait de sa machine. Toutes les distributions sont compatibles les unes avec les autres, la seule diff\u00e9rence \u00e9tant la prise en main.</p> <p>Parmi les choses variant d\u2019une distribution \u00e0 une autre, on peut citer :</p> <ul> <li>L'installation : elle peut \u00eatre tr\u00e8s simplifi\u00e9e comme tr\u00e8s compliqu\u00e9e.</li> <li>La gestion de l'installation des programmes : Si elle est bien faite et centralis\u00e9e, elle peut rendre l'installation de nouveaux logiciels plus simple que sous Windows.</li> <li>Les programmes pr\u00e9-install\u00e9s sur l\u2019ordinateur.</li> </ul> <p>Il existe plusieurs centaines de distributions Linux, certaines \u00e9tant des forks (copies adapt\u00e9es) de distributions principales, le site internet DistroWatch.com, les recense pratiquement de mani\u00e8re exhaustive. Nous pouvons trouver sur wikip\u00e9dia une timeline sous forme d'arbre g\u00e9n\u00e9alogique des distributions, r\u00e9guli\u00e8rement mis \u00e0 jour :</p> <p></p> <p>Le lien de l'image pour la visualiser en grand</p> <p>Nous donnons ci-dessous le descriptif des principales distributions trouv\u00e9es en d\u00e9buts de branches de la timeline pr\u00e9c\u00e9dente :</p> Distributions Ann\u00e9e de cr\u00e9ation Description 1993 C\u2019est une des seules distributions qui soit g\u00e9r\u00e9e par des d\u00e9veloppeurs ind\u00e9pendants plut\u00f4t que par une entreprise. C'est une des distributions les plus populaires. La distribution qui \u00e9quipe le Raspberry Pi, \u00e0 savoir Raspbian est une sous-distribution de Debian. La distribution Ubuntu que nous utiliserons pour les s\u00e9ances de TP l\u2019est de m\u00eame. 1995 Edit\u00e9e par une entreprise am\u00e9ricaine, cette distribution propri\u00e9taire est c\u00e9l\u00e8bre et tr\u00e8s r\u00e9pandue, notamment sur les serveurs. Fedora est une sous distribution de Red Hat, tr\u00e8s utilis\u00e9e dans le milieu universitaire. 1992 Une distribution c\u00e9l\u00e8bre Allemande, soutenue par l\u2019entreprise Novell. 1993 Une des plus anciennes distributions de Linux, qui existe encore aujourd\u2019hui."},{"location":"linux/02-Raspberry_pi/","title":"Le Raspberry Pi","text":""},{"location":"linux/02-Raspberry_pi/#1-introduction","title":"1. Introduction","text":"<p>Le Raspberry Pi est un micro-ordinateur \u00e0 faible co\u00fbt (environ 40\u20ac), fonction-nant sous Linux, et pas plus grand qu\u2019une carte de cr\u00e9dit. Il est entre autre capable d\u2019afficher des vid\u00e9os en HD (1080p), de servir de poste de bureau-tique/internet, de console de jeu et surtout d\u2019outil d\u2019initiation \u00e0 l\u2019informatique. Gr\u00e2ce \u00e0 ses ports d\u2019entr\u00e9es/sorties mat\u00e9riels, il peut recevoir des informations de capteurs externes, piloter des actionneurs, transmettre des signaux... Ses champs d\u2019applications sont infinis.<sup>1</sup></p>"},{"location":"linux/02-Raspberry_pi/#2-historique-du-raspberry-pi","title":"2. Historique du Raspberry Pi","text":""},{"location":"linux/02-Raspberry_pi/#21-genese-de-lidee","title":"2.1 Gen\u00e8se de l'id\u00e9e","text":"<p><sup>Eben Upton, l'un des inventeurs du Raspberry Pi</sup></p> <p>Voici un extrait traduit en Fran\u00e7ais de l\u2019explication donn\u00e9e sur le site officiel de la fondation Raspberry Pi quant \u00e0 la gen\u00e8se de cette id\u00e9e :</p> <p>\u00ab L'id\u00e9e d'un ordinateur petit et bon march\u00e9 pour l'\u00e9ducation est venue en 2006, alors qu'Eben Upton et ses coll\u00e8gues du laboratoire d'informatique de l'universit\u00e9 de Cambridge, parmi lesquels Rob Mullins, Jack Lang et Alan Mycroft, se pr\u00e9occup\u00e8rent de la baisse r\u00e9guli\u00e8re, ann\u00e9e apr\u00e8s ann\u00e9e, du nombre et du niveau de comp\u00e9tence des candidats souhaitant suivre des \u00e9tudes d'informatique. De la situation des ann\u00e9es 1990 o\u00f9 les candidats qui se pr\u00e9sentaient \u00e9taient des programmeurs amateurs, le paysage des ann\u00e9es 2000 diff\u00e8re grandement : un candidat typique pourra n'avoir fait qu'un peu de design web. \u00bb<sup>2</sup></p> <p>Le constat en 2006 \u00e9tait le suivant :</p> <ul> <li>Une baisse de niveau en informatique des candidats \u00e0 l\u2019universit\u00e9</li> <li>Une formation scolaire inadapt\u00e9e \u00e0 la programmation</li> <li>Des syst\u00e8mes d\u2019exploitation classiques inadapt\u00e9s \u00e0 l\u2019exp\u00e9rimentation</li> <li>Des ordinateurs chers pour faire de la programmation exp\u00e9rimentale</li> </ul> <p>La solution retenue fut alors de cr\u00e9er un micro ordinateur open source et abordable : Le Raspberry Pi</p>"},{"location":"linux/02-Raspberry_pi/#22-chronologie-rapide","title":"2.2 Chronologie rapide","text":"Date \u00c9v\u00e9nement Caract\u00e9ristiques Ao\u00fbt 2011 Impression des 1eres cartes Alpha F\u00e9vrier 2012 Cr\u00e9ation de la distribution Raspbian Avril - Juin 2012 Sortie du Raspberry pi 1 mod\u00e8le B ARM 32bits 700Mhz - 256Mo Septembre 2012 D\u00e9but de la fabrication en Angleterre F\u00e9vrier 2013 Le mod\u00e8le A est disponible ARM 32bits 700Mhz - 256Mo Mai 2013 Cr\u00e9ation d'un shield cam\u00e9ra 5MP - 1080p Juillet 2014 Sortie du mod\u00e8le B+ ARM 32bits 700Mhz - 512Mo Mai 2013 Sortie du mod\u00e8le 2B ARM 32bits 900Mhz QuadCore - 1Go F\u00e9vrier 2016 Sortie du mod\u00e8le 3B ARM 64bits 1.2Ghz QuadCore - 1Go F\u00e9vrier 2016 Sortie du mod\u00e8le 0 ARM 32bits 1Ghz - 512Mo F\u00e9vrier 2017 Sortie du mod\u00e8le 0W ARM 32bits 1Ghz - 512Mo Mars 2018 Sortie du mod\u00e8le 3B+ ARM 64bits 1.4Ghz QuadCore - 1Go Novembre 2018 Sortie du mod\u00e8le 3A+ ARM 64bits 1.4Ghz QuadCore - 512Mo <p>Photo de famille, l'originale est \u00e0 consulter sur le site raspi.tv</p> <p></p>"},{"location":"linux/02-Raspberry_pi/#3-composition-du-raspberry-pi","title":"3. Composition du Raspberry Pi","text":"<p>Le Raspberry pi 3B est l'avant dernier mod\u00e8le \u00e0 se jour, et c\u2019est celui-ci que nous allons utiliser en classe.</p> <p></p>"},{"location":"linux/02-Raspberry_pi/#31-le-soc","title":"3.1 Le SOC","text":"<p>Le SOC (System On a Chip) est une puce n\u2019int\u00e9grant pas seulement un microprocesseur mais aussi d\u2019autres p\u00e9riph\u00e9riques n\u00e9cessaires au fonctionnement d\u2019un ordinateur, tout cela dans un seul bo\u00eetier :</p> <ul> <li>Un microprocesseur</li> <li>Un processeur graphique (GPU)</li> <li>De la RAM</li> <li>Tous les circuits annexes mis en oeuvre dans un syst\u00e8me informatique.</li> </ul>"},{"location":"linux/02-Raspberry_pi/#32-les-entrees-sorties","title":"3.2 Les entr\u00e9es sorties","text":"<p>Le Raspberry Pi dispose de plusieurs connecteurs sur son bo\u00eetier, pour le mod\u00e8le 3B nous avons :</p> <ul> <li>Quatre connecteurs USB 2.0</li> <li>Une connecteur d\u2019alimentation type micro-USB</li> <li>Un port HDMI</li> <li>Un port Ethernet 100 Mbit/s</li> <li>Une entr\u00e9e/sortie audio</li> <li>Un connecteur bus CSI (pour la connexion de la cam\u00e9ra)</li> <li>Un connecteur bus DSI (pour la connexion d\u2019un \u00e9cran)</li> <li>Un GPIO</li> </ul>"},{"location":"linux/02-Raspberry_pi/#33-le-gpio","title":"3.3 Le GPIO","text":"<p>Le GPIO pour General Purpose Input/Output est un interface Entr\u00e9e/Sortie num\u00e9rique enti\u00e8rement programmable. Le Raspberry Pi ne disposant malheureusement pas de CAN ou CNA il faut interfacer une autre carte (Arduino) ou un circuit pour traiter des donn\u00e9es analogiques.</p> <p>Ci-dessous la figure montre le brochage du GPIO pour un Raspberry Pi 3B :</p> <p> <sup>Raspberry PI GPIO from pinout.xyz</sup></p> <p>Warning</p> <p>Le Raspberry Pi et ce pour n\u2019importe quel mod\u00e8le, ne supporte pas une tension d\u2019entr\u00e9e sup\u00e9rieure \u00e0 3.3V sur son GPIO, les niveaux logiques sont donc :</p> <ul> <li>\u00ab 1 \u00bb = 3.3V</li> <li>\u00ab 0 \u00bb = 0V</li> </ul>"},{"location":"linux/02-Raspberry_pi/#4-utilisation-du-raspberry-pi","title":"4. Utilisation du Raspberry Pi","text":""},{"location":"linux/02-Raspberry_pi/#41-os-utilisables-sur-le-raspberry-pi","title":"4.1 OS utilisables sur le raspberry Pi","text":"<p>Le Raspberry Pi  \u00e0 l'origine ne fonctionnait que sur un syst\u00e8me d\u2019exploitation GNU Linux, appel\u00e9 Raspbian, gr\u00e2ce au succ\u00e8s et \u00e0 l'am\u00e9lioration de la carte d'autres fabricants ont adapt\u00e9 leurs syst\u00e8mes pour qu'il puisse fonctionner sur la framboise :</p> <ul> <li>Raspbian : Distribution linux d'origine, bas\u00e9e sur Debian et activement maintenue par la Raspberry Foundation.</li> <li>LibreELEC : Distribution linux sp\u00e9cifique \u00e0 la gestion de contenu multim\u00e9dia (Home-Cin\u00e9ma), utilise le syst\u00e8me Kodi</li> <li>Ubuntu Core : C\u00e9l\u00e8bre distribution Linux, ici adapt\u00e9e pour l'IoT.</li> <li>Windows 10 IoT Core : Le leader mondial a lui succomb\u00e9 \u00e0 la framboise et propose son dernier une version de son dernier OS adapt\u00e9 \u00e0 l'IoT.</li> </ul>"},{"location":"linux/02-Raspberry_pi/#42-installation-de-raspbian","title":"4.2 Installation de Raspbian","text":"<p>Pour toutes les activit\u00e9s au lyc\u00e9e Rascol nous utiliserons l'os Raspbian, le t\u00e9l\u00e9chargement de la derni\u00e8re version se fera sur le site raspberrypi.org</p> <p></p> <p>Suivant l'utilisation d\u00e9sir\u00e9e nous choisirons la version lite ou desktop, bien souvent la version lite qui ne comporte pas d'interface graphique ou \"gui\" est suffisante. En effet, le Raspberry Pi partage son processeur et sa m\u00e9moire pour la partie graphique, en d\u00e9sactivant le gui nous gagnons donc en rapidit\u00e9.</p> <ol> <li>T\u00e9l\u00e9chargez le .zip d\u00e9sir\u00e9e et ne le d\u00e9compressez pas.</li> <li>T\u00e9l\u00e9chargez le logiciel Etcher qui permet de graver de mani\u00e8re fiable des images .iso sur des supports externes (SD,USB)</li> <li>Ins\u00e9rez une carte micro SD de minimum 8Go, une vitesse de 10 est conseill\u00e9e. Le formatage pr\u00e9alable n'est pas n\u00e9cessaire Etcher s'occupe de tout !</li> <li>Dans Etcher choisissez votre fichier .zip et votre carte SD et appuyez sur Flash!</li> </ol> <p></p>"},{"location":"linux/02-Raspberry_pi/#43-premier-demarrage","title":"4.3 Premier d\u00e9marrage","text":"<p>\u26a0\ufe0fLa mise sous tension du Raspberry Pi se fait en dernier\u26a0\ufe0f, il faut au pr\u00e9alable connecter tous les p\u00e9riph\u00e9riques : clavier, souris, \u00e9cran, cordon r\u00e9seau, ins\u00e9rer la carte SD et en dernier l'alimentation. Le Raspberry Pi n'ayant pas de bouton ON/OFF c'est la connexion du c\u00e2ble d'alimentation qui le fera automatique d\u00e9marrer.</p> <p>De la m\u00eame mani\u00e8re l'arr\u00eat se fera en cliquant sur Menu &gt; Shutdown avec le gui ou en tapant la commande <code>sudo poweroff</code> en mode console.</p> <p>Warning</p> <p>Surtout ne jamais retirer la carte SD du Raspberry Pi en cours d'ex\u00e9cution, sous peine de l'endommager d\u00e9finitivement</p> <p>Une fois la framboise d\u00e9marr\u00e9e un nom d'utilisateur et un mot de passe vous seront peut-\u00eatre demand\u00e9s :</p> <pre><code>login : pi\npwd : raspberry\n</code></pre> <p>Info</p> <p>Quand vous tapez un mot de passe dans une console Linux rien ne s'affiche \u00e0 l'\u00e9cran. C'est normal ! C'est une s\u00e9curit\u00e9 suppl\u00e9mentaire, le mot de passe que vous tapez sera bien pris en compte.</p>"},{"location":"linux/02-Raspberry_pi/#44-modification-de-la-disposition-clavier","title":"4.4 Modification de la disposition clavier","text":"<p>Lors du premier d\u00e9marrage avec la distribution Raspbian light, la disposition du clavier est par d\u00e9faut en Anglais (qwerty), nous donnons ci-dessous les \u00e9tapes pour la changer :</p> <ul> <li>Apr\u00e8s vous \u00eatres logg\u00e9 <code>login : pi</code> <code>passwd : raspberry</code>, ouvrez le menu de configuration avec <code>sudo raspi-config</code></li> <li>Allez dans <code>4 Localisation Options</code> --&gt; <code>Change Keyboard Layout</code> --&gt; <code>Generic 105-key</code> --&gt; <code>French</code></li> </ul> <ol> <li> <p>D'apr\u00e8s Raspberry Pi de Christian Tavernier, 2013\u00a0\u21a9</p> </li> <li> <p>Texte de la Raspberry Pi foundation, original en Anglais\u00a0\u21a9</p> </li> </ol>"},{"location":"linux/03-Commandes_bash/","title":"Utiliser le terminal","text":""},{"location":"linux/03-Commandes_bash/#1-le-systeme-de-fichiers-unix","title":"1 - Le syst\u00e8me de fichiers UNIX","text":"<p>L'agencement d'un syst\u00e8me GNU/Linux n'est pas du tout le m\u00eame que celui que l'on a sur Windows, nous ne trouverons pas par exemple la racine du syst\u00e8me \u00e0 l'emplacement <code>C:\\\\</code>.</p> <p></p> <p>Le tableau ci-dessous donne les principaux dossiers de l'arborescence suivis de leur utilisation :</p> Dossier Utilisation <code>/</code> Racine du syst\u00e8me \u00e9quivalent du <code>C:\\\\</code> chez Windows <code>/bin</code> Applications fournies par le syst\u00e8me tels que <code>ls</code>, <code>cd</code>, <code>pwd</code> <code>/dev</code> Fichiers assurant la liaison avec les p\u00e9riph\u00e9riques (disques, cl\u00e9s usb...) <code>/etc</code> Fichiers de param\u00e9trage du syst\u00e8me <code>/home</code> R\u00e9pertoire personnel <code>/proc</code> Informations sur les processus et le noyau Linux <code>/root</code> R\u00e9pertoire du super-utilisateur <code>/tmp</code> Fichiers temporaires <code>/sbin</code> Fichiers binaires du syst\u00e8me <code>/usr</code> Fichiers binaires et commandes utilisateur <code>/lib</code> Biblioth\u00e8que syst\u00e8me partag\u00e9e <code>/media</code> Point de montage des p\u00e9riph\u00e9riques de stockage connect\u00e9s au syst\u00e8me <code>/mnt</code> Point de montage temporaire des partitions et p\u00e9riph\u00e9riques <code>/var</code> Syst\u00e8mes de fichiers variables, comme le contenu web (dossier www), mais aussi les logs <code>/boot</code> Fichiers de d\u00e9marage du syst\u00e8me"},{"location":"linux/03-Commandes_bash/#2-decouverte-du-prompt","title":"2 - D\u00e9couverte du prompt","text":"<p>Le prompt est l'invite de commande qui attend calmement que vous lui demandiez d'effectuer quelque chose en tapant votre commande puis en validant avec la touche entr\u00e9e. Ci-dessous une petite explication :</p> <p></p>"},{"location":"linux/03-Commandes_bash/#3-utilisation-du-manuel","title":"3 - Utilisation du manuel","text":"<p>Tout syst\u00e8me UNIX dispose d'un manuel int\u00e9gr\u00e9 \u00e0 la console, il permet de faire une recherche d\u00e9taill\u00e9e sur l'utilisation d'une commande. Nous pouvons acc\u00e9der \u00e0 ce manuel en tapant : <code>man</code> suivi du nom de la fonction pour laquelle on a besoin d'aide. La sortie se fait en tapant <code>q</code>. Dans la suite du TP, vous devrez vous servir au maximum du manuel avant de demander de l'aide. Ci-dessous un exemple du manuel avec la fonction <code>ls</code> :</p> <p></p>"},{"location":"linux/03-Commandes_bash/#4-se-deplacer-dans-larborescence","title":"4 - Se d\u00e9placer dans l'arborescence","text":""},{"location":"linux/03-Commandes_bash/#lister-le-contenu-dun-repertoire-fichiers-et-dossiers","title":"Lister le contenu d'un r\u00e9pertoire (fichiers et dossiers)","text":"<p>Snippet</p> <p><code>$ ls</code></p> <p>Avec un affichage des fichiers cach\u00e9s :</p> <p>Snippet</p> <p><code>$ ls -a</code></p> <p>Info</p> <p>En environnement GNU/Linux pour cacher un fichier ou un dossier, il suffit de mettre un point, devant son nom.</p> <p>Dans cet exemple nous montrons la diff\u00e9rence entre les commandes <code>ls</code> et <code>ls -a</code>, les fichiers ou dossiers <code>.config</code> <code>.gnupg</code> ou encore <code>.profile</code> sont cach\u00e9s.</p>"},{"location":"linux/03-Commandes_bash/#se-deplacer-dun-repertoire-a-un-autre","title":"Se d\u00e9placer d'un r\u00e9pertoire \u00e0 un autre","text":"<p>Snippet</p> <p><code>$ cd [chemin_du_r\u00e9pertoire]</code></p> <p>Ci-dessous nous nous d\u00e9pla\u00e7ons vers le r\u00e9pertoire <code>/home/osboxes/Desktop</code> :</p> <p>Vous pouvez remarquer dans le prompt le chemin qui change de <code>~</code> vers <code>~/Desktop</code></p> <p>Info</p> <p>Le symbole <code>~</code> dit tilde dans un syst\u00e8me GNU/Linux repr\u00e9sente le home de l'utilisateur, dans le cas de la vid\u00e9o ci-dessus l'utilisateur s'appelant <code>osboxes</code>, le chemin complet de son    home est : <code>/home/osboxes/</code></p>"},{"location":"linux/03-Commandes_bash/#visualiser-le-chemin-du-repertoire-courant","title":"Visualiser le chemin du r\u00e9pertoire courant","text":"<p>Snippet</p> <p><code>$ pwd</code></p> <p>Dans l'exemple ci-dessous nous montrons le chemin courant soit <code>~</code></p>"},{"location":"linux/03-Commandes_bash/#5-utiliser-un-editeur-de-texte-en-ligne-de-commande","title":"5 - Utiliser un \u00e9diteur de texte en ligne de commande","text":"<p>Plusieurs \u00e9diteurs de texte en ligne de commande existent sous environnement GNU/Linux, parmi eux nous pouvons citer les tr\u00e8s connus vim et emacs, la courbe d'apprentissage des ces deux derniers \u00e9tant tr\u00e8s pentue nous pr\u00e9f\u00e9rons d\u00e9buter avec l'\u00e9diteur nano install\u00e9 par d\u00e9faut sur les distributions Ubuntu.</p> <p>Quelques commandes permettant de commencer avec nano :</p> <ul> <li>Pour ouvrir l'\u00e9diteur de texte</li> </ul> <p>Snippet</p> <p><code>$ nano</code></p> <ul> <li>Pour ouvrir un fichier, si le fichier n'existe pas nano le cr\u00e9e apr\u00e8s confirmation d'enregistrement</li> </ul> <p>Snippet</p> <p><code>$ nano [nom_du_fichier]</code></p> <p>Warning</p> <p>Les noms de fichiers ne doivent pas comporter d'espaces, ceux-ci sont en g\u00e9n\u00e9ral remplac\u00e9s par l'underscore not\u00e9 <code>_</code> .</p> <p>L'exemple ci-dessous montre la cr\u00e9ation d'un nouveau fichier avec nano appel\u00e9 : <code>test_nano</code></p> <p>Info</p> <p>Nano propose une liste de fonctions accessibles par raccourcis clavier (voir barre en bas de l'\u00e9cran de nano), le <code>^</code> est \u00e0 remplacer par la touche Ctrl</p> <ul> <li> <p>Par exemple Ctrl-g pour avoir une aide sur les fonctions de nano.</p> </li> <li> <p>Ctrl-x pour quitter nano, avant toute chose l'\u00e9diteur vous demande <code>Save modified buffer (ANSWERING 'No' WILL DESTROY CHANGES) ?</code> tapper <code>y</code> enregistrera votre travail, tapper <code>n</code> le supprimera. Puis nano demande     <code>File Name to Write:</code> rentrez ici le nom que vous souhaitez donner \u00e0 votre fichier si il n'existe pas d\u00e9j\u00e0.</p> </li> </ul>"},{"location":"linux/03-Commandes_bash/#6-creer-un-dossier-ou-repertoire","title":"6 - Cr\u00e9er un dossier ou r\u00e9pertoire","text":"<p>Snippet</p> <p><code>$ mkdir [nom_du_dossier]</code></p> <p>La fonction <code>mkdir</code> suivie d'un nom cr\u00e9e un dossier dans le r\u00e9pertoire o\u00f9 vous vous trouvez. Nous cr\u00e9ons ci-dessous un dossier appel\u00e9 <code>sti2d_sin</code> dans le r\u00e9pertoire <code>~/Documents</code>.</p>"},{"location":"linux/03-Commandes_bash/#7-supprimer-un-fichier-ou-un-dossier","title":"7 - Supprimer un fichier ou un dossier","text":"<p>Dans le cas d'un fichier :</p> <p>Snippet</p> <p><code>$ rm [chemin_du_fichier]</code></p> <p>Dans le cas d'un dossier :</p> <p>Snippet</p> <p><code>$ rm -rf [chemin_du_dossier]</code></p> <p>Info</p> <p>Le fait de rajouter l'option <code>r</code> (r\u00e9cursivit\u00e9) \u00e0 la commande <code>rm</code> va supprimer tous les fichiers contenus dans le dossier puis le dossier lui m\u00eame, l'option <code>f</code> va forcer la suppression    m\u00eame si le dossier est plein.</p> <p>L'exemple ci-dessous montre la suppression d'un fichier <code>test</code> puis du dossier qui le contenait <code>sti2d_sin</code>.</p> <p>Info</p> <p>La fonction <code>tree</code> permet d'afficher l'arborescence du r\u00e9pertoire actuel, elle     n'est pas install\u00e9e d'origine dans la distribution, pour ce faire tappez : <code>sudo apt install tree</code></p>"},{"location":"linux/03-Commandes_bash/#8-copier-des-fichiers-ou-des-dossiers","title":"8 - Copier des fichiers ou des dossiers","text":"<p>Dans le cas d'un fichier :</p> <p>Snippet</p> <p><code>$ cp [chemin_du_fichier_\u00e0_copier] [r\u00e9pertoire_de_destination]/</code></p> <p>Dans le cas d'un dossier :</p> <p>Snippet</p> <p><code>$ cp -r [chemin_du_dossier_\u00e0_copier] [r\u00e9pertoire_de_destination]/</code></p>"},{"location":"linux/03-Commandes_bash/#9-deplacement-et-renommage","title":"9 - D\u00e9placement et renommage","text":""},{"location":"linux/03-Commandes_bash/#renommer-des-fichiers-ou-des-dossiers","title":"Renommer des fichiers ou des dossiers","text":"<p>Se d\u00e9placer dans le r\u00e9pertoire o\u00f9 se situe le fichier ou le dossier \u00e0 renommer puis tappez la commande :</p> <p>Snippet</p> <p><code>$ mv [nom_actuel] [nouveau_nom]</code></p> <p>Dans l'exemple suivant nous renommons le dossier <code>sti2d_sin</code> en <code>sti2d_itec</code></p>"},{"location":"linux/03-Commandes_bash/#deplacer-des-fichiers-ou-des-dossiers","title":"D\u00e9placer des fichiers ou des dossiers","text":"<p>Snippet</p> <p><code>$ mv [chemin_du_dossier_ou_fichier_a_deplacer] [destination]/</code></p> <p>Ci-dessous nous d\u00e9pla\u00e7ons le dossier <code>~/Documents/sti2d_itec</code> dans le dossier <code>~/Desktop</code> :</p>"},{"location":"linux/04-Permissions/","title":"G\u00e9rer les permissions en environnement GNU-Linux","text":"<p>Linux se veut \u00eatre un syst\u00e8me robuste aux virus et aux intrusions, en partie gr\u00e2ce aux permissions applicables sur chaque fichier ou dossier. Un utilisateur classique connect\u00e9 au syst\u00e8me ne peut avoir avoir un acc\u00e8s en modification qu'aux fichiers pr\u00e9sents dans son <code>home</code>, pour le reste il doit s'identifier en tant que super-utilisateur. En effet avec Linux, chaque fichier appartient \u00e0 un utilisateur et un groupe, les permissions en lecture, \u00e9criture et ex\u00e9cutions peuvent \u00eatre param\u00e9tr\u00e9es pour chacun.</p>"},{"location":"linux/04-Permissions/#1-gerer-les-utilisateurs-et-les-groupes","title":"1. G\u00e9rer les utilisateurs et les groupes","text":""},{"location":"linux/04-Permissions/#11-ajoutersupprimer-un-utilisateur","title":"1.1 Ajouter/Supprimer un utilisateur","text":"<ul> <li>Cr\u00e9er un nouvel utilisateur</li> </ul> <p>Snippet</p> <p><code>sudo adduser [nom]</code></p> <p>Lors de la cr\u00e9ation d'un nouvel utilisateur le syst\u00e8me demande un mot de passe, ainsi que plein d'autres renseignements tels que <code>room</code> <code>phone number</code>... Il n'est pas n\u00e9cessaire de remplir ces informations appuyez sur entrer pour passer dessus.</p> <p>Info</p> <p>Lors de la cr\u00e9ation d'un nouvel utilisateur, linux cr\u00e9e automatiquement un groupe du m\u00eame nom. </p> <ul> <li>Se logger avec le nouvel utilisateur cr\u00e9\u00e9</li> </ul> <p>Snippet</p> <p><code>su [nom_utilisateur]</code></p> <ul> <li>Supprimer un utilisateur</li> </ul> <p>Snippet</p> <p><code>sudo deluser [nom]</code></p>"},{"location":"linux/04-Permissions/#12-ajoutersupprimer-un-groupe","title":"1.2 Ajouter/Supprimer un groupe","text":"<ul> <li>Ajouter un groupe</li> </ul> <p>Snippet</p> <p><code>sudo addgroup [nom]</code></p> <ul> <li>Supprimer un groupe</li> </ul> <p>Snippet</p> <p><code>sudo delgroup [nom]</code></p>"},{"location":"linux/04-Permissions/#13-ajouterretirer-un-utilisateur-dun-groupe","title":"1.3 Ajouter/Retirer un utilisateur d'un groupe","text":"<ul> <li>Ajout d'un utilisateur \u00e0 un groupe</li> </ul> <p>Snippet</p> <p><code>sudo adduser [utilisateur] [groupe]</code></p> <ul> <li>Retrait d'un utilisateur d'un groupe</li> </ul> <p>Snippet</p> <p><code>sudo deluser [utilisateur] [groupe]</code></p>"},{"location":"linux/04-Permissions/#14-visualiser-les-groupes-dappartenance-dun-utilisateur","title":"1.4 Visualiser les groupes d'appartenance d'un utilisateur","text":"<p>Snippet</p> <p><code>sudo groups [utilisateur]</code></p>"},{"location":"linux/04-Permissions/#2-voir-les-permissions-attribuees","title":"2. Voir les permissions attribu\u00e9es","text":"<p>Pour lister les permissions des fichier ou dossiers contenus dans un r\u00e9pertoire, il suffit de taper la commande suivante dans votre terminal :</p> <p>Snippet</p> <p><code>ls -l</code></p> <p>Et pour afficher \u00e9galement les permissions sur les fichiers et dossiers cach\u00e9s :</p> <p>Snippet</p> <p><code>ls -al</code></p> <p>Un exemple d'affichage des permissions du contenu du r\u00e9pertoire <code>/home/marcel/</code> dans une distribution ubuntu :</p> <p>Nous d\u00e9taillons ci-dessous le contenu de la ligne du dossier <code>Musique</code> :</p> <p></p> <p>Une distribution Linux est organis\u00e9e avec un ou plusieurs utilisateurs r\u00e9parties dans des groupes. D\u00e8s qu'un nouvel utilisateur est cr\u00e9\u00e9 il est automatiquement plac\u00e9 dans un groupe du m\u00eame nom.</p> <p>A chaque fichiers et dossiers sont attribu\u00e9s des permissions en lecture, \u00e9criture et ex\u00e9cution. Lors de l'affichage avec <code>ls -l</code> elles sont affich\u00e9es de la mani\u00e8re suivante :</p> <pre><code>rwx # Droits en R-Lecture W-\u00c9criture X-Ex\u00e9cution\nr-x # Droits en R-Lecture et en X-Ex\u00e9cution\n--x # Juste le droit en X-Ex\u00e9cution\n</code></pre>"},{"location":"linux/04-Permissions/#3-modifier-les-permissions","title":"3. Modifier les permissions","text":"<p>Pour modifier les permissions attribu\u00e9es \u00e0 un fichier ou un dossier il faut utiliser la commande :</p> <p>Snippet</p> <p><code>sudo chmod [options] [file or folder]</code></p> <p>La modification se fait en d\u00e9signant l'utilisateur <code>u</code> propri\u00e9taire pour user, le groupe <code>g</code> propri\u00e9taire pour group, et le restant <code>a</code> pour all.</p> <p>Ci dessous quelques exemples de modifications effectu\u00e9es sur le fichier <code>foo</code> :</p> <pre><code>sudo chmod a+x foo #Ajout au fichier foo du droit en execution pour tous les utilisateurs.\n\nsudo chmod g-r foo #Retrait au fichier foo du droit en lecture pour le groupe.\n\nsudo chmod u-x foo #Retrait au fichier foo du droit d'ex\u00e9cution pour l'utilisateur.\n</code></pre> <p>Nous montrons ci-dessous l'exemple du param\u00e9trage des permissions effectu\u00e9 sur le fichier <code>foo</code>:</p> <p>Remarquez qu'il nous faut dans cet exemple, trois lignes pour modifier les permissions du fichier <code>foo</code>, une autre technique nous permet de le faire d'un seul coup :</p> <p><pre><code>sudo chmod 637 foo #Attribution des permissions rw--wxrwx\n</code></pre> Cette m\u00e9thode est issue de la conversion binaire-d\u00e9cimal :</p> <pre><code>rw-|-wx|rwx ---&gt; 110|011|111 --d\u00e9cimal--&gt; 6|3|7\n</code></pre>"},{"location":"linux/04-Permissions/#4-modifier-le-proprietaire","title":"4. Modifier le propri\u00e9taire","text":"<p>La commande suivante permet de modifier le propri\u00e9taire d'un fichier ou un dossier :</p> <p>Snippet</p> <p>sudo chown [user] [file or folder]</p> <p>Ci-dessous nous donnons un exemple de modification du propri\u00e9taire du fichier <code>foobar</code> :</p> <pre><code>sudo chowm alice foobar #Changement de propri\u00e9taire du fichier foobar pour l'utilisateur alice.\n</code></pre> <p>Ci-dessous nous donnons un exemple de modification du propri\u00e9taire du dossier <code>Photos</code> :</p> <pre><code>sudo chown -R alice Photos #Changement de propri\u00e9taire du dossier Photos pour l'utilisateur alice.\n</code></pre> <p>Info</p> <p>L'option <code>-R</code> ajout\u00e9e \u00e0 la commande <code>chown</code> est la r\u00e9cursivit\u00e9 elle permet de modifier le propri\u00e9taire sur le dossier et l'ensemble de son contenu.</p> <p>Exemple de modification de propri\u00e9taire du dossier <code>Documents</code> :</p>"},{"location":"linux/04-Permissions/#5-modifier-le-groupe","title":"5. Modifier le groupe","text":"<p>Pour modifier le groupe d'appartenance d'un fichier ou dossier, 2 options s'offrent \u00e0 nous :</p> <ul> <li>Utiliser la commande pr\u00e9c\u00e9dente de cette mani\u00e8re :</li> </ul> <p>Snippet</p> <p><code>sudo chown [user]:[group] [file or folder]</code></p> <ul> <li>Utiliser la commande <code>chgrp</code> :</li> </ul> <p>Snippet</p> <p><code>sudo chgrp [group] [file or folder]</code></p> <p>Ci-dessous un exemple de changement de groupe avec les deux commandes pr\u00e9c\u00e9dentes :</p>"},{"location":"linux/05-Scripts_bash/","title":"R\u00e9alisation de scripts Bash","text":""},{"location":"linux/05-Scripts_bash/#1-editer-et-lancer-un-script","title":"1 - \u00c9diter et lancer un script","text":"<p>Pour \u00e9diter votre script Bash dans l'environnement GNU/Linux deux options s'offrent \u00e0 vous :</p> <ul> <li>Utiliser un \u00e9diteur de texte en ligne de commande tel que nano ou vim.</li> <li>Utiliser un \u00e9diteur de texte graphique comme gedit</li> </ul> <p>Une fois votre \u00e9diteur ouvert, la premi\u00e8re chose \u00e0 \u00e9crire est :</p> <pre><code>#!/bin/bash\n</code></pre> <p>Cette ligne de code indique au terminal quel type de Shell il doit utiliser, dans notre cas nous utiliserons le Shell Bash. Si vous souhaitez avoir des informations sur les diff\u00e9rents types de Shell, je ne peux que vous conseiller d'aller voir la page Wikip\u00e9dia suivante : lien</p> <p>Ensuite il faut avant tout enregistrer votre nouveau fichier de script, pour cela donnez lui l'extension <code>.sh</code>, extension utilis\u00e9e pour les scripts Bash.</p> <p>Pour lancer un script et observer son fonctionnement, positionnez vous avec le terminal \u00e0 l'endroit o\u00f9 il est situ\u00e9 (voir commandes <code>cd</code> et <code>ls</code>), puis entrez les commandes suivantes :</p> <pre><code>$ chmod a+x nom_du_script.sh\n</code></pre> <p>Cette ligne donne le droit d'ex\u00e9cution de votre script \u00e0 tout le monde.</p> <p><pre><code>$ ./nom_du_script.sh\n</code></pre> Cette ligne lance votre script.</p>"},{"location":"linux/05-Scripts_bash/#2-utilisation-de-variables","title":"2 - Utilisation de variables","text":""},{"location":"linux/05-Scripts_bash/#21-declaration","title":"2.1 - D\u00e9claration","text":"<p>Pour d\u00e9clarer une variable en shell Bash il suffit rentrer son nom puis sa valeur initiale :</p> <p><pre><code>foo=\"je suis le contenu de foo\"\nbar=22\ntest=22.69\n</code></pre> Ci-dessus nous avons d\u00e9clar\u00e9 et initialis\u00e9 3 variables : Une cha\u00eene de caract\u00e8re <code>foo</code>, un entier <code>bar</code> et un flottant <code>test</code>. Remarquez qu'il n'est pas n\u00e9cessaire de d\u00e9clarer le type de la variable, Bash va automatiquement le faire suivant valeur initiale choisie.</p> <p>Warning</p> <p>Lors de la d\u00e9claration d'une variable attention \u00e0 ne pas mettre d'espace entre la fin du nom et le <code>=</code></p>"},{"location":"linux/05-Scripts_bash/#22-utilisation","title":"2.2 - Utilisation","text":"<p>Pour utiliser le contenu d'une variable il faut mettre le symbole <code>$</code> devant le nom de celle-ci, on fait alors r\u00e9f\u00e9rence \u00e0 sa case m\u00e9moire, son contenu.</p> <ul> <li>Faire des calculs avec les variables :</li> </ul> <p>Une syntaxe particuli\u00e8re est utilis\u00e9e pour faire faire un calcul entre 2 ou plusieurs variables, exemple de script ci-dessous :   <pre><code>#!/bin/bash\na=10\nb=12\nc=$((a+b))\n\n# Afficher le r\u00e9sultat \u00e0 l'\u00e9cran\necho $c\n</code></pre></p> <ol> <li>D\u00e9claration de 2 variables <code>a</code> et <code>b</code> initialis\u00e9es respectivement \u00e0 <code>10</code> et <code>12</code></li> <li>Addition dans <code>c</code></li> <li>Affichage du contenu de <code>c</code> \u00e0 l'\u00e9cran gr\u00e2ce \u00e0 la commande <code>echo</code></li> </ol> <p>Warning</p> <p>Bash ne permet pas directement de faire des additions avec des nombres d\u00e9cimaux. Ci n\u00e9cessaire installer l'application appel\u00e9e <code>bc</code> permettant de g\u00e9rer le calcul en nombres flottants.</p> <ul> <li>Concat\u00e9ner des cha\u00eenes de caract\u00e8res</li> </ul> <p>Bash permet de concat\u00e9ner rapidement le contenu de 2 variables de type cha\u00eene de caract\u00e8res, un exemple ci-dessous :</p> <p><pre><code>#!/bin/bash\na=\"J'aime \"\nb=\"coder avec le shell Bash !\" \nc=$a$b\n\n# Afficher le r\u00e9sultat \u00e0 l'\u00e9cran\necho $c\n</code></pre>   1. D\u00e9claration de 2 variables <code>a</code> et <code>b</code> initialis\u00e9es respectivement \u00e0 <code>J'aime</code> et <code>coder avec le shell Bash</code>   2. Concat\u00e9nation dans <code>c</code>   3. Affichage du contenu de <code>c</code> \u00e0 l'\u00e9cran gr\u00e2ce \u00e0 la commande <code>echo</code> </p>"},{"location":"linux/05-Scripts_bash/#3-les-structures-conditionnelles","title":"3 - Les structures conditionnelles","text":""},{"location":"linux/05-Scripts_bash/#31-les-operateurs-de-comparaison","title":"3.1 Les op\u00e9rateurs de comparaison","text":"Op\u00e9rateur Nom -lt lower than (inf\u00e9rieur \u00e0) -gt greater than (sup\u00e9rieur \u00e0) -eq equal (\u00e9gal \u00e0) -ne not equal (diff\u00e9rent de) -ge greater or equal (sup\u00e9rieur ou egal \u00e0) -le lower or equal (inf\u00e9rieur ou \u00e9gal \u00e0) <p>Info</p> <p>Ces op\u00e9rateurs sont uniquement utilisables avec des nombres, pour les chaines de caract\u00e8res voir ci-dessous. De plus Bash ne permet pas directement de comparer des nombres d\u00e9cimaux, ces expressions fonctionnent seulement avec des entiers.</p> Op\u00e9rateur Nom == \u00c9galit\u00e9 != Diff\u00e9rence"},{"location":"linux/05-Scripts_bash/#31-if","title":"3.1 If","text":"<p>La structure <code>if</code> effectue le test donn\u00e9, si il est vrai, elle dirige l'ex\u00e9cution vers le <code>then</code>, dans le cas contraire elle continu la suite des instructions, un script exemple ci-dessous :</p> <pre><code>#!/bin/bash\n\n# Capture des 2 nombres saisis par l'utilisateur\necho \"Rentrez le premier nombre\"\nread a # Saisi du nombre a\necho \"Rentrez le second nombre\"\nread b # Saisi du nombre b\n\n# Test d'inf\u00e9riorit\u00e9 de a sur b\nif [ $a -lt $b ]; then\n    echo \"a est inf\u00e9rieur \u00e0 b\"\nfi\n\n# Test de sup\u00e9riorit\u00e9 de a sur b\nif [ $a -gt $b ]; then\n    echo \"a est sup\u00e9rieur \u00e0 b\"\nfi\n\n# Test d'\u00e9galit\u00e9 de a et b\nif [ $a -eq $b ]; then\n    echo \"a est \u00e9gal \u00e0 b\"\nfi\n</code></pre> <p>Warning</p> <p>Toujours mettre un espace apr\u00e8s le 1er <code>[</code> et avant le dernier <code>]</code> de la condition.</p>"},{"location":"linux/05-Scripts_bash/#32-if-else","title":"3.2 If Else","text":"<p>Nous reprenons le script pr\u00e9c\u00e9dent en utilisant une structure <code>if elif</code> :</p> <pre><code>#!/bin/bash\n\n# Capture des 2 nombres saisis par l'utilisateur\necho \"Rentrez le premier nombre\"\nread a # Saisi du nombre a\necho \"Rentrez le second nombre\"\nread b # Saisi du nombre b\n\n\nif [ $a -lt $b ]; then # Test d'inf\u00e9riorit\u00e9 de a sur b\n    echo \"a est inf\u00e9rieur \u00e0 b\"\nelif [ $a -gt $b ]; then  # Sinon test de sup\u00e9riorit\u00e9 de a sur b\n    echo \"a est sup\u00e9rieur \u00e0 b\"\nelif [ $a -eq $b ]; then # Sinon test d'\u00e9galit\u00e9 de a et b\n    echo \"a est \u00e9gal \u00e0 b\"\nfi\n</code></pre>"},{"location":"linux/05-Scripts_bash/#33-case","title":"3.3 Case","text":"<p>La structure <code>case</code> tr\u00e8s utilis\u00e9e dans les menus, permet d'orienter le programme suivant un choix de l'utilisateur :</p> <pre><code>#!/bin/bash\necho \"Rentrez un nombre compris entre 1 et 4\"\nread nb # Saisi du nombre nb\n\ncase $nb in # Tests sur la variable nb, contenant le nombre saisi\n    1) echo \"Super ! Vous avez saisi 1\";; # Ne pas oublier les 2 ;; sauf sur la derni\u00e8re ligne\n    2) echo \"Formidable ! Vous avez saisi 2\";;\n    3) echo \"Fantastique ! Vous avez saisi 3\";;\n    4) echo \"Wahoo ! Vous avez saisi 4\";;\n    *) echo \"Vous n'avez rien saisi de valable ! Dommage\" # Cas o\u00f9 nb different de [1;4]\nesac\n</code></pre>"},{"location":"linux/05-Scripts_bash/#4-les-boucles","title":"4 - Les boucles","text":""},{"location":"linux/05-Scripts_bash/#41-while","title":"4.1 While","text":"<p>La boucle <code>while</code> ou \"tant que\" permet de r\u00e9p\u00e9ter un ensemble d'instructions tant que la condition donn\u00e9e est vraie, exemple ci-dessous :</p> <pre><code>#!/bin/bash\n\ni=0 # Initialisation de la variable de comptage \u00e0 0\nwhile [ $i -lt 5 ]; do # On tourne tant que i&lt;5\n    echo \"compteur = \"$i # On affiche le contenu de i\n    i=$(($i+1)) # On incr\u00e9mente i\ndone \n</code></pre>"},{"location":"linux/05-Scripts_bash/#42-until","title":"4.2 Until","text":"<p>La boucle <code>until</code> ou \"jusqu'\u00e0\" contrairement \u00e0 la boucle <code>while</code> va s'ex\u00e9cuter jusqu'\u00e0 ce que la condition soit v\u00e9rifi\u00e9e. Nous reprenons l'exemple pr\u00e9c\u00e9dent et adaptons la condition pour compter de 0 \u00e0 4 :</p> <pre><code>#!/bin/bash\n\ni=0 # Initialisation de la variable de comptage \u00e0 0\nuntil [ $i -gt 5 ]; do # On tourne jusqu'\u00e0 ce que i&gt;4\n    echo \"compteur = \"$i # On affiche le contenu de i\n    i=$(($i+1)) # On incr\u00e9mente i\ndone \n</code></pre>"},{"location":"linux/05-Scripts_bash/#43-for","title":"4.3 For","text":"<p>La boucle <code>for</code> est tr\u00e8s utilis\u00e9e en shell Bash pour parcourir les \u00e9l\u00e9ments d'une liste, d'un fichier ou encore le contenu d'un r\u00e9pertoire. Dans l'exemple ci-dessous nous listons tous les fichier du r\u00e9pertoire courant soit /home/foo/ :</p> <pre><code>#!/bin/bash\n\ni=0 # Initialisation de la variable de comptage \u00e0 0\n# On parcourt le r\u00e9pertoire actuel, le nom du fichier recueilli est mis dans la var nom_fichier \u00e0 chaque it\u00e9ration \n# '*' D\u00e9signe l'ensemble des fichier du r\u00e9pertoire\nfor nom_fichier in *; do \n    echo $i\". \"$nom_fichier\n    i=$(($i+1)) # On incr\u00e9mente i\ndone\n</code></pre>"},{"location":"linux/05-Scripts_bash/#5-les-parametres-positionnels","title":"5 - Les param\u00e8tres positionnels","text":"<p>Les param\u00e8tres positionnels sont les param\u00e8tres pass\u00e9s en entr\u00e9e d'un script quand vous appelez celui-ci dans le terminal. Par exemple lors de l'utilisation de la commande <code>rm</code> on peut passer l'option <code>-r</code> qui est un param\u00e8tre positionnel : <code>rm -r</code></p> <p>Il est facile d'utiliser ces param\u00e8tres en Bash ils sont r\u00e9f\u00e9renc\u00e9s par un num\u00e9ro : 1 pour le premier param\u00e8tre, 2 pour le second ...</p> <p><pre><code>$ mon_script param1 param2 param3\n</code></pre> Pour utiliser ces param\u00e8tres dans le script :</p> <pre><code>#!/bin/bash\n\n$1 # Utilisation du premier param\u00e8tre\n$2 # Utilisation du second param\u00e8tre\n$3 # Utilisation du troisi\u00e8me param\u00e8tre\n</code></pre> <p>Info</p> <p>Le param\u00e8tre positionnel <code>$0</code> est une cha\u00eene de caract\u00e8res contenant le nom du script</p>"},{"location":"linux/ACT1-Util_term/","title":"ACT01 : Utiliser le terminal","text":"<p>Le but de cette activit\u00e9 est une initiation \u00e0 l'utilisation de la ligne de commande sous Linux. Nous souhaitons pour cette s\u00e9ance nous focaliser sur l'utilisation de Linux \u00e0 l'aide de la console, invent\u00e9e dans les ann\u00e9es 70, quand l'interface graphique n'existait pas encore.Aujourd'hui la console est appr\u00e9ci\u00e9e pour son gain de temps (commandes intuitives courtes et abr\u00e9g\u00e9es), et sa tr\u00e8s faible consommation de ressources graphiques. Savoir utiliser la console nous permet de comprendre comment le syst\u00e8me fonctionne, loin d'\u00eatre un outil tomb\u00e9 en d\u00e9su\u00e9tude le terminal est encore aujourd'hui l'ultime moyen d'arriver \u00e0 ses fins et quelle qu'elles soient, sur un syst\u00e8me GNU/Linux.</p>"},{"location":"linux/ACT1-Util_term/#1-ouverture-du-terminal","title":"1 - Ouverture du terminal","text":"<p>Cette activit\u00e9 se d\u00e9roulera sur une distribution GNU/Linux, en l\u2019occurrence Debian, install\u00e9e sur tous les postes des salles D116 et D117.</p> <ol> <li>D\u00e9marrez l'ordinateur</li> <li>Log-in</li> <li>Gr\u00e2ce au lanceur d\u00e9marrez un terminal : </li> <li>F\u00e9licitations ! Vous \u00eates devant un invite de commande aussi appel\u00e9 prompt </li> </ol>"},{"location":"linux/ACT1-Util_term/#2-deplacement-dans-larborescence","title":"2 - D\u00e9placement dans l'arborescence","text":""},{"location":"linux/ACT1-Util_term/#a-commandes-ls-ls-a-cd-et-pwd","title":"a - Commandes <code>ls</code>, <code>ls -a</code> , <code>cd</code> et <code>pwd</code>:","text":"<ul> <li>Utilisez la commande <code>pwd</code> pour visualiser le chemin de votre emplacement actuel.</li> <li>D\u00e9placez-vous sur la racine du syst\u00e8me soit l'emplacement <code>/</code> \u00e0 l'aide de <code>cd</code></li> <li>Une fois fait utilisez la commande <code>ls</code> pour afficher l'ensemble des fichiers et dossiers composant le r\u00e9pertoire actuel. Retrouvez l'arborescence \u00e9voqu\u00e9e pr\u00e9c\u00e9demment.</li> <li>Rajoutez \u00e0 <code>ls</code> l'option <code>-a</code> soit <code>ls -a</code> Que remarquez vous ? Que signifie le point devant certains fichiers ?</li> </ul>"},{"location":"linux/ACT1-Util_term/#b-utilisation-de-nano-lediteur-de-texte","title":"b - Utilisation de <code>nano</code> l'\u00e9diteur de texte :","text":"<ul> <li>D\u00e9placez vous \u00e0 l'aide de <code>cd</code> dans le r\u00e9pertoire <code>/home/admin-cielir/Documents</code></li> <li>Cr\u00e9ez \u00e0 l'aide de l'\u00e9diteur <code>nano</code> un nouveau document appel\u00e9 : <code>Activit\u00e9_Linux</code></li> <li>\u00c9crivez dans le document le texte suivant : <code>Linux c'est vraiment g\u00e9nial !</code></li> <li>Quittez <code>nano</code> en enregistrant votre fichier quand il vous le demande.</li> <li>Visualisez \u00e0 l'aide de <code>ls</code> si le fichier \u00e0 bien \u00e9t\u00e9 cr\u00e9\u00e9 et r\u00e9-ouvrez le avec <code>nano</code> pour revoir votre cr\u00e9ation.</li> <li>Rajoutez <code>\u00e7a c'est s\u00fbr !</code> \u00e0 la suite de votre texte.</li> <li>Quittez \u00e0 nouveau <code>nano</code> en enregistrant une derni\u00e8re fois.</li> </ul>"},{"location":"linux/ACT1-Util_term/#c-utilisation-de-mv-cp-rm-et-mkdir","title":"c - Utilisation de <code>mv</code>, <code>cp</code>, <code>rm</code> et <code>mkdir</code>","text":"<ul> <li>Vous souhaitez cr\u00e9er un nouveau r\u00e9pertoire o\u00f9 mettre le fichier que vous venez de cr\u00e9er, utilisez la commande <code>mkdir</code> pour cr\u00e9er un r\u00e9pertoire s'appelant \u00ab <code>Cours_Linux</code> \u00bb toujours dans <code>/home/admin-cielir/Documents</code></li> <li>D\u00e9placez le fichier \u00ab <code>Activit\u00e9_Linux</code> \u00bb dans ce nouveau dossier \u00e0 l'aide de la commande <code>mv</code>, v\u00e9rifiez que le d\u00e9- placement a bien \u00e9t\u00e9 effectu\u00e9</li> <li>Vous vous \u00eates tromp\u00e9s de nom et souhaitez renommez le fichier <code>Activit\u00e9_Linux</code> en <code>Premier_cours_Linux</code> utilisez pour cela \u00e0 nouveau la commande <code>mv</code>, v\u00e9rifiez que le changement a bien \u00e9t\u00e9 effectu\u00e9.</li> <li>Cr\u00e9ez une copie de ce m\u00eame fichier sur le bureau \u00e0 l'aide de la commande <code>cp</code>, v\u00e9rifiez si la copie est pr\u00e9sente sur le bureau.</li> <li>Vous r\u00e9alisez que vous n'avez finalement pas besoin de la copie sur le bureau et souhaitez la supprimer gr\u00e2ce \u00e0 la commande <code>rm</code></li> <li>Vous souhaitez \u00e9galement supprimer le dossier \u00ab Premier_cours_Linux \u00bb qui finalement ne vous sert pas \u00e0 grand chose. Rajoutez pour cela l'option <code>-r</code> \u00e0 <code>rm</code>.</li> </ul>"},{"location":"linux/ACT2-Linux_reseau/","title":"ACT02 : Linux et le r\u00e9seau","text":""},{"location":"linux/ACT2-Linux_reseau/#1-creation-dun-nouvel-utilisateur","title":"1 - Cr\u00e9ation d'un nouvel utilisateur","text":"<p>Vous allez cr\u00e9er sur le syst\u00e8me un utilisateur avec les droits administrateur, le nom d'utilisateur <code>username</code> devra suivre le sch\u00e9ma suivant : <pre><code>Nom : Bombadil\nPr\u00e9nom : Tom\n\n--&gt; username : TBOMBADIL\n</code></pre> Bien entendu, remplacez <code>Bombadil</code> et <code>Tom</code> par vos propres nom et pr\u00e9nom !</p> <p>Pour cela il s'agit d'utiliser la commande : <code>adduser</code>, qui va cr\u00e9er un nouvel utilisateur avec possibilit\u00e9 de lui assigner un mot de passe, nom, pr\u00e9nom, adresse... Le site Ubuntu France, donne une explication compl\u00e8te de l'utilisation de cette commande allez y jeter un coup d'\u0153il : Ubuntu France tutoriel adduser</p> <p></p> <p><sup> \"Sandwich\", by XKCD used under CC BY-NC 2.5 </sup></p> <p>L'utilisateur cr\u00e9\u00e9 ne dispose des privil\u00e8ges root (super utilisateur, le <code>sudo</code>), il faut donc l'ajouter \u00e0 la liste des <code>sudoers</code>, pour se faire suivez l'explication donn\u00e9e par le site : Ubuntu France tutoriel sudoers</p> <p>Question</p> <ol> <li> <p>Utilisez la commande <code>adduser</code> pour cr\u00e9er un nouvel utilisateur de votre choix, d\u00e9finissez \u00e9galement un mot de passe.</p> </li> <li> <p>Rajoutez une ligne au fichier <code>/etc/sudoers</code> pour autoriser l'acc\u00e8s au privil\u00e8ges super utilisateur \u00e0 votre nouvel utilisateur : <code>Nom_utilisateur ALL=(ALL:ALL) ALL</code></p> </li> <li> <p>Identifiez vous avec le nouvel utilisateur cr\u00e9\u00e9 avec <code>su nom_nouvel_utilisateur</code></p> </li> </ol>"},{"location":"linux/ACT2-Linux_reseau/#2-le-gestionnaire-de-paquets","title":"2 - Le gestionnaire de paquets","text":"<p>Les applications d'un syst\u00e8me GNU/Linux sont g\u00e9r\u00e9es par un gestionnaire de paquet (apt pour Debian et donc Ubuntu, yum pour Fedora et pacman pour Archlinux) pour installer une application, nous ne proc\u00e9dons pas comme sur Windows o\u00f9 il s'agit la plupart du temps d'aller r\u00e9cup\u00e9rer le fichier d'installation sur le site du fabricant, ou sur un site g\u00e9n\u00e9raliste \u00e0 la merci des virus et programmes publicitaires... </p> <p>Sur GNU Linux les applications sont dans des bases de donn\u00e9es appel\u00e9es repositories, chaque application est ainsi constamment maintenue \u00e0 jour, vous \u00eates donc certains d'installer la derni\u00e8re version et ce de mani\u00e8re fiable. Un gros avantage : la mise en jour de l'ensemble des applications du syst\u00e8me se fait d'un seul coup, gr\u00e2ce au gestionnaire de paquets.</p> <p>Avant d'installer quoi que ce soit sur la distribution il faut toujours mettre \u00e0 jour les repositories et ensuite mettre \u00e0 jour le syst\u00e8me. Pour ce faire nous utilisons la commande <code>apt update</code> puis <code>apt upgrade</code></p> <p>Question</p> <ol> <li> <p>Utilisez la commande <code>apt update</code> en mode super utilisateur pour mettre \u00e0 jour les bases de donn\u00e9es.</p> </li> <li> <p>Utilisez la commande <code>apt upgrade</code> en mode super utilisateur pour mettre \u00e0 jour le syst\u00e8me.</p> </li> </ol>"},{"location":"linux/ACT2-Linux_reseau/#3-la-configuration-reseau-sous-linux","title":"3 - La configuration r\u00e9seau sous Linux","text":"<p>La commande <code>ip a</code> permet de visualiser la configuration r\u00e9seau de l'ordinateur, gr\u00e2ce \u00e0 elle nous pouvons obtenir des informations sur l'adresse IP, l'adresse MAC ou encore l'interface r\u00e9seau utilis\u00e9e.</p> <p>Question</p> <ol> <li> <p>Utilisez la commande <code>ip a</code> pour obtenir le nom de l'interface r\u00e9seau utilis\u00e9</p> </li> <li> <p>Utilisez la m\u00eame commande pour obtenir votre adresse IP</p> </li> </ol> <p>A pr\u00e9sent nous souhaitons modifier l'adresse IP de l'interface r\u00e9seau utilis\u00e9, la nouvelle adresse devra correspondre au num\u00e9ro de l'ordinateur.</p> <p>Dans la section CIEL-IR l'adressage IP est configur\u00e9 de cette mani\u00e8re :</p> <p>192.168.A.B</p> <ul> <li>A : Salle (si salle D116 : 116)</li> <li>B : Poste (si poste D116-03 : 3)</li> </ul> <p>Question</p> <ol> <li>Changez l'adresse IP de votre machine, pour ce faire vous vous aiderez du tutoriel suivant : How to Set Up a Static IP Address on Debian 12 Linux</li> </ol> <p>\ud83d\udea8 Vous utiliserez obligatoirement la m\u00e9thode 2 : Set Up a Static IP Address on Debian 12 Using the Network Manager</p>"},{"location":"linux/ACT2-Linux_reseau/#4-les-transferts-reseaux","title":"4 - Les transferts r\u00e9seaux","text":""},{"location":"linux/ACT2-Linux_reseau/#a-commande-ping","title":"a - Commande <code>ping</code>","text":"<p>Avant de transf\u00e9rer un document ou de se connecter \u00e0 un ordinateur distant, il faut v\u00e9rifier si celui-ci est pr\u00e9sent sur le r\u00e9seau. La commande <code>ping</code> en utilisant une requ\u00eate ICMP, le protocole va envoyer un paquet sur la cible, si la cible est accessible elle va r\u00e9pondre \u00e0 la requ\u00eate en envoyant un paquet \u00e0 l'\u00e9metteur.</p> <p>Question</p> <ol> <li> <p>Utiliser la commande <code>ping</code> pour v\u00e9rifier l'accessibilit\u00e9 du site web de votre choix. Relevez le temps aller-retour (round trip time).</p> </li> <li> <p>Utilisez la m\u00eame commande sur l'adresse IP de votre voisin de TP. Relevez le temps aller-retour.</p> </li> </ol>"},{"location":"linux/ACT2-Linux_reseau/#b-prendre-la-main-a-distance-avec-ssh","title":"b - Prendre la main \u00e0 distance avec ssh","text":"<p>Le protocole ssh permet de se connecter de mani\u00e8re s\u00e9curis\u00e9e (transferts crypt\u00e9s) \u00e0 un ordinateur linux distant. Pour vous connecter \u00e0 votre machine \u00e0 distance vous devez installer un serveur ssh, le client install\u00e9 d'office permet juste de se connecter \u00e0 partir de votre machine \u00e0 une autre.</p> <ul> <li>Installez le paquet <code>openssh-server</code></li> </ul> <p>La connexion \u00e0 ordinateur distant se fait en utilisant la commande :</p> <p><code>ssh nom_utilisateur_cible@adresse_ip_cible</code></p> <p>Question</p> <ol> <li> <p>Connectez-vous en ssh \u00e0 l'ordinateur de votre voisin de TP</p> </li> <li> <p>Cr\u00e9ez sur son bureau un fichier <code>robot.bak</code> avec nano du contenu de votre choix.</p> </li> <li> <p>Demandez \u00e0 votre voisin si le fichier est bien sur son bureau.</p> </li> </ol>"},{"location":"linux/ACT3-gerer_permissions/","title":"ACT03 : G\u00e9rer les permissions","text":"<p>Vous \u00eates technicien dans l'entreprise de service r\u00e9seau AlbiTech et un de vos client M.Turing fait appel \u00e0 vous pour la configuration d'un serveur linux, tournant sur une carte Raspberry Pi. Vous \u00e9tablissez ensemble le cahier des charges suivant :</p> <ul> <li>Cr\u00e9ation de 4 comptes utilisateurs et de 3 nouveaux groupes:</li> </ul> Utilisateur Groupes Pass alan sudoers parents famille enigma grace sudoers parents famille hopper richard enfants famille stallman linus enfants famille torvalds <p>Info</p> <p>Lorsque un utilisateur est cr\u00e9\u00e9 Linux cr\u00e9e automatiquement le groupe du m\u00eame nom.</p> <ul> <li>Cr\u00e9ation de r\u00e9pertoires :</li> </ul> R\u00e9pertoire Propri\u00e9taire Groupe Droits /media/photos alan famille rwx rwx r-x /partage/cadeaux alan parents rwx rwx --- /partage/administratif alan parents rwx rwx --- /home/alan/TuringTest alan alan rwx rwx --- /home/grace/Cobol grace grace rwx rwx --- <ul> <li>Transfert de fichiers dans les r\u00e9pertoires cr\u00e9\u00e9s, depuis un serveur web :</li> </ul> Fichiers R\u00e9pertoire de destination administratif/* /partage/administratif photos/* /media/photos cobol/* /home/grace/Cobol turingtest/* /home/alan/TuringTest <p>Pour t\u00e9l\u00e9charger les fichiers \u00e0 classer :</p> <pre><code>wget https://ciel-ir-rascol.github.io/linux/ressources/files.zip\n</code></pre> <p>Info</p> <p>Pour d\u00e9compresser l'archive .zip t\u00e9l\u00e9charg\u00e9e vous aurez besoin de t\u00e9l\u00e9charger l'utilitaire <code>unzip</code> : <pre><code>sudo apt install unzip\n\n#Pour d\u00e9compresser\nunzip archive.zip\n</code></pre></p> <p>Bien v\u00e9rifier que les permissions des dossiers soient r\u00e9percut\u00e9es sur les fichiers.</p> <p>Question</p> <ol> <li>Cr\u00e9ez les utilisateurs</li> <li>Cr\u00e9ez les groupes</li> <li>Ajouter les utilisateurs aux groupes</li> <li>Cr\u00e9ez les r\u00e9pertoires </li> <li>T\u00e9l\u00e9chargez les fichiers et mettez les dans les bons r\u00e9pertoires</li> <li>Appliquez les permissions r\u00e9cursivement aux r\u00e9pertoires</li> <li>Appelez l'enseignant pour v\u00e9rifier</li> </ol>"},{"location":"linux/ACT4-Scripts_bash/","title":"Activit\u00e9 : \u00c9crire des scripts Bash","text":""},{"location":"linux/ACT4-Scripts_bash/#exercice-1-tables-de-multiplication","title":"Exercice 1 : Tables de multiplication","text":"<p>Cr\u00e9ez un script Bash affichant la table de multiplication d'un nombre entier rentr\u00e9 par l'utilisateur.</p> <p>Le comportement devra \u00eatre le suivant :</p> <p>Question</p> <ul> <li>\u00c9crivez le script Bash en utilisant l'\u00e9diteur de votre choix.</li> <li>V\u00e9rifiez le fonctionnement en lan\u00e7ant le script et en le testant</li> <li>Appelez l'enseignant pour v\u00e9rifier</li> </ul>"},{"location":"linux/ACT4-Scripts_bash/#exercice-2-jeu-deviner-un-nombre","title":"Exercice 2 : Jeu deviner un nombre","text":"<p>Cr\u00e9ez un jeu dans lequel l'ordinateur tire un nombre entre 2 valeurs donn\u00e9es en param\u00e8tres d'entr\u00e9e, puis propose \u00e0 l'utilisateur de deviner ce nombre en 5 essais. Si il n'y parvient pas mettez fin au script.</p> <p>Le comportement devra \u00eatre le suivant :</p> Tirer un nombre al\u00e9atoire en Bash <p>Pour cr\u00e9er un nombre al\u00e9atoire en Bash, il faut utiliser la fonction <code>$RANDOM</code> qui donne en retour un entier sign\u00e9, soit un nombre entre 0 et 32767.</p> <p>Pour borner ce nombre al\u00e9atoire entre 2 valeurs : [a;b] il faut utiliser la fonction modulo not\u00e9 <code>%</code> En Bash renvoyant le reste d'une division Euclidienne. En effet, le reste d'une division de x par y est toujours compris entre 0 et y (exclu)</p>"},{"location":"linux/ACT4-Scripts_bash/#exercice-3-script-de-backup","title":"Exercice 3 : Script de backup","text":"<p>Nous souhaitons r\u00e9aliser un script de backup fonctionnant \u00e0 l'aide de l'utilitaire <code>rsync</code>, la sauvegarde sera incr\u00e9mentale avec m\u00e9morisation des fichiers supprim\u00e9s. Nous donnons les \u00e9tapes suivantes :</p>"},{"location":"linux/ACT4-Scripts_bash/#1-sauvegarde-locale","title":"1. Sauvegarde locale","text":"<p>Dans un premier temps sauvegarder <code>Documents</code> dans <code>Backup</code> localement en utilisant l'arborescence suivante :</p> <pre><code>/home\n|--Documents\n|----Fichier1\n|----Fichier2\n|----Fichier3\n|\n|--Backup\n|----Courant\n|----Trash\n</code></pre> <ul> <li><code>Documents</code> est le dossier dont le contenu est \u00e0 sauvegarder</li> <li><code>Backup</code> est le dossier contenant la sauvegarde<ul> <li><code>Courant</code> est le clone de <code>Documents</code></li> <li><code>Trash</code> est une m\u00e9moire de tous les fichiers supprim\u00e9s</li> </ul> </li> </ul> <p>Les options de l'utilitaire <code>rsync</code> \u00e0 utiliser pour r\u00e9aliser cette partie sont :</p> <ul> <li><code>-a</code> Option d'archivage, active la r\u00e9cursivit\u00e9 et permet de conserver les permissions</li> <li><code>-u</code> Option update, la synchronisation se produit seulement quand les fichiers de la sauvegarde sont plus anciens que les fichiers sauvegard\u00e9s</li> <li><code>--delete</code> Option suppression, quand les fichiers sont supprim\u00e9s sur la source, ils sont \u00e9galement supprim\u00e9s sur la sauvegarde</li> <li><code>--backup</code> Option sauvegarde, les fichiers supprim\u00e9s sont conserv\u00e9s</li> <li><code>--backup-dir=[chemin dossier trash]</code> Fonctionne avec l'option pr\u00e9c\u00e9dente permet d'indiquer le chemin du dossier de sauvegarde</li> <li><code>--stats</code> Avec cette option rsync renvoi les statistiques \u00e0 la fin de la r\u00e9alisation de la sauvegarde</li> </ul>"},{"location":"linux/ACT4-Scripts_bash/#2-envoi-de-mail","title":"2. Envoi de mail","text":"<p>Nous souhaitons envoyer \u00e0 l'utilisateur le r\u00e9sultat du d\u00e9roulement de la sauvegarde, pour cela nous pouvons utiliser l'utilitaire <code>ssmtp</code> permettant d'envoyer des mails en ligne de commande. Cet utilitaire permet d'utiliser le service classique d'envoi de mail smtp fourni par votre fournisseur de mail, dans notre cas Gmail.</p> <p>Le site pihomeserver donne une explication tr\u00e8s d\u00e9taill\u00e9e sur l'utilisation de <code>ssmtp</code> pour envoyer un mail.</p>"},{"location":"linux/ACT4-Scripts_bash/#3-sauvegarde-a-distance","title":"3. Sauvegarde \u00e0 distance","text":"<p>Nous souhaitons \u00e0 pr\u00e9sent r\u00e9aliser les sauvegardes non plus sur site mais \u00e0 distance, pour cela param\u00e9trez votre r\u00e9pertoire de destination pour utiliser <code>rsync</code> avec ssh.</p> <p>Exemple de variable contenant le r\u00e9pertoire de destination param\u00e9tr\u00e9 pour une sauvegarde avec ssh :</p> <pre><code>REPERTOIRE_DESTINATION=\"foo@192.168.1.2:/home/foo/Backup/Courant\"\n</code></pre>"},{"location":"linux/DM-Capitales_game/","title":"DM de No\u00ebl : Jeu devine la capitale","text":""},{"location":"linux/DM-Capitales_game/#1-enonce","title":"1. \u00c9nonc\u00e9","text":"<p>Nous donnons ci-dessous un fichier contenant la liste des 196 pays reconnus par l'ONU dans le monde, ce fichier en langue Anglaise est organis\u00e9 de la mani\u00e8re suivante :</p> <pre><code>Costa Rica -- San Jose\nCote d'Ivoire -- Yamoussoukro\nCroatia -- Zagreb\nCuba -- Havana\n</code></pre> <p>Chaque ligne comporte un pays suivi par sa capitale, les deux sont s\u00e9par\u00e9s par <code>--</code> </p> <p>A t\u00e9l\u00e9charger ici : capitales.txt</p> <pre><code>wget https://rascolsin.fr/tsti2d/linux/ressources/capitales.txt\n</code></pre> <p>Le script que vous devez r\u00e9aliser, tire de mani\u00e8re al\u00e9atoire une ligne parmi les 196, affiche \u00e0 l'\u00e9cran le nom du pays et demande \u00e0 l'utilisateur de saisir la capitale correspondante.</p> <p>L'utilisateur a le droit \u00e0 5 tentatives, si les 5 tentatives sont infructueuses le programme met fin \u00e0 la partie.</p>"},{"location":"linux/DM-Capitales_game/#2-coup-de-pouce","title":"2. Coup de pouce","text":"<p>Pour r\u00e9aliser le script nous donnons ci-dessous quelques commandes qui peuvent vous permettre d'arriver \u00e0 une solution :</p>"},{"location":"linux/DM-Capitales_game/#commande-shuf","title":"Commande <code>shuf</code>","text":"<p>L'utilitaire <code>shuf</code> permet de tirer de mani\u00e8re al\u00e9atoire une ou plusieurs lignes du fichier texte pass\u00e9 en param\u00e8tre :</p> <p><pre><code>shuf -n 1 capitales.txt\n</code></pre> Cette commande va renvoyer une ligne (option <code>-n 1</code>) tir\u00e9e au sort depuis le fichier <code>capitales.txt</code></p>"},{"location":"linux/DM-Capitales_game/#commande-awk","title":"Commande <code>awk</code>","text":"<p>L'utilitaire <code>awk</code> permet d'extraire une section de texte d'un fichier suivant un crit\u00e8re donn\u00e9, l'option <code>-F</code> permet de choisir un ou plusieurs caract\u00e8res de s\u00e9paration.</p> <p>Exemple d'utilisation pour s\u00e9parer 2 \u00e9l\u00e9ments d'une cha\u00eene de caract\u00e8res :</p> <pre><code>couple=\"Romeo,Juliette\"\nHomme=\"$(echo $couple | awk -F\",\" '{print $1}')\" \nFemme=\"$(echo $couple | awk -F\",\" '{print $2}')\" \n</code></pre> <p>Ici le caract\u00e8re de s\u00e9paration utilis\u00e9 est <code>,</code> nous param\u00e9trons donc <code>-F\",\"</code>. <code>awk</code> s\u00e9pare ensuite les termes, pour afficher le 1er donc <code>Romeo</code> dans notre exemple, il suffit d'ajouter <code>'{print $1}'</code></p>"},{"location":"linux/TODO/","title":"ACT4-Scripts_bash","text":"<ul> <li>[ ] Renommage group\u00e9 de fichiers</li> <li>[ ] Sauvegarde de fichiers incr\u00e9mentiel avec poubelle et envoi de mail + logs</li> <li>[ ] Cr\u00e9ation page web affichage classement top 14 et derniers r\u00e9sultats</li> <li>[ ] Script de backup du raspberry pi avec <code>dd</code></li> <li>[ ] Recherche du code postal en fonction du nom de la ville</li> <li>[ ] Deviner le nombre al\u00e9atoire choisi par la machine</li> <li>[ ] Deviner capitales de pays, inclus ouverture et lecture d'un fichier texte</li> </ul>"}]}